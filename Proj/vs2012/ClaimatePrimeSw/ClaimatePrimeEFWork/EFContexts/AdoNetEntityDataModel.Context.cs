//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClaimatePrimeEFWork.EFContexts
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class EFContext : DbContext
    {
        //public EFContext()
        //    : base("name=EFContext")
        //{
        //}
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [EdmFunction("EFContext", "ufn_StringSplit")]
        public virtual IQueryable<ufn_StringSplit_Result> ufn_StringSplit(string splitStr, string splitChar)
        {
            var splitStrParameter = splitStr != null ?
                new ObjectParameter("SplitStr", splitStr) :
                new ObjectParameter("SplitStr", typeof(string));
    
            var splitCharParameter = splitChar != null ?
                new ObjectParameter("SplitChar", splitChar) :
                new ObjectParameter("SplitChar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_StringSplit_Result>("[EFContext].[ufn_StringSplit](@SplitStr, @SplitChar)", splitStrParameter, splitCharParameter);
        }
    
        public virtual ObjectResult<usp_GetAgent_Role_Result> usp_GetAgent_Role(Nullable<byte> webAdminRoleID, Nullable<byte> managerRoleID, Nullable<int> userID)
        {
            var webAdminRoleIDParameter = webAdminRoleID.HasValue ?
                new ObjectParameter("WebAdminRoleID", webAdminRoleID) :
                new ObjectParameter("WebAdminRoleID", typeof(byte));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAgent_Role_Result>("usp_GetAgent_Role", webAdminRoleIDParameter, managerRoleIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPage_PageRole_Result> usp_GetByPage_PageRole(Nullable<byte> roleID, string controllerName)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPage_PageRole_Result>("usp_GetByPage_PageRole", roleIDParameter, controllerNameParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Page_Result> usp_GetByPkId_Page(Nullable<byte> pageID, Nullable<bool> isActive)
        {
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Page_Result>("usp_GetByPkId_Page", pageIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_PageRole_Result> usp_GetByPkId_PageRole(Nullable<long> pageRoleID, Nullable<bool> isActive)
        {
            var pageRoleIDParameter = pageRoleID.HasValue ?
                new ObjectParameter("PageRoleID", pageRoleID) :
                new ObjectParameter("PageRoleID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_PageRole_Result>("usp_GetByPkId_PageRole", pageRoleIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Role_Result> usp_GetByPkId_Role(Nullable<byte> roleID, Nullable<bool> isActive)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Role_Result>("usp_GetByPkId_Role", roleIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Role_Result> usp_GetBySearch_Role()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Role_Result>("usp_GetBySearch_Role");
        }
    
        public virtual int usp_Insert_Page(string sessionName, string controllerName, string comment, Nullable<long> currentModificationBy, ObjectParameter pageID)
        {
            var sessionNameParameter = sessionName != null ?
                new ObjectParameter("SessionName", sessionName) :
                new ObjectParameter("SessionName", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Page", sessionNameParameter, controllerNameParameter, commentParameter, currentModificationByParameter, pageID);
        }
    
        public virtual int usp_Insert_PageRole(Nullable<byte> roleID, Nullable<byte> pageID, Nullable<bool> createPermission, Nullable<bool> updatePermission, Nullable<bool> readPermission, Nullable<bool> deletePermission, string comment, Nullable<long> currentModificationBy, ObjectParameter pageRoleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(byte));
    
            var createPermissionParameter = createPermission.HasValue ?
                new ObjectParameter("CreatePermission", createPermission) :
                new ObjectParameter("CreatePermission", typeof(bool));
    
            var updatePermissionParameter = updatePermission.HasValue ?
                new ObjectParameter("UpdatePermission", updatePermission) :
                new ObjectParameter("UpdatePermission", typeof(bool));
    
            var readPermissionParameter = readPermission.HasValue ?
                new ObjectParameter("ReadPermission", readPermission) :
                new ObjectParameter("ReadPermission", typeof(bool));
    
            var deletePermissionParameter = deletePermission.HasValue ?
                new ObjectParameter("DeletePermission", deletePermission) :
                new ObjectParameter("DeletePermission", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_PageRole", roleIDParameter, pageIDParameter, createPermissionParameter, updatePermissionParameter, readPermissionParameter, deletePermissionParameter, commentParameter, currentModificationByParameter, pageRoleID);
        }
    
        public virtual int usp_Insert_Role(string roleCode, string roleName, string comment, Nullable<long> currentModificationBy, ObjectParameter roleID)
        {
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("RoleCode", roleCode) :
                new ObjectParameter("RoleCode", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Role", roleCodeParameter, roleNameParameter, commentParameter, currentModificationByParameter, roleID);
        }
    
        public virtual int usp_IsExists_Page(string sessionName, string controllerName, string comment, ObjectParameter pageID)
        {
            var sessionNameParameter = sessionName != null ?
                new ObjectParameter("SessionName", sessionName) :
                new ObjectParameter("SessionName", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Page", sessionNameParameter, controllerNameParameter, commentParameter, pageID);
        }
    
        public virtual int usp_IsExists_PageRole(Nullable<byte> roleID, Nullable<byte> pageID, Nullable<bool> createPermission, Nullable<bool> updatePermission, Nullable<bool> readPermission, Nullable<bool> deletePermission, string comment, ObjectParameter pageRoleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(byte));
    
            var createPermissionParameter = createPermission.HasValue ?
                new ObjectParameter("CreatePermission", createPermission) :
                new ObjectParameter("CreatePermission", typeof(bool));
    
            var updatePermissionParameter = updatePermission.HasValue ?
                new ObjectParameter("UpdatePermission", updatePermission) :
                new ObjectParameter("UpdatePermission", typeof(bool));
    
            var readPermissionParameter = readPermission.HasValue ?
                new ObjectParameter("ReadPermission", readPermission) :
                new ObjectParameter("ReadPermission", typeof(bool));
    
            var deletePermissionParameter = deletePermission.HasValue ?
                new ObjectParameter("DeletePermission", deletePermission) :
                new ObjectParameter("DeletePermission", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_PageRole", roleIDParameter, pageIDParameter, createPermissionParameter, updatePermissionParameter, readPermissionParameter, deletePermissionParameter, commentParameter, pageRoleID);
        }
    
        public virtual int usp_IsExists_Role(string roleCode, string roleName, string comment, ObjectParameter roleID)
        {
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("RoleCode", roleCode) :
                new ObjectParameter("RoleCode", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Role", roleCodeParameter, roleNameParameter, commentParameter, roleID);
        }
    
        public virtual int usp_Update_Page(string sessionName, string controllerName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter pageID)
        {
            var sessionNameParameter = sessionName != null ?
                new ObjectParameter("SessionName", sessionName) :
                new ObjectParameter("SessionName", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Page", sessionNameParameter, controllerNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, pageID);
        }
    
        public virtual int usp_Update_PageRole(Nullable<byte> roleID, Nullable<byte> pageID, Nullable<bool> createPermission, Nullable<bool> updatePermission, Nullable<bool> readPermission, Nullable<bool> deletePermission, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter pageRoleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(byte));
    
            var createPermissionParameter = createPermission.HasValue ?
                new ObjectParameter("CreatePermission", createPermission) :
                new ObjectParameter("CreatePermission", typeof(bool));
    
            var updatePermissionParameter = updatePermission.HasValue ?
                new ObjectParameter("UpdatePermission", updatePermission) :
                new ObjectParameter("UpdatePermission", typeof(bool));
    
            var readPermissionParameter = readPermission.HasValue ?
                new ObjectParameter("ReadPermission", readPermission) :
                new ObjectParameter("ReadPermission", typeof(bool));
    
            var deletePermissionParameter = deletePermission.HasValue ?
                new ObjectParameter("DeletePermission", deletePermission) :
                new ObjectParameter("DeletePermission", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_PageRole", roleIDParameter, pageIDParameter, createPermissionParameter, updatePermissionParameter, readPermissionParameter, deletePermissionParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, pageRoleID);
        }
    
        public virtual int usp_Update_Role(string roleCode, string roleName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter roleID)
        {
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("RoleCode", roleCode) :
                new ObjectParameter("RoleCode", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Role", roleCodeParameter, roleNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, roleID);
        }
    
        public virtual ObjectResult<usp_GetAll_WebCulture_Result> usp_GetAll_WebCulture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAll_WebCulture_Result>("usp_GetAll_WebCulture");
        }
    
        public virtual ObjectResult<usp_GetByAZ_WebCulture_Result> usp_GetByAZ_WebCulture(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_WebCulture_Result>("usp_GetByAZ_WebCulture", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ErrorLog_Result> usp_GetByPkId_ErrorLog(Nullable<long> errorLogID)
        {
            var errorLogIDParameter = errorLogID.HasValue ?
                new ObjectParameter("ErrorLogID", errorLogID) :
                new ObjectParameter("ErrorLogID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ErrorLog_Result>("usp_GetByPkId_ErrorLog", errorLogIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByPkId_LockUnLock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByPkId_LockUnLock");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByPkId_LogInLogOut()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByPkId_LogInLogOut");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByPkId_LogInTrial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByPkId_LogInTrial");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByPkId_UserClinicSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByPkId_UserClinicSelect");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByPkId_UserPassword()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByPkId_UserPassword");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByPkId_UserRoleSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByPkId_UserRoleSelect");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByPkId_WebCulture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByPkId_WebCulture");
        }
    
        public virtual ObjectResult<usp_GetBySearch_WebCulture_Result> usp_GetBySearch_WebCulture(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_WebCulture_Result>("usp_GetBySearch_WebCulture", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByUserID_UserPassword_Result> usp_GetByUserID_UserPassword(Nullable<int> userID, Nullable<int> recCnt)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var recCntParameter = recCnt.HasValue ?
                new ObjectParameter("RecCnt", recCnt) :
                new ObjectParameter("RecCnt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByUserID_UserPassword_Result>("usp_GetByUserID_UserPassword", userIDParameter, recCntParameter);
        }
    
        public virtual ObjectResult<usp_GetExcel_UserReport_Result> usp_GetExcel_UserReport(Nullable<int> userID, Nullable<short> userReportID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userReportIDParameter = userReportID.HasValue ?
                new ObjectParameter("UserReportID", userReportID) :
                new ObjectParameter("UserReportID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetExcel_UserReport_Result>("usp_GetExcel_UserReport", userIDParameter, userReportIDParameter);
        }
    
        public virtual ObjectResult<usp_GetLastStatus_SyncStatus_Result> usp_GetLastStatus_SyncStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLastStatus_SyncStatus_Result>("usp_GetLastStatus_SyncStatus");
        }
    
        public virtual ObjectResult<usp_GetLastSuccStatus_SyncStatus_Result> usp_GetLastSuccStatus_SyncStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLastSuccStatus_SyncStatus_Result>("usp_GetLastSuccStatus_SyncStatus");
        }
    
        public virtual ObjectResult<usp_GetRecent_LockUnLock_Result> usp_GetRecent_LockUnLock(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecent_LockUnLock_Result>("usp_GetRecent_LockUnLock", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRecent_LogInLogOut_Result> usp_GetRecent_LogInLogOut(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecent_LogInLogOut_Result>("usp_GetRecent_LogInLogOut", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRecent_LogInTrial_Result> usp_GetRecent_LogInTrial(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecent_LogInTrial_Result>("usp_GetRecent_LogInTrial", userNameParameter);
        }
    
        public virtual ObjectResult<usp_GetRecent_UserClinicSelect_Result> usp_GetRecent_UserClinicSelect(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecent_UserClinicSelect_Result>("usp_GetRecent_UserClinicSelect", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRecent_UserRoleSelect_Result> usp_GetRecent_UserRoleSelect(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecent_UserRoleSelect_Result>("usp_GetRecent_UserRoleSelect", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSearch_UserReport_Result> usp_GetSearch_UserReport(Nullable<int> userID, Nullable<byte> reportTypeID, Nullable<bool> forDtRpt, Nullable<long> reportObjectID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var reportTypeIDParameter = reportTypeID.HasValue ?
                new ObjectParameter("ReportTypeID", reportTypeID) :
                new ObjectParameter("ReportTypeID", typeof(byte));
    
            var forDtRptParameter = forDtRpt.HasValue ?
                new ObjectParameter("ForDtRpt", forDtRpt) :
                new ObjectParameter("ForDtRpt", typeof(bool));
    
            var reportObjectIDParameter = reportObjectID.HasValue ?
                new ObjectParameter("ReportObjectID", reportObjectID) :
                new ObjectParameter("ReportObjectID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSearch_UserReport_Result>("usp_GetSearch_UserReport", userIDParameter, reportTypeIDParameter, forDtRptParameter, reportObjectIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTrialBalance_LogInTrial_Result> usp_GetTrialBalance_LogInTrial(string email, Nullable<byte> trialMaxCount)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var trialMaxCountParameter = trialMaxCount.HasValue ?
                new ObjectParameter("TrialMaxCount", trialMaxCount) :
                new ObjectParameter("TrialMaxCount", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTrialBalance_LogInTrial_Result>("usp_GetTrialBalance_LogInTrial", emailParameter, trialMaxCountParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlDayStatus_UserReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlDayStatus_UserReport");
        }
    
        public virtual ObjectResult<string> usp_GetXmlDelete_UserReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlDelete_UserReport");
        }
    
        public virtual int usp_Insert_ErrorLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ErrorLog");
        }
    
        public virtual int usp_Insert_LockUnLock(Nullable<int> userID, ObjectParameter lockUnLockID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_LockUnLock", userIDParameter, lockUnLockID);
        }
    
        public virtual int usp_Insert_LogInLogOut(Nullable<int> userID, string clientHostIPAddress, string clientHostName, string sessionID, ObjectParameter logInLogOutID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var clientHostIPAddressParameter = clientHostIPAddress != null ?
                new ObjectParameter("ClientHostIPAddress", clientHostIPAddress) :
                new ObjectParameter("ClientHostIPAddress", typeof(string));
    
            var clientHostNameParameter = clientHostName != null ?
                new ObjectParameter("ClientHostName", clientHostName) :
                new ObjectParameter("ClientHostName", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_LogInLogOut", userIDParameter, clientHostIPAddressParameter, clientHostNameParameter, sessionIDParameter, logInLogOutID);
        }
    
        public virtual int usp_Insert_LogInTrial(string trialUsername, Nullable<bool> isSuccess, string clientHostIPAddress, string clientHostName, Nullable<bool> isUserLogin, ObjectParameter logInTrialID)
        {
            var trialUsernameParameter = trialUsername != null ?
                new ObjectParameter("TrialUsername", trialUsername) :
                new ObjectParameter("TrialUsername", typeof(string));
    
            var isSuccessParameter = isSuccess.HasValue ?
                new ObjectParameter("IsSuccess", isSuccess) :
                new ObjectParameter("IsSuccess", typeof(bool));
    
            var clientHostIPAddressParameter = clientHostIPAddress != null ?
                new ObjectParameter("ClientHostIPAddress", clientHostIPAddress) :
                new ObjectParameter("ClientHostIPAddress", typeof(string));
    
            var clientHostNameParameter = clientHostName != null ?
                new ObjectParameter("ClientHostName", clientHostName) :
                new ObjectParameter("ClientHostName", typeof(string));
    
            var isUserLoginParameter = isUserLogin.HasValue ?
                new ObjectParameter("IsUserLogin", isUserLogin) :
                new ObjectParameter("IsUserLogin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_LogInTrial", trialUsernameParameter, isSuccessParameter, clientHostIPAddressParameter, clientHostNameParameter, isUserLoginParameter, logInTrialID);
        }
    
        public virtual int usp_Insert_SyncStatus(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_SyncStatus", userIDParameter);
        }
    
        public virtual int usp_Insert_UserClinicSelect(Nullable<int> userID, Nullable<int> clinicID, ObjectParameter userClinicSelectID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_UserClinicSelect", userIDParameter, clinicIDParameter, userClinicSelectID);
        }
    
        public virtual int usp_Insert_UserPassword(Nullable<int> userID, string password, string allCapsPassword, Nullable<int> createdBy, ObjectParameter userPasswordID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var allCapsPasswordParameter = allCapsPassword != null ?
                new ObjectParameter("AllCapsPassword", allCapsPassword) :
                new ObjectParameter("AllCapsPassword", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_UserPassword", userIDParameter, passwordParameter, allCapsPasswordParameter, createdByParameter, userPasswordID);
        }
    
        public virtual int usp_Insert_UserReport(Nullable<byte> reportTypeID, Nullable<long> reportObjectID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> currentModificationBy, string nxtIdn, ObjectParameter userReportID, ObjectParameter excelFileName)
        {
            var reportTypeIDParameter = reportTypeID.HasValue ?
                new ObjectParameter("ReportTypeID", reportTypeID) :
                new ObjectParameter("ReportTypeID", typeof(byte));
    
            var reportObjectIDParameter = reportObjectID.HasValue ?
                new ObjectParameter("ReportObjectID", reportObjectID) :
                new ObjectParameter("ReportObjectID", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(int));
    
            var nxtIdnParameter = nxtIdn != null ?
                new ObjectParameter("NxtIdn", nxtIdn) :
                new ObjectParameter("NxtIdn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_UserReport", reportTypeIDParameter, reportObjectIDParameter, dateFromParameter, dateToParameter, currentModificationByParameter, nxtIdnParameter, userReportID, excelFileName);
        }
    
        public virtual int usp_Insert_UserRoleSelect(Nullable<int> userID, Nullable<int> roleID, ObjectParameter userRoleSelectID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_UserRoleSelect", userIDParameter, roleIDParameter, userRoleSelectID);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Insert_WebCulture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Insert_WebCulture");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_ErrorLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_ErrorLog");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_LockUnLock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_LockUnLock");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_LogInLogOut()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_LogInLogOut");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_LogInTrial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_LogInTrial");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_UserClinicSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_UserClinicSelect");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_UserPassword()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_UserPassword");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_UserRoleSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_UserRoleSelect");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IsExists_WebCulture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IsExists_WebCulture");
        }
    
        public virtual int usp_Update_ErrorLog(Nullable<long> errorLogID, Nullable<int> errorNumber, string errorMessage, Nullable<int> errorSeverity, Nullable<int> errorState, Nullable<int> errorLine, string errorProcedure)
        {
            var errorLogIDParameter = errorLogID.HasValue ?
                new ObjectParameter("ErrorLogID", errorLogID) :
                new ObjectParameter("ErrorLogID", typeof(long));
    
            var errorNumberParameter = errorNumber.HasValue ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(int));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var errorSeverityParameter = errorSeverity.HasValue ?
                new ObjectParameter("ErrorSeverity", errorSeverity) :
                new ObjectParameter("ErrorSeverity", typeof(int));
    
            var errorStateParameter = errorState.HasValue ?
                new ObjectParameter("ErrorState", errorState) :
                new ObjectParameter("ErrorState", typeof(int));
    
            var errorLineParameter = errorLine.HasValue ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(int));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ErrorLog", errorLogIDParameter, errorNumberParameter, errorMessageParameter, errorSeverityParameter, errorStateParameter, errorLineParameter, errorProcedureParameter);
        }
    
        public virtual int usp_Update_LockUnLock(Nullable<int> userID, ObjectParameter lockUnLockID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_LockUnLock", userIDParameter, lockUnLockID);
        }
    
        public virtual int usp_Update_LogInLogOut(ObjectParameter logInLogOutID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_LogInLogOut", logInLogOutID);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Update_LogInTrial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Update_LogInTrial");
        }
    
        public virtual int usp_Update_SyncStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_SyncStatus");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Update_UserClinicSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Update_UserClinicSelect");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Update_UserPassword()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Update_UserPassword");
        }
    
        public virtual int usp_Update_UserReport(Nullable<bool> isSuccess, ObjectParameter userReportID)
        {
            var isSuccessParameter = isSuccess.HasValue ?
                new ObjectParameter("IsSuccess", isSuccess) :
                new ObjectParameter("IsSuccess", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_UserReport", isSuccessParameter, userReportID);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Update_UserRoleSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Update_UserRoleSelect");
        }
    
        public virtual int usp_Update_WebCulture(string keyName, Nullable<bool> isActive, ObjectParameter webCultureID)
        {
            var keyNameParameter = keyName != null ?
                new ObjectParameter("KeyName", keyName) :
                new ObjectParameter("KeyName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_WebCulture", keyNameParameter, isActiveParameter, webCultureID);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Credential_Result> usp_GetAutoComplete_Credential(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Credential_Result>("usp_GetAutoComplete_Credential", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_FacilityDone_Result> usp_GetAutoComplete_FacilityDone(string stats, Nullable<byte> posID)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            var posIDParameter = posID.HasValue ?
                new ObjectParameter("PosID", posID) :
                new ObjectParameter("PosID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_FacilityDone_Result>("usp_GetAutoComplete_FacilityDone", statsParameter, posIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_FacilityType_Result> usp_GetAutoComplete_FacilityType(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_FacilityType_Result>("usp_GetAutoComplete_FacilityType", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_IPA_Result> usp_GetAutoComplete_IPA(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_IPA_Result>("usp_GetAutoComplete_IPA", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Provider_Result> usp_GetAutoComplete_Provider(string stats, Nullable<int> cliniccode)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            var cliniccodeParameter = cliniccode.HasValue ?
                new ObjectParameter("cliniccode", cliniccode) :
                new ObjectParameter("cliniccode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Provider_Result>("usp_GetAutoComplete_Provider", statsParameter, cliniccodeParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Specialty_Result> usp_GetAutoComplete_Specialty(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Specialty_Result>("usp_GetAutoComplete_Specialty", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Clinic_Result> usp_GetByAZ_Clinic(Nullable<int> userID, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Clinic_Result>("usp_GetByAZ_Clinic", userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_FacilityDone_Result> usp_GetByAZ_FacilityDone(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_FacilityDone_Result>("usp_GetByAZ_FacilityDone", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Provider_Result> usp_GetByAZ_Provider(Nullable<int> clinicID, string searchName, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Provider_Result>("usp_GetByAZ_Provider", clinicIDParameter, searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Specialty_Result> usp_GetByAZ_Specialty(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Specialty_Result>("usp_GetByAZ_Specialty", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZClinic_Provider_Result> usp_GetByAZClinic_Provider(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZClinic_Provider_Result>("usp_GetByAZClinic_Provider", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByClinicID_IPA_Result> usp_GetByClinicID_IPA(Nullable<long> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByClinicID_IPA_Result>("usp_GetByClinicID_IPA", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByID_FacilityDone_Result> usp_GetByID_FacilityDone(Nullable<long> patientVisitID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByID_FacilityDone_Result>("usp_GetByID_FacilityDone", patientVisitIDParameter);
        }
    
        public virtual ObjectResult<usp_GetById_IPA_Result> usp_GetById_IPA(Nullable<int> iPAID, Nullable<bool> isActive)
        {
            var iPAIDParameter = iPAID.HasValue ?
                new ObjectParameter("IPAID", iPAID) :
                new ObjectParameter("IPAID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetById_IPA_Result>("usp_GetById_IPA", iPAIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByManagerID_Clinic_Result> usp_GetByManagerID_Clinic(Nullable<int> managerID, Nullable<int> userID)
        {
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByManagerID_Clinic_Result>("usp_GetByManagerID_Clinic", managerIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatientID_Provider_Result> usp_GetByPatientID_Provider(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatientID_Provider_Result>("usp_GetByPatientID_Provider", patientIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Clinic_Result> usp_GetByPkId_Clinic(Nullable<int> clinicID, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Clinic_Result>("usp_GetByPkId_Clinic", clinicIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Credential_Result> usp_GetByPkId_Credential(Nullable<byte> credentialID, Nullable<bool> isActive)
        {
            var credentialIDParameter = credentialID.HasValue ?
                new ObjectParameter("CredentialID", credentialID) :
                new ObjectParameter("CredentialID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Credential_Result>("usp_GetByPkId_Credential", credentialIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_FacilityDone_Result> usp_GetByPkId_FacilityDone(Nullable<int> facilityDoneID, Nullable<bool> isActive)
        {
            var facilityDoneIDParameter = facilityDoneID.HasValue ?
                new ObjectParameter("FacilityDoneID", facilityDoneID) :
                new ObjectParameter("FacilityDoneID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_FacilityDone_Result>("usp_GetByPkId_FacilityDone", facilityDoneIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_FacilityType_Result> usp_GetByPkId_FacilityType(Nullable<byte> facilityTypeID, Nullable<bool> isActive)
        {
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_FacilityType_Result>("usp_GetByPkId_FacilityType", facilityTypeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_IPA_Result> usp_GetByPkId_IPA(Nullable<int> iPAID, Nullable<bool> isActive)
        {
            var iPAIDParameter = iPAID.HasValue ?
                new ObjectParameter("IPAID", iPAID) :
                new ObjectParameter("IPAID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_IPA_Result>("usp_GetByPkId_IPA", iPAIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Provider_Result> usp_GetByPkId_Provider(Nullable<int> providerID, Nullable<bool> isActive)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Provider_Result>("usp_GetByPkId_Provider", providerIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Specialty_Result> usp_GetByPkId_Specialty(Nullable<byte> specialtyID, Nullable<bool> isActive)
        {
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Specialty_Result>("usp_GetByPkId_Specialty", specialtyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Clinic_Result> usp_GetBySearch_Clinic(Nullable<int> userID, string startBy, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Clinic_Result>("usp_GetBySearch_Clinic", userIDParameter, startByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Credential_Result> usp_GetBySearch_Credential(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Credential_Result>("usp_GetBySearch_Credential", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_FacilityDone_Result> usp_GetBySearch_FacilityDone(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_FacilityDone_Result>("usp_GetBySearch_FacilityDone", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_FacilityType_Result> usp_GetBySearch_FacilityType(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_FacilityType_Result>("usp_GetBySearch_FacilityType", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_IPA_Result> usp_GetBySearch_IPA(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_IPA_Result>("usp_GetBySearch_IPA", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Provider_Result> usp_GetBySearch_Provider(Nullable<int> clinicID, string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Provider_Result>("usp_GetBySearch_Provider", clinicIDParameter, searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Specialty_Result> usp_GetBySearch_Specialty(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Specialty_Result>("usp_GetBySearch_Specialty", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearchAd_Clinic_Result> usp_GetBySearchAd_Clinic(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearchAd_Clinic_Result>("usp_GetBySearchAd_Clinic", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearchClinic_Provider_Result> usp_GetBySearchClinic_Provider(string startBy, Nullable<int> clinicID)
        {
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearchClinic_Provider_Result>("usp_GetBySearchClinic_Provider", startByParameter, clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByUserID_Clinic_Result> usp_GetByUserID_Clinic(Nullable<bool> isActive, Nullable<long> userID)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByUserID_Clinic_Result>("usp_GetByUserID_Clinic", isActiveParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCount_Clinic_Result> usp_GetCount_Clinic(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCount_Clinic_Result>("usp_GetCount_Clinic", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetFacilityDoneNameByID_Clinic_Result> usp_GetFacilityDoneNameByID_Clinic(Nullable<long> clinicID, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFacilityDoneNameByID_Clinic_Result>("usp_GetFacilityDoneNameByID_Clinic", clinicIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetICDFormat_Clinic_Result> usp_GetICDFormat_Clinic(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetICDFormat_Clinic_Result>("usp_GetICDFormat_Clinic", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Clinic_Result> usp_GetIDAutoComplete_Clinic(string clinicCode, Nullable<bool> isActive)
        {
            var clinicCodeParameter = clinicCode != null ?
                new ObjectParameter("ClinicCode", clinicCode) :
                new ObjectParameter("ClinicCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Clinic_Result>("usp_GetIDAutoComplete_Clinic", clinicCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Credential_Result> usp_GetIDAutoComplete_Credential(string credentialCode)
        {
            var credentialCodeParameter = credentialCode != null ?
                new ObjectParameter("CredentialCode", credentialCode) :
                new ObjectParameter("CredentialCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Credential_Result>("usp_GetIDAutoComplete_Credential", credentialCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_FacilityDone_Result> usp_GetIDAutoComplete_FacilityDone(string facilityDoneCode)
        {
            var facilityDoneCodeParameter = facilityDoneCode != null ?
                new ObjectParameter("FacilityDoneCode", facilityDoneCode) :
                new ObjectParameter("FacilityDoneCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_FacilityDone_Result>("usp_GetIDAutoComplete_FacilityDone", facilityDoneCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_FacilityType_Result> usp_GetIDAutoComplete_FacilityType(string facilityTypeCode)
        {
            var facilityTypeCodeParameter = facilityTypeCode != null ?
                new ObjectParameter("FacilityTypeCode", facilityTypeCode) :
                new ObjectParameter("FacilityTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_FacilityType_Result>("usp_GetIDAutoComplete_FacilityType", facilityTypeCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_IPA_Result> usp_GetIDAutoComplete_IPA(string iPACode)
        {
            var iPACodeParameter = iPACode != null ?
                new ObjectParameter("IPACode", iPACode) :
                new ObjectParameter("IPACode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_IPA_Result>("usp_GetIDAutoComplete_IPA", iPACodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Provider_Result> usp_GetIDAutoComplete_Provider(string providerCode, Nullable<bool> isActive)
        {
            var providerCodeParameter = providerCode != null ?
                new ObjectParameter("ProviderCode", providerCode) :
                new ObjectParameter("ProviderCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Provider_Result>("usp_GetIDAutoComplete_Provider", providerCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Specialty_Result> usp_GetIDAutoComplete_Specialty(string specialtyCode)
        {
            var specialtyCodeParameter = specialtyCode != null ?
                new ObjectParameter("SpecialtyCode", specialtyCode) :
                new ObjectParameter("SpecialtyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Specialty_Result>("usp_GetIDAutoComplete_Specialty", specialtyCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIsPatVisitDoc_Clinic_Result> usp_GetIsPatVisitDoc_Clinic(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIsPatVisitDoc_Clinic_Result>("usp_GetIsPatVisitDoc_Clinic", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_FacilityDone_Result> usp_GetNameByID_FacilityDone(Nullable<long> facilityDoneID, Nullable<bool> isActive)
        {
            var facilityDoneIDParameter = facilityDoneID.HasValue ?
                new ObjectParameter("FacilityDoneID", facilityDoneID) :
                new ObjectParameter("FacilityDoneID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_FacilityDone_Result>("usp_GetNameByID_FacilityDone", facilityDoneIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_FacilityType_Result> usp_GetNameByID_FacilityType(Nullable<long> facilityTypeID, Nullable<bool> isActive)
        {
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_FacilityType_Result>("usp_GetNameByID_FacilityType", facilityTypeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_IPA_Result> usp_GetNameByID_IPA(Nullable<int> iPAID, Nullable<bool> isActive)
        {
            var iPAIDParameter = iPAID.HasValue ?
                new ObjectParameter("IPAID", iPAID) :
                new ObjectParameter("IPAID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_IPA_Result>("usp_GetNameByID_IPA", iPAIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_Provider_Result> usp_GetNameByID_Provider(Nullable<int> providerID, Nullable<bool> isActive)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_Provider_Result>("usp_GetNameByID_Provider", providerIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_Specialty_Result> usp_GetNameByID_Specialty(Nullable<long> specialtyID, Nullable<bool> isActive)
        {
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_Specialty_Result>("usp_GetNameByID_Specialty", specialtyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetPatientVisitComplexity_Clinic_Result> usp_GetPatientVisitComplexity_Clinic(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPatientVisitComplexity_Clinic_Result>("usp_GetPatientVisitComplexity_Clinic", clinicIDParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlClinicID_Clinic(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlClinicID_Clinic", clinicIDParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlProvider_Provider(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlProvider_Provider", iDParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlProviderID_Provider(Nullable<int> providerID)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlProviderID_Provider", providerIDParameter);
        }
    
        public virtual int usp_Insert_Clinic(Nullable<int> iPAID, string clinicCode, string clinicName, string nPI, string taxID, Nullable<byte> entityTypeQualifierID, Nullable<byte> specialtyID, Nullable<byte> iCDFormat, string logoRelPath, Nullable<bool> isPatientDemographicsPull, Nullable<bool> isPatVisitDocManadatory, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, Nullable<byte> patientVisitComplexity, string comment, Nullable<long> currentModificationBy, ObjectParameter clinicID)
        {
            var iPAIDParameter = iPAID.HasValue ?
                new ObjectParameter("IPAID", iPAID) :
                new ObjectParameter("IPAID", typeof(int));
    
            var clinicCodeParameter = clinicCode != null ?
                new ObjectParameter("ClinicCode", clinicCode) :
                new ObjectParameter("ClinicCode", typeof(string));
    
            var clinicNameParameter = clinicName != null ?
                new ObjectParameter("ClinicName", clinicName) :
                new ObjectParameter("ClinicName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(byte));
    
            var iCDFormatParameter = iCDFormat.HasValue ?
                new ObjectParameter("ICDFormat", iCDFormat) :
                new ObjectParameter("ICDFormat", typeof(byte));
    
            var logoRelPathParameter = logoRelPath != null ?
                new ObjectParameter("LogoRelPath", logoRelPath) :
                new ObjectParameter("LogoRelPath", typeof(string));
    
            var isPatientDemographicsPullParameter = isPatientDemographicsPull.HasValue ?
                new ObjectParameter("IsPatientDemographicsPull", isPatientDemographicsPull) :
                new ObjectParameter("IsPatientDemographicsPull", typeof(bool));
    
            var isPatVisitDocManadatoryParameter = isPatVisitDocManadatory.HasValue ?
                new ObjectParameter("IsPatVisitDocManadatory", isPatVisitDocManadatory) :
                new ObjectParameter("IsPatVisitDocManadatory", typeof(bool));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var patientVisitComplexityParameter = patientVisitComplexity.HasValue ?
                new ObjectParameter("PatientVisitComplexity", patientVisitComplexity) :
                new ObjectParameter("PatientVisitComplexity", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Clinic", iPAIDParameter, clinicCodeParameter, clinicNameParameter, nPIParameter, taxIDParameter, entityTypeQualifierIDParameter, specialtyIDParameter, iCDFormatParameter, logoRelPathParameter, isPatientDemographicsPullParameter, isPatVisitDocManadatoryParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, patientVisitComplexityParameter, commentParameter, currentModificationByParameter, clinicID);
        }
    
        public virtual int usp_Insert_Credential(string credentialCode, string credentialName, string comment, Nullable<long> currentModificationBy, ObjectParameter credentialID)
        {
            var credentialCodeParameter = credentialCode != null ?
                new ObjectParameter("CredentialCode", credentialCode) :
                new ObjectParameter("CredentialCode", typeof(string));
    
            var credentialNameParameter = credentialName != null ?
                new ObjectParameter("CredentialName", credentialName) :
                new ObjectParameter("CredentialName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Credential", credentialCodeParameter, credentialNameParameter, commentParameter, currentModificationByParameter, credentialID);
        }
    
        public virtual int usp_Insert_FacilityDone(string facilityDoneCode, string facilityDoneName, string nPI, string taxID, Nullable<byte> facilityTypeID, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, string comment, Nullable<long> currentModificationBy, ObjectParameter facilityDoneID)
        {
            var facilityDoneCodeParameter = facilityDoneCode != null ?
                new ObjectParameter("FacilityDoneCode", facilityDoneCode) :
                new ObjectParameter("FacilityDoneCode", typeof(string));
    
            var facilityDoneNameParameter = facilityDoneName != null ?
                new ObjectParameter("FacilityDoneName", facilityDoneName) :
                new ObjectParameter("FacilityDoneName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_FacilityDone", facilityDoneCodeParameter, facilityDoneNameParameter, nPIParameter, taxIDParameter, facilityTypeIDParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, commentParameter, currentModificationByParameter, facilityDoneID);
        }
    
        public virtual int usp_Insert_FacilityType(string facilityTypeCode, string facilityTypeName, string comment, Nullable<long> currentModificationBy, ObjectParameter facilityTypeID)
        {
            var facilityTypeCodeParameter = facilityTypeCode != null ?
                new ObjectParameter("FacilityTypeCode", facilityTypeCode) :
                new ObjectParameter("FacilityTypeCode", typeof(string));
    
            var facilityTypeNameParameter = facilityTypeName != null ?
                new ObjectParameter("FacilityTypeName", facilityTypeName) :
                new ObjectParameter("FacilityTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_FacilityType", facilityTypeCodeParameter, facilityTypeNameParameter, commentParameter, currentModificationByParameter, facilityTypeID);
        }
    
        public virtual int usp_Insert_IPA(string iPACode, string iPAName, string nPI, string taxID, Nullable<byte> entityTypeQualifierID, string logoRelPath, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, string comment, Nullable<long> currentModificationBy, ObjectParameter iPAID)
        {
            var iPACodeParameter = iPACode != null ?
                new ObjectParameter("IPACode", iPACode) :
                new ObjectParameter("IPACode", typeof(string));
    
            var iPANameParameter = iPAName != null ?
                new ObjectParameter("IPAName", iPAName) :
                new ObjectParameter("IPAName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var logoRelPathParameter = logoRelPath != null ?
                new ObjectParameter("LogoRelPath", logoRelPath) :
                new ObjectParameter("LogoRelPath", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_IPA", iPACodeParameter, iPANameParameter, nPIParameter, taxIDParameter, entityTypeQualifierIDParameter, logoRelPathParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, commentParameter, currentModificationByParameter, iPAID);
        }
    
        public virtual int usp_Insert_Provider(Nullable<int> clinicID, string providerCode, string lastName, string middleName, string firstName, Nullable<byte> credentialID, string nPI, string taxID, string sSN, Nullable<bool> isTaxIDPrimaryOption, Nullable<byte> specialtyID, string photoRelPath, Nullable<bool> isSignedFile, Nullable<System.DateTime> signedDate, string licenseNumber, string cLIANumber, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, string secondaryPhoneNumber, string email, string secondaryEmail, string fax, string comment, Nullable<long> currentModificationBy, ObjectParameter providerID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var providerCodeParameter = providerCode != null ?
                new ObjectParameter("ProviderCode", providerCode) :
                new ObjectParameter("ProviderCode", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var credentialIDParameter = credentialID.HasValue ?
                new ObjectParameter("CredentialID", credentialID) :
                new ObjectParameter("CredentialID", typeof(byte));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var isTaxIDPrimaryOptionParameter = isTaxIDPrimaryOption.HasValue ?
                new ObjectParameter("IsTaxIDPrimaryOption", isTaxIDPrimaryOption) :
                new ObjectParameter("IsTaxIDPrimaryOption", typeof(bool));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(byte));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var isSignedFileParameter = isSignedFile.HasValue ?
                new ObjectParameter("IsSignedFile", isSignedFile) :
                new ObjectParameter("IsSignedFile", typeof(bool));
    
            var signedDateParameter = signedDate.HasValue ?
                new ObjectParameter("SignedDate", signedDate) :
                new ObjectParameter("SignedDate", typeof(System.DateTime));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var cLIANumberParameter = cLIANumber != null ?
                new ObjectParameter("CLIANumber", cLIANumber) :
                new ObjectParameter("CLIANumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Provider", clinicIDParameter, providerCodeParameter, lastNameParameter, middleNameParameter, firstNameParameter, credentialIDParameter, nPIParameter, taxIDParameter, sSNParameter, isTaxIDPrimaryOptionParameter, specialtyIDParameter, photoRelPathParameter, isSignedFileParameter, signedDateParameter, licenseNumberParameter, cLIANumberParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, secondaryPhoneNumberParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, currentModificationByParameter, providerID);
        }
    
        public virtual int usp_Insert_Specialty(string specialtyCode, string specialtyName, string comment, Nullable<long> currentModificationBy, ObjectParameter specialtyID)
        {
            var specialtyCodeParameter = specialtyCode != null ?
                new ObjectParameter("SpecialtyCode", specialtyCode) :
                new ObjectParameter("SpecialtyCode", typeof(string));
    
            var specialtyNameParameter = specialtyName != null ?
                new ObjectParameter("SpecialtyName", specialtyName) :
                new ObjectParameter("SpecialtyName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Specialty", specialtyCodeParameter, specialtyNameParameter, commentParameter, currentModificationByParameter, specialtyID);
        }
    
        public virtual int usp_IsExists_Clinic(Nullable<int> iPAID, string clinicCode, string clinicName, string nPI, string taxID, Nullable<byte> entityTypeQualifierID, Nullable<byte> specialtyID, Nullable<byte> iCDFormat, string logoRelPath, Nullable<bool> isPatientDemographicsPull, Nullable<bool> isPatVisitDocManadatory, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, Nullable<byte> patientVisitComplexity, string comment, ObjectParameter clinicID)
        {
            var iPAIDParameter = iPAID.HasValue ?
                new ObjectParameter("IPAID", iPAID) :
                new ObjectParameter("IPAID", typeof(int));
    
            var clinicCodeParameter = clinicCode != null ?
                new ObjectParameter("ClinicCode", clinicCode) :
                new ObjectParameter("ClinicCode", typeof(string));
    
            var clinicNameParameter = clinicName != null ?
                new ObjectParameter("ClinicName", clinicName) :
                new ObjectParameter("ClinicName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(byte));
    
            var iCDFormatParameter = iCDFormat.HasValue ?
                new ObjectParameter("ICDFormat", iCDFormat) :
                new ObjectParameter("ICDFormat", typeof(byte));
    
            var logoRelPathParameter = logoRelPath != null ?
                new ObjectParameter("LogoRelPath", logoRelPath) :
                new ObjectParameter("LogoRelPath", typeof(string));
    
            var isPatientDemographicsPullParameter = isPatientDemographicsPull.HasValue ?
                new ObjectParameter("IsPatientDemographicsPull", isPatientDemographicsPull) :
                new ObjectParameter("IsPatientDemographicsPull", typeof(bool));
    
            var isPatVisitDocManadatoryParameter = isPatVisitDocManadatory.HasValue ?
                new ObjectParameter("IsPatVisitDocManadatory", isPatVisitDocManadatory) :
                new ObjectParameter("IsPatVisitDocManadatory", typeof(bool));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var patientVisitComplexityParameter = patientVisitComplexity.HasValue ?
                new ObjectParameter("PatientVisitComplexity", patientVisitComplexity) :
                new ObjectParameter("PatientVisitComplexity", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Clinic", iPAIDParameter, clinicCodeParameter, clinicNameParameter, nPIParameter, taxIDParameter, entityTypeQualifierIDParameter, specialtyIDParameter, iCDFormatParameter, logoRelPathParameter, isPatientDemographicsPullParameter, isPatVisitDocManadatoryParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, patientVisitComplexityParameter, commentParameter, clinicID);
        }
    
        public virtual int usp_IsExists_Credential(string credentialCode, string credentialName, string comment, ObjectParameter credentialID)
        {
            var credentialCodeParameter = credentialCode != null ?
                new ObjectParameter("CredentialCode", credentialCode) :
                new ObjectParameter("CredentialCode", typeof(string));
    
            var credentialNameParameter = credentialName != null ?
                new ObjectParameter("CredentialName", credentialName) :
                new ObjectParameter("CredentialName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Credential", credentialCodeParameter, credentialNameParameter, commentParameter, credentialID);
        }
    
        public virtual int usp_IsExists_FacilityDone(string facilityDoneCode, string facilityDoneName, string nPI, string taxID, Nullable<byte> facilityTypeID, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, string comment, ObjectParameter facilityDoneID)
        {
            var facilityDoneCodeParameter = facilityDoneCode != null ?
                new ObjectParameter("FacilityDoneCode", facilityDoneCode) :
                new ObjectParameter("FacilityDoneCode", typeof(string));
    
            var facilityDoneNameParameter = facilityDoneName != null ?
                new ObjectParameter("FacilityDoneName", facilityDoneName) :
                new ObjectParameter("FacilityDoneName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_FacilityDone", facilityDoneCodeParameter, facilityDoneNameParameter, nPIParameter, taxIDParameter, facilityTypeIDParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, commentParameter, facilityDoneID);
        }
    
        public virtual int usp_IsExists_FacilityType(string facilityTypeCode, string facilityTypeName, string comment, ObjectParameter facilityTypeID)
        {
            var facilityTypeCodeParameter = facilityTypeCode != null ?
                new ObjectParameter("FacilityTypeCode", facilityTypeCode) :
                new ObjectParameter("FacilityTypeCode", typeof(string));
    
            var facilityTypeNameParameter = facilityTypeName != null ?
                new ObjectParameter("FacilityTypeName", facilityTypeName) :
                new ObjectParameter("FacilityTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_FacilityType", facilityTypeCodeParameter, facilityTypeNameParameter, commentParameter, facilityTypeID);
        }
    
        public virtual int usp_IsExists_IPA(string iPACode, string iPAName, string nPI, string taxID, Nullable<byte> entityTypeQualifierID, string logoRelPath, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, string comment, ObjectParameter iPAID)
        {
            var iPACodeParameter = iPACode != null ?
                new ObjectParameter("IPACode", iPACode) :
                new ObjectParameter("IPACode", typeof(string));
    
            var iPANameParameter = iPAName != null ?
                new ObjectParameter("IPAName", iPAName) :
                new ObjectParameter("IPAName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var logoRelPathParameter = logoRelPath != null ?
                new ObjectParameter("LogoRelPath", logoRelPath) :
                new ObjectParameter("LogoRelPath", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_IPA", iPACodeParameter, iPANameParameter, nPIParameter, taxIDParameter, entityTypeQualifierIDParameter, logoRelPathParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, commentParameter, iPAID);
        }
    
        public virtual int usp_IsExists_Provider(Nullable<int> clinicID, string providerCode, string lastName, string middleName, string firstName, Nullable<byte> credentialID, string nPI, string taxID, string sSN, Nullable<bool> isTaxIDPrimaryOption, Nullable<byte> specialtyID, string photoRelPath, Nullable<bool> isSignedFile, Nullable<System.DateTime> signedDate, string licenseNumber, string cLIANumber, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, string secondaryPhoneNumber, string email, string secondaryEmail, string fax, string comment, ObjectParameter providerID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var providerCodeParameter = providerCode != null ?
                new ObjectParameter("ProviderCode", providerCode) :
                new ObjectParameter("ProviderCode", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var credentialIDParameter = credentialID.HasValue ?
                new ObjectParameter("CredentialID", credentialID) :
                new ObjectParameter("CredentialID", typeof(byte));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var isTaxIDPrimaryOptionParameter = isTaxIDPrimaryOption.HasValue ?
                new ObjectParameter("IsTaxIDPrimaryOption", isTaxIDPrimaryOption) :
                new ObjectParameter("IsTaxIDPrimaryOption", typeof(bool));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(byte));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var isSignedFileParameter = isSignedFile.HasValue ?
                new ObjectParameter("IsSignedFile", isSignedFile) :
                new ObjectParameter("IsSignedFile", typeof(bool));
    
            var signedDateParameter = signedDate.HasValue ?
                new ObjectParameter("SignedDate", signedDate) :
                new ObjectParameter("SignedDate", typeof(System.DateTime));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var cLIANumberParameter = cLIANumber != null ?
                new ObjectParameter("CLIANumber", cLIANumber) :
                new ObjectParameter("CLIANumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Provider", clinicIDParameter, providerCodeParameter, lastNameParameter, middleNameParameter, firstNameParameter, credentialIDParameter, nPIParameter, taxIDParameter, sSNParameter, isTaxIDPrimaryOptionParameter, specialtyIDParameter, photoRelPathParameter, isSignedFileParameter, signedDateParameter, licenseNumberParameter, cLIANumberParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, secondaryPhoneNumberParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, providerID);
        }
    
        public virtual int usp_IsExists_Specialty(string specialtyCode, string specialtyName, string comment, ObjectParameter specialtyID)
        {
            var specialtyCodeParameter = specialtyCode != null ?
                new ObjectParameter("SpecialtyCode", specialtyCode) :
                new ObjectParameter("SpecialtyCode", typeof(string));
    
            var specialtyNameParameter = specialtyName != null ?
                new ObjectParameter("SpecialtyName", specialtyName) :
                new ObjectParameter("SpecialtyName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Specialty", specialtyCodeParameter, specialtyNameParameter, commentParameter, specialtyID);
        }
    
        public virtual int usp_Update_Clinic(Nullable<int> iPAID, string clinicCode, string clinicName, string nPI, string taxID, Nullable<byte> entityTypeQualifierID, Nullable<byte> specialtyID, Nullable<byte> iCDFormat, string logoRelPath, Nullable<bool> isPatientDemographicsPull, Nullable<bool> isPatVisitDocManadatory, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, Nullable<byte> patientVisitComplexity, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter clinicID)
        {
            var iPAIDParameter = iPAID.HasValue ?
                new ObjectParameter("IPAID", iPAID) :
                new ObjectParameter("IPAID", typeof(int));
    
            var clinicCodeParameter = clinicCode != null ?
                new ObjectParameter("ClinicCode", clinicCode) :
                new ObjectParameter("ClinicCode", typeof(string));
    
            var clinicNameParameter = clinicName != null ?
                new ObjectParameter("ClinicName", clinicName) :
                new ObjectParameter("ClinicName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(byte));
    
            var iCDFormatParameter = iCDFormat.HasValue ?
                new ObjectParameter("ICDFormat", iCDFormat) :
                new ObjectParameter("ICDFormat", typeof(byte));
    
            var logoRelPathParameter = logoRelPath != null ?
                new ObjectParameter("LogoRelPath", logoRelPath) :
                new ObjectParameter("LogoRelPath", typeof(string));
    
            var isPatientDemographicsPullParameter = isPatientDemographicsPull.HasValue ?
                new ObjectParameter("IsPatientDemographicsPull", isPatientDemographicsPull) :
                new ObjectParameter("IsPatientDemographicsPull", typeof(bool));
    
            var isPatVisitDocManadatoryParameter = isPatVisitDocManadatory.HasValue ?
                new ObjectParameter("IsPatVisitDocManadatory", isPatVisitDocManadatory) :
                new ObjectParameter("IsPatVisitDocManadatory", typeof(bool));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var patientVisitComplexityParameter = patientVisitComplexity.HasValue ?
                new ObjectParameter("PatientVisitComplexity", patientVisitComplexity) :
                new ObjectParameter("PatientVisitComplexity", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Clinic", iPAIDParameter, clinicCodeParameter, clinicNameParameter, nPIParameter, taxIDParameter, entityTypeQualifierIDParameter, specialtyIDParameter, iCDFormatParameter, logoRelPathParameter, isPatientDemographicsPullParameter, isPatVisitDocManadatoryParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, patientVisitComplexityParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, clinicID);
        }
    
        public virtual int usp_Update_Credential(string credentialCode, string credentialName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter credentialID)
        {
            var credentialCodeParameter = credentialCode != null ?
                new ObjectParameter("CredentialCode", credentialCode) :
                new ObjectParameter("CredentialCode", typeof(string));
    
            var credentialNameParameter = credentialName != null ?
                new ObjectParameter("CredentialName", credentialName) :
                new ObjectParameter("CredentialName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Credential", credentialCodeParameter, credentialNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, credentialID);
        }
    
        public virtual int usp_Update_FacilityDone(string facilityDoneCode, string facilityDoneName, string nPI, string taxID, Nullable<byte> facilityTypeID, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter facilityDoneID)
        {
            var facilityDoneCodeParameter = facilityDoneCode != null ?
                new ObjectParameter("FacilityDoneCode", facilityDoneCode) :
                new ObjectParameter("FacilityDoneCode", typeof(string));
    
            var facilityDoneNameParameter = facilityDoneName != null ?
                new ObjectParameter("FacilityDoneName", facilityDoneName) :
                new ObjectParameter("FacilityDoneName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_FacilityDone", facilityDoneCodeParameter, facilityDoneNameParameter, nPIParameter, taxIDParameter, facilityTypeIDParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, facilityDoneID);
        }
    
        public virtual int usp_Update_FacilityType(string facilityTypeCode, string facilityTypeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter facilityTypeID)
        {
            var facilityTypeCodeParameter = facilityTypeCode != null ?
                new ObjectParameter("FacilityTypeCode", facilityTypeCode) :
                new ObjectParameter("FacilityTypeCode", typeof(string));
    
            var facilityTypeNameParameter = facilityTypeName != null ?
                new ObjectParameter("FacilityTypeName", facilityTypeName) :
                new ObjectParameter("FacilityTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_FacilityType", facilityTypeCodeParameter, facilityTypeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, facilityTypeID);
        }
    
        public virtual int usp_Update_IPA(string iPACode, string iPAName, string nPI, string taxID, Nullable<byte> entityTypeQualifierID, string logoRelPath, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string contactPersonLastName, string contactPersonMiddleName, string contactPersonFirstName, string contactPersonPhoneNumber, Nullable<int> contactPersonPhoneNumberExtn, string contactPersonSecondaryPhoneNumber, Nullable<int> contactPersonSecondaryPhoneNumberExtn, string contactPersonEmail, string contactPersonSecondaryEmail, string contactPersonFax, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter iPAID)
        {
            var iPACodeParameter = iPACode != null ?
                new ObjectParameter("IPACode", iPACode) :
                new ObjectParameter("IPACode", typeof(string));
    
            var iPANameParameter = iPAName != null ?
                new ObjectParameter("IPAName", iPAName) :
                new ObjectParameter("IPAName", typeof(string));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var logoRelPathParameter = logoRelPath != null ?
                new ObjectParameter("LogoRelPath", logoRelPath) :
                new ObjectParameter("LogoRelPath", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var contactPersonLastNameParameter = contactPersonLastName != null ?
                new ObjectParameter("ContactPersonLastName", contactPersonLastName) :
                new ObjectParameter("ContactPersonLastName", typeof(string));
    
            var contactPersonMiddleNameParameter = contactPersonMiddleName != null ?
                new ObjectParameter("ContactPersonMiddleName", contactPersonMiddleName) :
                new ObjectParameter("ContactPersonMiddleName", typeof(string));
    
            var contactPersonFirstNameParameter = contactPersonFirstName != null ?
                new ObjectParameter("ContactPersonFirstName", contactPersonFirstName) :
                new ObjectParameter("ContactPersonFirstName", typeof(string));
    
            var contactPersonPhoneNumberParameter = contactPersonPhoneNumber != null ?
                new ObjectParameter("ContactPersonPhoneNumber", contactPersonPhoneNumber) :
                new ObjectParameter("ContactPersonPhoneNumber", typeof(string));
    
            var contactPersonPhoneNumberExtnParameter = contactPersonPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonPhoneNumberExtn", contactPersonPhoneNumberExtn) :
                new ObjectParameter("ContactPersonPhoneNumberExtn", typeof(int));
    
            var contactPersonSecondaryPhoneNumberParameter = contactPersonSecondaryPhoneNumber != null ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", contactPersonSecondaryPhoneNumber) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumber", typeof(string));
    
            var contactPersonSecondaryPhoneNumberExtnParameter = contactPersonSecondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", contactPersonSecondaryPhoneNumberExtn) :
                new ObjectParameter("ContactPersonSecondaryPhoneNumberExtn", typeof(int));
    
            var contactPersonEmailParameter = contactPersonEmail != null ?
                new ObjectParameter("ContactPersonEmail", contactPersonEmail) :
                new ObjectParameter("ContactPersonEmail", typeof(string));
    
            var contactPersonSecondaryEmailParameter = contactPersonSecondaryEmail != null ?
                new ObjectParameter("ContactPersonSecondaryEmail", contactPersonSecondaryEmail) :
                new ObjectParameter("ContactPersonSecondaryEmail", typeof(string));
    
            var contactPersonFaxParameter = contactPersonFax != null ?
                new ObjectParameter("ContactPersonFax", contactPersonFax) :
                new ObjectParameter("ContactPersonFax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_IPA", iPACodeParameter, iPANameParameter, nPIParameter, taxIDParameter, entityTypeQualifierIDParameter, logoRelPathParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, contactPersonLastNameParameter, contactPersonMiddleNameParameter, contactPersonFirstNameParameter, contactPersonPhoneNumberParameter, contactPersonPhoneNumberExtnParameter, contactPersonSecondaryPhoneNumberParameter, contactPersonSecondaryPhoneNumberExtnParameter, contactPersonEmailParameter, contactPersonSecondaryEmailParameter, contactPersonFaxParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, iPAID);
        }
    
        public virtual int usp_Update_Provider(Nullable<int> clinicID, string providerCode, string lastName, string middleName, string firstName, Nullable<byte> credentialID, string nPI, string taxID, string sSN, Nullable<bool> isTaxIDPrimaryOption, Nullable<byte> specialtyID, string photoRelPath, Nullable<bool> isSignedFile, Nullable<System.DateTime> signedDate, string licenseNumber, string cLIANumber, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, string secondaryPhoneNumber, string email, string secondaryEmail, string fax, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter providerID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var providerCodeParameter = providerCode != null ?
                new ObjectParameter("ProviderCode", providerCode) :
                new ObjectParameter("ProviderCode", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var credentialIDParameter = credentialID.HasValue ?
                new ObjectParameter("CredentialID", credentialID) :
                new ObjectParameter("CredentialID", typeof(byte));
    
            var nPIParameter = nPI != null ?
                new ObjectParameter("NPI", nPI) :
                new ObjectParameter("NPI", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var isTaxIDPrimaryOptionParameter = isTaxIDPrimaryOption.HasValue ?
                new ObjectParameter("IsTaxIDPrimaryOption", isTaxIDPrimaryOption) :
                new ObjectParameter("IsTaxIDPrimaryOption", typeof(bool));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(byte));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var isSignedFileParameter = isSignedFile.HasValue ?
                new ObjectParameter("IsSignedFile", isSignedFile) :
                new ObjectParameter("IsSignedFile", typeof(bool));
    
            var signedDateParameter = signedDate.HasValue ?
                new ObjectParameter("SignedDate", signedDate) :
                new ObjectParameter("SignedDate", typeof(System.DateTime));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var cLIANumberParameter = cLIANumber != null ?
                new ObjectParameter("CLIANumber", cLIANumber) :
                new ObjectParameter("CLIANumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Provider", clinicIDParameter, providerCodeParameter, lastNameParameter, middleNameParameter, firstNameParameter, credentialIDParameter, nPIParameter, taxIDParameter, sSNParameter, isTaxIDPrimaryOptionParameter, specialtyIDParameter, photoRelPathParameter, isSignedFileParameter, signedDateParameter, licenseNumberParameter, cLIANumberParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, secondaryPhoneNumberParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, providerID);
        }
    
        public virtual int usp_Update_Specialty(string specialtyCode, string specialtyName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter specialtyID)
        {
            var specialtyCodeParameter = specialtyCode != null ?
                new ObjectParameter("SpecialtyCode", specialtyCode) :
                new ObjectParameter("SpecialtyCode", typeof(string));
    
            var specialtyNameParameter = specialtyName != null ?
                new ObjectParameter("SpecialtyName", specialtyName) :
                new ObjectParameter("SpecialtyName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Specialty", specialtyCodeParameter, specialtyNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, specialtyID);
        }
    
        public virtual ObjectResult<usp_GetAnsi837Clinic_ClaimProcess_Result> usp_GetAnsi837Clinic_ClaimProcess(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAnsi837Clinic_ClaimProcess_Result>("usp_GetAnsi837Clinic_ClaimProcess", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAnsi837EDIReceiver_ClaimProcess_Result> usp_GetAnsi837EDIReceiver_ClaimProcess(Nullable<int> eDIReceiverID)
        {
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAnsi837EDIReceiver_ClaimProcess_Result>("usp_GetAnsi837EDIReceiver_ClaimProcess", eDIReceiverIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAnsi837FacilityDone_ClaimProcess_Result> usp_GetAnsi837FacilityDone_ClaimProcess(Nullable<int> facilityDoneID)
        {
            var facilityDoneIDParameter = facilityDoneID.HasValue ?
                new ObjectParameter("FacilityDoneID", facilityDoneID) :
                new ObjectParameter("FacilityDoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAnsi837FacilityDone_ClaimProcess_Result>("usp_GetAnsi837FacilityDone_ClaimProcess", facilityDoneIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAnsi837Hosp_ClaimProcess_Result> usp_GetAnsi837Hosp_ClaimProcess(Nullable<long> patientHospitalizationID)
        {
            var patientHospitalizationIDParameter = patientHospitalizationID.HasValue ?
                new ObjectParameter("PatientHospitalizationID", patientHospitalizationID) :
                new ObjectParameter("PatientHospitalizationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAnsi837Hosp_ClaimProcess_Result>("usp_GetAnsi837Hosp_ClaimProcess", patientHospitalizationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT(Nullable<long> patientVisitID, Nullable<long> claimNumber)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var claimNumberParameter = claimNumber.HasValue ?
                new ObjectParameter("ClaimNumber", claimNumber) :
                new ObjectParameter("ClaimNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT", patientVisitIDParameter, claimNumberParameter);
        }
    
        public virtual ObjectResult<usp_GetAnsi837Visit_ClaimDiagnosisCPT_Result> usp_GetAnsi837Visit_ClaimDiagnosisCPT(Nullable<long> patientVisitID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAnsi837Visit_ClaimDiagnosisCPT_Result>("usp_GetAnsi837Visit_ClaimDiagnosisCPT", patientVisitIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAnsi837Visit_ClaimProcess_Result> usp_GetAnsi837Visit_ClaimProcess(Nullable<int> clinicID, Nullable<int> eDIReceiverID, string statusIDs)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAnsi837Visit_ClaimProcess_Result>("usp_GetAnsi837Visit_ClaimProcess", clinicIDParameter, eDIReceiverIDParameter, statusIDsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_ClaimDiagnosis_Result> usp_GetAutoComplete_ClaimDiagnosis(Nullable<long> patientVisitID, string descType, string stats)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_ClaimDiagnosis_Result>("usp_GetAutoComplete_ClaimDiagnosis", patientVisitIDParameter, descTypeParameter, statsParameter);
        }
    
        public virtual ObjectResult<usp_GetBlockedCpt_ClaimDiagnosisCPT_Result> usp_GetBlockedCpt_ClaimDiagnosisCPT(Nullable<long> patientVisitID, Nullable<bool> isActive, string descType)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBlockedCpt_ClaimDiagnosisCPT_Result>("usp_GetBlockedCpt_ClaimDiagnosisCPT", patientVisitIDParameter, isActiveParameter, descTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_ClaimProcess_Result> usp_GetByAZ_ClaimProcess(Nullable<int> clinicID, string statusIDs, Nullable<int> assignedTo, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_ClaimProcess_Result>("usp_GetByAZ_ClaimProcess", clinicIDParameter, statusIDsParameter, assignedToParameter, searchNameParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZCaseReopen_ClaimProcess_Result> usp_GetByAZCaseReopen_ClaimProcess(Nullable<int> clinicID, Nullable<int> assignedTo, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZCaseReopen_ClaimProcess_Result>("usp_GetByAZCaseReopen_ClaimProcess", clinicIDParameter, assignedToParameter, searchNameParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier_Result> usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier(Nullable<long> claimDiagnosisCPTID, Nullable<bool> isActive)
        {
            var claimDiagnosisCPTIDParameter = claimDiagnosisCPTID.HasValue ?
                new ObjectParameter("ClaimDiagnosisCPTID", claimDiagnosisCPTID) :
                new ObjectParameter("ClaimDiagnosisCPTID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier_Result>("usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier", claimDiagnosisCPTIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByID_ClaimProcessEDIFile_Result> usp_GetByID_ClaimProcessEDIFile(Nullable<int> eDIFileID, Nullable<int> clinicID, Nullable<int> userID)
        {
            var eDIFileIDParameter = eDIFileID.HasValue ?
                new ObjectParameter("EDIFileID", eDIFileID) :
                new ObjectParameter("EDIFileID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByID_ClaimProcessEDIFile_Result>("usp_GetByID_ClaimProcessEDIFile", eDIFileIDParameter, clinicIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatientVisit_ClaimDiagnosis_Result> usp_GetByPatientVisit_ClaimDiagnosis(Nullable<long> patientVisitID, string descType)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatientVisit_ClaimDiagnosis_Result>("usp_GetByPatientVisit_ClaimDiagnosis", patientVisitIDParameter, descTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatientVisit_ClaimDiagnosisCPT_Result> usp_GetByPatientVisit_ClaimDiagnosisCPT(Nullable<long> patientVisitID, string descType)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatientVisit_ClaimDiagnosisCPT_Result>("usp_GetByPatientVisit_ClaimDiagnosisCPT", patientVisitIDParameter, descTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatientVisitID_ClaimProcess_Result> usp_GetByPatientVisitID_ClaimProcess(Nullable<long> patientVisitID, string sysGenKy)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var sysGenKyParameter = sysGenKy != null ?
                new ObjectParameter("SysGenKy", sysGenKy) :
                new ObjectParameter("SysGenKy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatientVisitID_ClaimProcess_Result>("usp_GetByPatientVisitID_ClaimProcess", patientVisitIDParameter, sysGenKyParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatVisitDx_ClaimDiagnosisCPT_Result> usp_GetByPatVisitDx_ClaimDiagnosisCPT(Nullable<long> patientVisitID, string descType)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatVisitDx_ClaimDiagnosisCPT_Result>("usp_GetByPatVisitDx_ClaimDiagnosisCPT", patientVisitIDParameter, descTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ClaimDiagnosis_Result> usp_GetByPkId_ClaimDiagnosis(Nullable<long> claimDiagnosisID, Nullable<bool> isActive)
        {
            var claimDiagnosisIDParameter = claimDiagnosisID.HasValue ?
                new ObjectParameter("ClaimDiagnosisID", claimDiagnosisID) :
                new ObjectParameter("ClaimDiagnosisID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ClaimDiagnosis_Result>("usp_GetByPkId_ClaimDiagnosis", claimDiagnosisIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ClaimDiagnosisCPT_Result> usp_GetByPkId_ClaimDiagnosisCPT(Nullable<long> claimDiagnosisCPTID, Nullable<bool> isActive)
        {
            var claimDiagnosisCPTIDParameter = claimDiagnosisCPTID.HasValue ?
                new ObjectParameter("ClaimDiagnosisCPTID", claimDiagnosisCPTID) :
                new ObjectParameter("ClaimDiagnosisCPTID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ClaimDiagnosisCPT_Result>("usp_GetByPkId_ClaimDiagnosisCPT", claimDiagnosisCPTIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ClaimDiagnosisCPTModifier_Result> usp_GetByPkId_ClaimDiagnosisCPTModifier(Nullable<long> claimDiagnosisCPTModifierID, Nullable<bool> isActive)
        {
            var claimDiagnosisCPTModifierIDParameter = claimDiagnosisCPTModifierID.HasValue ?
                new ObjectParameter("ClaimDiagnosisCPTModifierID", claimDiagnosisCPTModifierID) :
                new ObjectParameter("ClaimDiagnosisCPTModifierID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ClaimDiagnosisCPTModifier_Result>("usp_GetByPkId_ClaimDiagnosisCPTModifier", claimDiagnosisCPTModifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ClaimProcess_Result> usp_GetByPkId_ClaimProcess(Nullable<long> claimProcessID, Nullable<bool> isActive)
        {
            var claimProcessIDParameter = claimProcessID.HasValue ?
                new ObjectParameter("ClaimProcessID", claimProcessID) :
                new ObjectParameter("ClaimProcessID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ClaimProcess_Result>("usp_GetByPkId_ClaimProcess", claimProcessIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ClaimProcessEDIFile_Result> usp_GetByPkId_ClaimProcessEDIFile(Nullable<long> claimProcessEDIFileID, Nullable<bool> isActive)
        {
            var claimProcessEDIFileIDParameter = claimProcessEDIFileID.HasValue ?
                new ObjectParameter("ClaimProcessEDIFileID", claimProcessEDIFileID) :
                new ObjectParameter("ClaimProcessEDIFileID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ClaimProcessEDIFile_Result>("usp_GetByPkId_ClaimProcessEDIFile", claimProcessEDIFileIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_ClaimProcess_Result> usp_GetBySearch_ClaimProcess(Nullable<int> clinicID, string statusIDs, Nullable<int> assignedTo, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_ClaimProcess_Result>("usp_GetBySearch_ClaimProcess", clinicIDParameter, statusIDsParameter, assignedToParameter, searchNameParameter, dateFromParameter, dateToParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearchCaseReopen_ClaimProcess_Result> usp_GetBySearchCaseReopen_ClaimProcess(Nullable<int> clinicID, Nullable<int> assignedTo, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearchCaseReopen_ClaimProcess_Result>("usp_GetBySearchCaseReopen_ClaimProcess", clinicIDParameter, assignedToParameter, searchNameParameter, dateFromParameter, dateToParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetCommentByID_ClaimProcess_Result> usp_GetCommentByID_ClaimProcess(Nullable<long> patientVisitID, Nullable<bool> isActive)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCommentByID_ClaimProcess_Result>("usp_GetCommentByID_ClaimProcess", patientVisitIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetDiagnosis_ClaimDiagnosis_Result> usp_GetDiagnosis_ClaimDiagnosis(Nullable<long> patientVisitID, Nullable<bool> isActive)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDiagnosis_ClaimDiagnosis_Result>("usp_GetDiagnosis_ClaimDiagnosis", patientVisitIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_ClaimDiagnosis_Result> usp_GetIDAutoComplete_ClaimDiagnosis(string diagnosisID, Nullable<long> patientVisitID)
        {
            var diagnosisIDParameter = diagnosisID != null ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(string));
    
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_ClaimDiagnosis_Result>("usp_GetIDAutoComplete_ClaimDiagnosis", diagnosisIDParameter, patientVisitIDParameter);
        }
    
        public virtual ObjectResult<usp_GetMaxClaimNumber_ClaimDiagnosis_Result> usp_GetMaxClaimNumber_ClaimDiagnosis()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMaxClaimNumber_ClaimDiagnosis_Result>("usp_GetMaxClaimNumber_ClaimDiagnosis");
        }
    
        public virtual ObjectResult<Nullable<long>> usp_GetMaxID_ClaimProcess(Nullable<long> patientVisitID, Nullable<byte> claimStatusID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var claimStatusIDParameter = claimStatusID.HasValue ?
                new ObjectParameter("ClaimStatusID", claimStatusID) :
                new ObjectParameter("ClaimStatusID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("usp_GetMaxID_ClaimProcess", patientVisitIDParameter, claimStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_ClaimDiagnosis_Result> usp_GetNameByID_ClaimDiagnosis(Nullable<long> patientVisitID, Nullable<bool> isActive, string descType)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_ClaimDiagnosis_Result>("usp_GetNameByID_ClaimDiagnosis", patientVisitIDParameter, isActiveParameter, descTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetPkId_ClaimDiagnosis_Result> usp_GetPkId_ClaimDiagnosis(Nullable<long> patientVisitID, Nullable<int> diagnosisID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPkId_ClaimDiagnosis_Result>("usp_GetPkId_ClaimDiagnosis", patientVisitIDParameter, diagnosisIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPrimeDxProc_ClaimDiagnosisCPT_Result> usp_GetPrimeDxProc_ClaimDiagnosisCPT(Nullable<long> claimDiagnosisID, Nullable<long> patientVisitID)
        {
            var claimDiagnosisIDParameter = claimDiagnosisID.HasValue ?
                new ObjectParameter("ClaimDiagnosisID", claimDiagnosisID) :
                new ObjectParameter("ClaimDiagnosisID", typeof(long));
    
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPrimeDxProc_ClaimDiagnosisCPT_Result>("usp_GetPrimeDxProc_ClaimDiagnosisCPT", claimDiagnosisIDParameter, patientVisitIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReportCpt_ClaimDiagnosis_Result> usp_GetReportCpt_ClaimDiagnosis(Nullable<long> claimDiagnosisId)
        {
            var claimDiagnosisIdParameter = claimDiagnosisId.HasValue ?
                new ObjectParameter("ClaimDiagnosisId", claimDiagnosisId) :
                new ObjectParameter("ClaimDiagnosisId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportCpt_ClaimDiagnosis_Result>("usp_GetReportCpt_ClaimDiagnosis", claimDiagnosisIdParameter);
        }
    
        public virtual ObjectResult<usp_GetReportModifier_ClaimDiagnosisCPT_Result> usp_GetReportModifier_ClaimDiagnosisCPT(Nullable<long> claimDiagnosisCPTId)
        {
            var claimDiagnosisCPTIdParameter = claimDiagnosisCPTId.HasValue ?
                new ObjectParameter("ClaimDiagnosisCPTId", claimDiagnosisCPTId) :
                new ObjectParameter("ClaimDiagnosisCPTId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportModifier_ClaimDiagnosisCPT_Result>("usp_GetReportModifier_ClaimDiagnosisCPT", claimDiagnosisCPTIdParameter);
        }
    
        public virtual ObjectResult<usp_GetSenthilSR_ClaimProcess_Result> usp_GetSenthilSR_ClaimProcess(string xMLdata)
        {
            var xMLdataParameter = xMLdata != null ?
                new ObjectParameter("XMLdata", xMLdata) :
                new ObjectParameter("XMLdata", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSenthilSR_ClaimProcess_Result>("usp_GetSenthilSR_ClaimProcess", xMLdataParameter);
        }
    
        public virtual int usp_GetSetStatus1EOB_ClaimProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetSetStatus1EOB_ClaimProcess");
        }
    
        public virtual int usp_GetSetStatus2EDI_ClaimProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetSetStatus2EDI_ClaimProcess");
        }
    
        public virtual int usp_GetSetStatus3QA_ClaimProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetSetStatus3QA_ClaimProcess");
        }
    
        public virtual int usp_GetSetStatus4BA_ClaimProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetSetStatus4BA_ClaimProcess");
        }
    
        public virtual int usp_Insert_ClaimDiagnosis(Nullable<long> patientVisitID, Nullable<int> diagnosisID, Nullable<long> claimNumber, string comment, Nullable<long> currentModificationBy, ObjectParameter claimDiagnosisID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var claimNumberParameter = claimNumber.HasValue ?
                new ObjectParameter("ClaimNumber", claimNumber) :
                new ObjectParameter("ClaimNumber", typeof(long));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ClaimDiagnosis", patientVisitIDParameter, diagnosisIDParameter, claimNumberParameter, commentParameter, currentModificationByParameter, claimDiagnosisID);
        }
    
        public virtual int usp_Insert_ClaimDiagnosisCPT(Nullable<long> claimDiagnosisID, Nullable<int> cPTID, Nullable<byte> facilityTypeID, Nullable<int> unit, Nullable<decimal> chargePerUnit, Nullable<System.DateTime> cPTDOS, string comment, Nullable<long> currentModificationBy, ObjectParameter claimDiagnosisCPTID)
        {
            var claimDiagnosisIDParameter = claimDiagnosisID.HasValue ?
                new ObjectParameter("ClaimDiagnosisID", claimDiagnosisID) :
                new ObjectParameter("ClaimDiagnosisID", typeof(long));
    
            var cPTIDParameter = cPTID.HasValue ?
                new ObjectParameter("CPTID", cPTID) :
                new ObjectParameter("CPTID", typeof(int));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(int));
    
            var chargePerUnitParameter = chargePerUnit.HasValue ?
                new ObjectParameter("ChargePerUnit", chargePerUnit) :
                new ObjectParameter("ChargePerUnit", typeof(decimal));
    
            var cPTDOSParameter = cPTDOS.HasValue ?
                new ObjectParameter("CPTDOS", cPTDOS) :
                new ObjectParameter("CPTDOS", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ClaimDiagnosisCPT", claimDiagnosisIDParameter, cPTIDParameter, facilityTypeIDParameter, unitParameter, chargePerUnitParameter, cPTDOSParameter, commentParameter, currentModificationByParameter, claimDiagnosisCPTID);
        }
    
        public virtual int usp_Insert_ClaimDiagnosisCPTModifier(Nullable<long> claimDiagnosisCPTID, Nullable<int> modifierID, Nullable<byte> modifierLevel, string comment, Nullable<long> currentModificationBy, ObjectParameter claimDiagnosisCPTModifierID)
        {
            var claimDiagnosisCPTIDParameter = claimDiagnosisCPTID.HasValue ?
                new ObjectParameter("ClaimDiagnosisCPTID", claimDiagnosisCPTID) :
                new ObjectParameter("ClaimDiagnosisCPTID", typeof(long));
    
            var modifierIDParameter = modifierID.HasValue ?
                new ObjectParameter("ModifierID", modifierID) :
                new ObjectParameter("ModifierID", typeof(int));
    
            var modifierLevelParameter = modifierLevel.HasValue ?
                new ObjectParameter("ModifierLevel", modifierLevel) :
                new ObjectParameter("ModifierLevel", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ClaimDiagnosisCPTModifier", claimDiagnosisCPTIDParameter, modifierIDParameter, modifierLevelParameter, commentParameter, currentModificationByParameter, claimDiagnosisCPTModifierID);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Insert_ClaimProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Insert_ClaimProcess");
        }
    
        public virtual int usp_Insert_ClaimProcessEDIFile(Nullable<long> claimProcessID, Nullable<int> eDIFileID, string comment, Nullable<long> currentModificationBy, ObjectParameter claimProcessEDIFileID)
        {
            var claimProcessIDParameter = claimProcessID.HasValue ?
                new ObjectParameter("ClaimProcessID", claimProcessID) :
                new ObjectParameter("ClaimProcessID", typeof(long));
    
            var eDIFileIDParameter = eDIFileID.HasValue ?
                new ObjectParameter("EDIFileID", eDIFileID) :
                new ObjectParameter("EDIFileID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ClaimProcessEDIFile", claimProcessIDParameter, eDIFileIDParameter, commentParameter, currentModificationByParameter, claimProcessEDIFileID);
        }
    
        public virtual int usp_IsExists_ClaimDiagnosis(Nullable<long> patientVisitID, Nullable<int> diagnosisID, Nullable<long> claimNumber, string comment, ObjectParameter claimDiagnosisID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var claimNumberParameter = claimNumber.HasValue ?
                new ObjectParameter("ClaimNumber", claimNumber) :
                new ObjectParameter("ClaimNumber", typeof(long));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ClaimDiagnosis", patientVisitIDParameter, diagnosisIDParameter, claimNumberParameter, commentParameter, claimDiagnosisID);
        }
    
        public virtual int usp_IsExists_ClaimDiagnosisCPT(Nullable<long> claimDiagnosisID, Nullable<int> cPTID, Nullable<byte> facilityTypeID, Nullable<int> unit, Nullable<decimal> chargePerUnit, Nullable<System.DateTime> cPTDOS, string comment, ObjectParameter claimDiagnosisCPTID)
        {
            var claimDiagnosisIDParameter = claimDiagnosisID.HasValue ?
                new ObjectParameter("ClaimDiagnosisID", claimDiagnosisID) :
                new ObjectParameter("ClaimDiagnosisID", typeof(long));
    
            var cPTIDParameter = cPTID.HasValue ?
                new ObjectParameter("CPTID", cPTID) :
                new ObjectParameter("CPTID", typeof(int));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(int));
    
            var chargePerUnitParameter = chargePerUnit.HasValue ?
                new ObjectParameter("ChargePerUnit", chargePerUnit) :
                new ObjectParameter("ChargePerUnit", typeof(decimal));
    
            var cPTDOSParameter = cPTDOS.HasValue ?
                new ObjectParameter("CPTDOS", cPTDOS) :
                new ObjectParameter("CPTDOS", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ClaimDiagnosisCPT", claimDiagnosisIDParameter, cPTIDParameter, facilityTypeIDParameter, unitParameter, chargePerUnitParameter, cPTDOSParameter, commentParameter, claimDiagnosisCPTID);
        }
    
        public virtual int usp_IsExists_ClaimDiagnosisCPTModifier(Nullable<long> claimDiagnosisCPTID, Nullable<int> modifierID, Nullable<byte> modifierLevel, string comment, ObjectParameter claimDiagnosisCPTModifierID)
        {
            var claimDiagnosisCPTIDParameter = claimDiagnosisCPTID.HasValue ?
                new ObjectParameter("ClaimDiagnosisCPTID", claimDiagnosisCPTID) :
                new ObjectParameter("ClaimDiagnosisCPTID", typeof(long));
    
            var modifierIDParameter = modifierID.HasValue ?
                new ObjectParameter("ModifierID", modifierID) :
                new ObjectParameter("ModifierID", typeof(int));
    
            var modifierLevelParameter = modifierLevel.HasValue ?
                new ObjectParameter("ModifierLevel", modifierLevel) :
                new ObjectParameter("ModifierLevel", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ClaimDiagnosisCPTModifier", claimDiagnosisCPTIDParameter, modifierIDParameter, modifierLevelParameter, commentParameter, claimDiagnosisCPTModifierID);
        }
    
        public virtual int usp_IsExists_ClaimProcess(Nullable<long> patientVisitID, Nullable<byte> claimStatusID, Nullable<int> assignedTo, Nullable<System.DateTime> statusStartDate, Nullable<System.DateTime> statusEndDate, Nullable<long> startEndMins, Nullable<long> logOutLogInMins, Nullable<long> lockUnLockMins, Nullable<long> durationMins, string comment, ObjectParameter claimProcessID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var claimStatusIDParameter = claimStatusID.HasValue ?
                new ObjectParameter("ClaimStatusID", claimStatusID) :
                new ObjectParameter("ClaimStatusID", typeof(byte));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var statusStartDateParameter = statusStartDate.HasValue ?
                new ObjectParameter("StatusStartDate", statusStartDate) :
                new ObjectParameter("StatusStartDate", typeof(System.DateTime));
    
            var statusEndDateParameter = statusEndDate.HasValue ?
                new ObjectParameter("StatusEndDate", statusEndDate) :
                new ObjectParameter("StatusEndDate", typeof(System.DateTime));
    
            var startEndMinsParameter = startEndMins.HasValue ?
                new ObjectParameter("StartEndMins", startEndMins) :
                new ObjectParameter("StartEndMins", typeof(long));
    
            var logOutLogInMinsParameter = logOutLogInMins.HasValue ?
                new ObjectParameter("LogOutLogInMins", logOutLogInMins) :
                new ObjectParameter("LogOutLogInMins", typeof(long));
    
            var lockUnLockMinsParameter = lockUnLockMins.HasValue ?
                new ObjectParameter("LockUnLockMins", lockUnLockMins) :
                new ObjectParameter("LockUnLockMins", typeof(long));
    
            var durationMinsParameter = durationMins.HasValue ?
                new ObjectParameter("DurationMins", durationMins) :
                new ObjectParameter("DurationMins", typeof(long));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ClaimProcess", patientVisitIDParameter, claimStatusIDParameter, assignedToParameter, statusStartDateParameter, statusEndDateParameter, startEndMinsParameter, logOutLogInMinsParameter, lockUnLockMinsParameter, durationMinsParameter, commentParameter, claimProcessID);
        }
    
        public virtual int usp_IsExists_ClaimProcessEDIFile(Nullable<long> claimProcessID, Nullable<int> eDIFileID, string comment, ObjectParameter claimProcessEDIFileID)
        {
            var claimProcessIDParameter = claimProcessID.HasValue ?
                new ObjectParameter("ClaimProcessID", claimProcessID) :
                new ObjectParameter("ClaimProcessID", typeof(long));
    
            var eDIFileIDParameter = eDIFileID.HasValue ?
                new ObjectParameter("EDIFileID", eDIFileID) :
                new ObjectParameter("EDIFileID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ClaimProcessEDIFile", claimProcessIDParameter, eDIFileIDParameter, commentParameter, claimProcessEDIFileID);
        }
    
        public virtual int usp_Update_ClaimDiagnosis(Nullable<long> patientVisitID, Nullable<int> diagnosisID, Nullable<long> claimNumber, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter claimDiagnosisID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var claimNumberParameter = claimNumber.HasValue ?
                new ObjectParameter("ClaimNumber", claimNumber) :
                new ObjectParameter("ClaimNumber", typeof(long));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ClaimDiagnosis", patientVisitIDParameter, diagnosisIDParameter, claimNumberParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, claimDiagnosisID);
        }
    
        public virtual int usp_Update_ClaimDiagnosisCPT(Nullable<long> claimDiagnosisID, Nullable<int> cPTID, Nullable<byte> facilityTypeID, Nullable<int> unit, Nullable<decimal> chargePerUnit, Nullable<System.DateTime> cPTDOS, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter claimDiagnosisCPTID)
        {
            var claimDiagnosisIDParameter = claimDiagnosisID.HasValue ?
                new ObjectParameter("ClaimDiagnosisID", claimDiagnosisID) :
                new ObjectParameter("ClaimDiagnosisID", typeof(long));
    
            var cPTIDParameter = cPTID.HasValue ?
                new ObjectParameter("CPTID", cPTID) :
                new ObjectParameter("CPTID", typeof(int));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(int));
    
            var chargePerUnitParameter = chargePerUnit.HasValue ?
                new ObjectParameter("ChargePerUnit", chargePerUnit) :
                new ObjectParameter("ChargePerUnit", typeof(decimal));
    
            var cPTDOSParameter = cPTDOS.HasValue ?
                new ObjectParameter("CPTDOS", cPTDOS) :
                new ObjectParameter("CPTDOS", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ClaimDiagnosisCPT", claimDiagnosisIDParameter, cPTIDParameter, facilityTypeIDParameter, unitParameter, chargePerUnitParameter, cPTDOSParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, claimDiagnosisCPTID);
        }
    
        public virtual int usp_Update_ClaimDiagnosisCPTModifier(Nullable<long> claimDiagnosisCPTID, Nullable<int> modifierID, Nullable<byte> modifierLevel, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter claimDiagnosisCPTModifierID)
        {
            var claimDiagnosisCPTIDParameter = claimDiagnosisCPTID.HasValue ?
                new ObjectParameter("ClaimDiagnosisCPTID", claimDiagnosisCPTID) :
                new ObjectParameter("ClaimDiagnosisCPTID", typeof(long));
    
            var modifierIDParameter = modifierID.HasValue ?
                new ObjectParameter("ModifierID", modifierID) :
                new ObjectParameter("ModifierID", typeof(int));
    
            var modifierLevelParameter = modifierLevel.HasValue ?
                new ObjectParameter("ModifierLevel", modifierLevel) :
                new ObjectParameter("ModifierLevel", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ClaimDiagnosisCPTModifier", claimDiagnosisCPTIDParameter, modifierIDParameter, modifierLevelParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, claimDiagnosisCPTModifierID);
        }
    
        public virtual int usp_Update_ClaimProcess(Nullable<long> patientVisitID, Nullable<byte> claimStatusID, Nullable<int> assignedTo, Nullable<System.DateTime> statusStartDate, Nullable<System.DateTime> statusEndDate, Nullable<long> startEndMins, Nullable<long> logOutLogInMins, Nullable<long> lockUnLockMins, Nullable<long> durationMins, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter claimProcessID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var claimStatusIDParameter = claimStatusID.HasValue ?
                new ObjectParameter("ClaimStatusID", claimStatusID) :
                new ObjectParameter("ClaimStatusID", typeof(byte));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var statusStartDateParameter = statusStartDate.HasValue ?
                new ObjectParameter("StatusStartDate", statusStartDate) :
                new ObjectParameter("StatusStartDate", typeof(System.DateTime));
    
            var statusEndDateParameter = statusEndDate.HasValue ?
                new ObjectParameter("StatusEndDate", statusEndDate) :
                new ObjectParameter("StatusEndDate", typeof(System.DateTime));
    
            var startEndMinsParameter = startEndMins.HasValue ?
                new ObjectParameter("StartEndMins", startEndMins) :
                new ObjectParameter("StartEndMins", typeof(long));
    
            var logOutLogInMinsParameter = logOutLogInMins.HasValue ?
                new ObjectParameter("LogOutLogInMins", logOutLogInMins) :
                new ObjectParameter("LogOutLogInMins", typeof(long));
    
            var lockUnLockMinsParameter = lockUnLockMins.HasValue ?
                new ObjectParameter("LockUnLockMins", lockUnLockMins) :
                new ObjectParameter("LockUnLockMins", typeof(long));
    
            var durationMinsParameter = durationMins.HasValue ?
                new ObjectParameter("DurationMins", durationMins) :
                new ObjectParameter("DurationMins", typeof(long));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ClaimProcess", patientVisitIDParameter, claimStatusIDParameter, assignedToParameter, statusStartDateParameter, statusEndDateParameter, startEndMinsParameter, logOutLogInMinsParameter, lockUnLockMinsParameter, durationMinsParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, claimProcessID);
        }
    
        public virtual int usp_Update_ClaimProcessEDIFile(Nullable<long> claimProcessID, Nullable<int> eDIFileID, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter claimProcessEDIFileID)
        {
            var claimProcessIDParameter = claimProcessID.HasValue ?
                new ObjectParameter("ClaimProcessID", claimProcessID) :
                new ObjectParameter("ClaimProcessID", typeof(long));
    
            var eDIFileIDParameter = eDIFileID.HasValue ?
                new ObjectParameter("EDIFileID", eDIFileID) :
                new ObjectParameter("EDIFileID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ClaimProcessEDIFile", claimProcessIDParameter, eDIFileIDParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, claimProcessEDIFileID);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetByField_Password(string fieldName)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetByField_Password", fieldNameParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ExcelImportExport_Result> usp_GetByPkId_ExcelImportExport(Nullable<byte> excelImportExportID, Nullable<bool> isActive)
        {
            var excelImportExportIDParameter = excelImportExportID.HasValue ?
                new ObjectParameter("ExcelImportExportID", excelImportExportID) :
                new ObjectParameter("ExcelImportExportID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ExcelImportExport_Result>("usp_GetByPkId_ExcelImportExport", excelImportExportIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_General_Result> usp_GetByPkId_General(Nullable<byte> generalID, Nullable<bool> isActive)
        {
            var generalIDParameter = generalID.HasValue ?
                new ObjectParameter("GeneralID", generalID) :
                new ObjectParameter("GeneralID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_General_Result>("usp_GetByPkId_General", generalIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Password_Result> usp_GetByPkId_Password(Nullable<byte> passwordID, Nullable<bool> isActive)
        {
            var passwordIDParameter = passwordID.HasValue ?
                new ObjectParameter("PasswordID", passwordID) :
                new ObjectParameter("PasswordID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Password_Result>("usp_GetByPkId_Password", passwordIDParameter, isActiveParameter);
        }
    
        public virtual int usp_Insert_ExcelImportExport(string excelRelPath, string tableName, Nullable<bool> isImport, string comment, Nullable<long> currentModificationBy, ObjectParameter excelImportExportID)
        {
            var excelRelPathParameter = excelRelPath != null ?
                new ObjectParameter("ExcelRelPath", excelRelPath) :
                new ObjectParameter("ExcelRelPath", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var isImportParameter = isImport.HasValue ?
                new ObjectParameter("IsImport", isImport) :
                new ObjectParameter("IsImport", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ExcelImportExport", excelRelPathParameter, tableNameParameter, isImportParameter, commentParameter, currentModificationByParameter, excelImportExportID);
        }
    
        public virtual int usp_Insert_General(string userAccEmailSubject, Nullable<byte> searchRecordPerPage, Nullable<byte> uploadMaxSizeInMB, Nullable<byte> pageLockIdleTimeInMin, Nullable<byte> sessionOutFromPageLockInMin, Nullable<byte> bACompleteFromDOSInDay, Nullable<byte> qACompleteFromDOSInDay, Nullable<byte> eDIFileSentFromDOSInDay, Nullable<byte> claimDoneFromDOSInDay, string comment, Nullable<long> currentModificationBy, ObjectParameter generalID)
        {
            var userAccEmailSubjectParameter = userAccEmailSubject != null ?
                new ObjectParameter("UserAccEmailSubject", userAccEmailSubject) :
                new ObjectParameter("UserAccEmailSubject", typeof(string));
    
            var searchRecordPerPageParameter = searchRecordPerPage.HasValue ?
                new ObjectParameter("SearchRecordPerPage", searchRecordPerPage) :
                new ObjectParameter("SearchRecordPerPage", typeof(byte));
    
            var uploadMaxSizeInMBParameter = uploadMaxSizeInMB.HasValue ?
                new ObjectParameter("UploadMaxSizeInMB", uploadMaxSizeInMB) :
                new ObjectParameter("UploadMaxSizeInMB", typeof(byte));
    
            var pageLockIdleTimeInMinParameter = pageLockIdleTimeInMin.HasValue ?
                new ObjectParameter("PageLockIdleTimeInMin", pageLockIdleTimeInMin) :
                new ObjectParameter("PageLockIdleTimeInMin", typeof(byte));
    
            var sessionOutFromPageLockInMinParameter = sessionOutFromPageLockInMin.HasValue ?
                new ObjectParameter("SessionOutFromPageLockInMin", sessionOutFromPageLockInMin) :
                new ObjectParameter("SessionOutFromPageLockInMin", typeof(byte));
    
            var bACompleteFromDOSInDayParameter = bACompleteFromDOSInDay.HasValue ?
                new ObjectParameter("BACompleteFromDOSInDay", bACompleteFromDOSInDay) :
                new ObjectParameter("BACompleteFromDOSInDay", typeof(byte));
    
            var qACompleteFromDOSInDayParameter = qACompleteFromDOSInDay.HasValue ?
                new ObjectParameter("QACompleteFromDOSInDay", qACompleteFromDOSInDay) :
                new ObjectParameter("QACompleteFromDOSInDay", typeof(byte));
    
            var eDIFileSentFromDOSInDayParameter = eDIFileSentFromDOSInDay.HasValue ?
                new ObjectParameter("EDIFileSentFromDOSInDay", eDIFileSentFromDOSInDay) :
                new ObjectParameter("EDIFileSentFromDOSInDay", typeof(byte));
    
            var claimDoneFromDOSInDayParameter = claimDoneFromDOSInDay.HasValue ?
                new ObjectParameter("ClaimDoneFromDOSInDay", claimDoneFromDOSInDay) :
                new ObjectParameter("ClaimDoneFromDOSInDay", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_General", userAccEmailSubjectParameter, searchRecordPerPageParameter, uploadMaxSizeInMBParameter, pageLockIdleTimeInMinParameter, sessionOutFromPageLockInMinParameter, bACompleteFromDOSInDayParameter, qACompleteFromDOSInDayParameter, eDIFileSentFromDOSInDayParameter, claimDoneFromDOSInDayParameter, commentParameter, currentModificationByParameter, generalID);
        }
    
        public virtual int usp_Insert_Password(Nullable<byte> minLength, Nullable<byte> maxLength, Nullable<byte> upperCaseMinCount, Nullable<byte> numberMinCount, Nullable<byte> splCharCount, Nullable<byte> expiryDayMaxCount, Nullable<byte> trialMaxCount, Nullable<byte> historyReuseStatus, Nullable<long> currentModificationBy, ObjectParameter passwordID)
        {
            var minLengthParameter = minLength.HasValue ?
                new ObjectParameter("MinLength", minLength) :
                new ObjectParameter("MinLength", typeof(byte));
    
            var maxLengthParameter = maxLength.HasValue ?
                new ObjectParameter("MaxLength", maxLength) :
                new ObjectParameter("MaxLength", typeof(byte));
    
            var upperCaseMinCountParameter = upperCaseMinCount.HasValue ?
                new ObjectParameter("UpperCaseMinCount", upperCaseMinCount) :
                new ObjectParameter("UpperCaseMinCount", typeof(byte));
    
            var numberMinCountParameter = numberMinCount.HasValue ?
                new ObjectParameter("NumberMinCount", numberMinCount) :
                new ObjectParameter("NumberMinCount", typeof(byte));
    
            var splCharCountParameter = splCharCount.HasValue ?
                new ObjectParameter("SplCharCount", splCharCount) :
                new ObjectParameter("SplCharCount", typeof(byte));
    
            var expiryDayMaxCountParameter = expiryDayMaxCount.HasValue ?
                new ObjectParameter("ExpiryDayMaxCount", expiryDayMaxCount) :
                new ObjectParameter("ExpiryDayMaxCount", typeof(byte));
    
            var trialMaxCountParameter = trialMaxCount.HasValue ?
                new ObjectParameter("TrialMaxCount", trialMaxCount) :
                new ObjectParameter("TrialMaxCount", typeof(byte));
    
            var historyReuseStatusParameter = historyReuseStatus.HasValue ?
                new ObjectParameter("HistoryReuseStatus", historyReuseStatus) :
                new ObjectParameter("HistoryReuseStatus", typeof(byte));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Password", minLengthParameter, maxLengthParameter, upperCaseMinCountParameter, numberMinCountParameter, splCharCountParameter, expiryDayMaxCountParameter, trialMaxCountParameter, historyReuseStatusParameter, currentModificationByParameter, passwordID);
        }
    
        public virtual int usp_IsExists_ExcelImportExport(string excelRelPath, string tableName, Nullable<bool> isImport, string comment, ObjectParameter excelImportExportID)
        {
            var excelRelPathParameter = excelRelPath != null ?
                new ObjectParameter("ExcelRelPath", excelRelPath) :
                new ObjectParameter("ExcelRelPath", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var isImportParameter = isImport.HasValue ?
                new ObjectParameter("IsImport", isImport) :
                new ObjectParameter("IsImport", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ExcelImportExport", excelRelPathParameter, tableNameParameter, isImportParameter, commentParameter, excelImportExportID);
        }
    
        public virtual int usp_IsExists_General(string userAccEmailSubject, Nullable<byte> searchRecordPerPage, Nullable<byte> uploadMaxSizeInMB, Nullable<byte> pageLockIdleTimeInMin, Nullable<byte> sessionOutFromPageLockInMin, Nullable<byte> bACompleteFromDOSInDay, Nullable<byte> qACompleteFromDOSInDay, Nullable<byte> eDIFileSentFromDOSInDay, Nullable<byte> claimDoneFromDOSInDay, string comment, ObjectParameter generalID)
        {
            var userAccEmailSubjectParameter = userAccEmailSubject != null ?
                new ObjectParameter("UserAccEmailSubject", userAccEmailSubject) :
                new ObjectParameter("UserAccEmailSubject", typeof(string));
    
            var searchRecordPerPageParameter = searchRecordPerPage.HasValue ?
                new ObjectParameter("SearchRecordPerPage", searchRecordPerPage) :
                new ObjectParameter("SearchRecordPerPage", typeof(byte));
    
            var uploadMaxSizeInMBParameter = uploadMaxSizeInMB.HasValue ?
                new ObjectParameter("UploadMaxSizeInMB", uploadMaxSizeInMB) :
                new ObjectParameter("UploadMaxSizeInMB", typeof(byte));
    
            var pageLockIdleTimeInMinParameter = pageLockIdleTimeInMin.HasValue ?
                new ObjectParameter("PageLockIdleTimeInMin", pageLockIdleTimeInMin) :
                new ObjectParameter("PageLockIdleTimeInMin", typeof(byte));
    
            var sessionOutFromPageLockInMinParameter = sessionOutFromPageLockInMin.HasValue ?
                new ObjectParameter("SessionOutFromPageLockInMin", sessionOutFromPageLockInMin) :
                new ObjectParameter("SessionOutFromPageLockInMin", typeof(byte));
    
            var bACompleteFromDOSInDayParameter = bACompleteFromDOSInDay.HasValue ?
                new ObjectParameter("BACompleteFromDOSInDay", bACompleteFromDOSInDay) :
                new ObjectParameter("BACompleteFromDOSInDay", typeof(byte));
    
            var qACompleteFromDOSInDayParameter = qACompleteFromDOSInDay.HasValue ?
                new ObjectParameter("QACompleteFromDOSInDay", qACompleteFromDOSInDay) :
                new ObjectParameter("QACompleteFromDOSInDay", typeof(byte));
    
            var eDIFileSentFromDOSInDayParameter = eDIFileSentFromDOSInDay.HasValue ?
                new ObjectParameter("EDIFileSentFromDOSInDay", eDIFileSentFromDOSInDay) :
                new ObjectParameter("EDIFileSentFromDOSInDay", typeof(byte));
    
            var claimDoneFromDOSInDayParameter = claimDoneFromDOSInDay.HasValue ?
                new ObjectParameter("ClaimDoneFromDOSInDay", claimDoneFromDOSInDay) :
                new ObjectParameter("ClaimDoneFromDOSInDay", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_General", userAccEmailSubjectParameter, searchRecordPerPageParameter, uploadMaxSizeInMBParameter, pageLockIdleTimeInMinParameter, sessionOutFromPageLockInMinParameter, bACompleteFromDOSInDayParameter, qACompleteFromDOSInDayParameter, eDIFileSentFromDOSInDayParameter, claimDoneFromDOSInDayParameter, commentParameter, generalID);
        }
    
        public virtual int usp_IsExists_Password(Nullable<byte> minLength, Nullable<byte> maxLength, Nullable<byte> upperCaseMinCount, Nullable<byte> numberMinCount, Nullable<byte> splCharCount, Nullable<byte> expiryDayMaxCount, Nullable<byte> trialMaxCount, Nullable<byte> historyReuseStatus, ObjectParameter passwordID)
        {
            var minLengthParameter = minLength.HasValue ?
                new ObjectParameter("MinLength", minLength) :
                new ObjectParameter("MinLength", typeof(byte));
    
            var maxLengthParameter = maxLength.HasValue ?
                new ObjectParameter("MaxLength", maxLength) :
                new ObjectParameter("MaxLength", typeof(byte));
    
            var upperCaseMinCountParameter = upperCaseMinCount.HasValue ?
                new ObjectParameter("UpperCaseMinCount", upperCaseMinCount) :
                new ObjectParameter("UpperCaseMinCount", typeof(byte));
    
            var numberMinCountParameter = numberMinCount.HasValue ?
                new ObjectParameter("NumberMinCount", numberMinCount) :
                new ObjectParameter("NumberMinCount", typeof(byte));
    
            var splCharCountParameter = splCharCount.HasValue ?
                new ObjectParameter("SplCharCount", splCharCount) :
                new ObjectParameter("SplCharCount", typeof(byte));
    
            var expiryDayMaxCountParameter = expiryDayMaxCount.HasValue ?
                new ObjectParameter("ExpiryDayMaxCount", expiryDayMaxCount) :
                new ObjectParameter("ExpiryDayMaxCount", typeof(byte));
    
            var trialMaxCountParameter = trialMaxCount.HasValue ?
                new ObjectParameter("TrialMaxCount", trialMaxCount) :
                new ObjectParameter("TrialMaxCount", typeof(byte));
    
            var historyReuseStatusParameter = historyReuseStatus.HasValue ?
                new ObjectParameter("HistoryReuseStatus", historyReuseStatus) :
                new ObjectParameter("HistoryReuseStatus", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Password", minLengthParameter, maxLengthParameter, upperCaseMinCountParameter, numberMinCountParameter, splCharCountParameter, expiryDayMaxCountParameter, trialMaxCountParameter, historyReuseStatusParameter, passwordID);
        }
    
        public virtual int usp_Update_ExcelImportExport(string excelRelPath, string tableName, Nullable<bool> isImport, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter excelImportExportID)
        {
            var excelRelPathParameter = excelRelPath != null ?
                new ObjectParameter("ExcelRelPath", excelRelPath) :
                new ObjectParameter("ExcelRelPath", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var isImportParameter = isImport.HasValue ?
                new ObjectParameter("IsImport", isImport) :
                new ObjectParameter("IsImport", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ExcelImportExport", excelRelPathParameter, tableNameParameter, isImportParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, excelImportExportID);
        }
    
        public virtual int usp_Update_General(string userAccEmailSubject, Nullable<byte> searchRecordPerPage, Nullable<byte> uploadMaxSizeInMB, Nullable<byte> pageLockIdleTimeInMin, Nullable<byte> sessionOutFromPageLockInMin, Nullable<byte> bACompleteFromDOSInDay, Nullable<byte> qACompleteFromDOSInDay, Nullable<byte> eDIFileSentFromDOSInDay, Nullable<byte> claimDoneFromDOSInDay, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter generalID)
        {
            var userAccEmailSubjectParameter = userAccEmailSubject != null ?
                new ObjectParameter("UserAccEmailSubject", userAccEmailSubject) :
                new ObjectParameter("UserAccEmailSubject", typeof(string));
    
            var searchRecordPerPageParameter = searchRecordPerPage.HasValue ?
                new ObjectParameter("SearchRecordPerPage", searchRecordPerPage) :
                new ObjectParameter("SearchRecordPerPage", typeof(byte));
    
            var uploadMaxSizeInMBParameter = uploadMaxSizeInMB.HasValue ?
                new ObjectParameter("UploadMaxSizeInMB", uploadMaxSizeInMB) :
                new ObjectParameter("UploadMaxSizeInMB", typeof(byte));
    
            var pageLockIdleTimeInMinParameter = pageLockIdleTimeInMin.HasValue ?
                new ObjectParameter("PageLockIdleTimeInMin", pageLockIdleTimeInMin) :
                new ObjectParameter("PageLockIdleTimeInMin", typeof(byte));
    
            var sessionOutFromPageLockInMinParameter = sessionOutFromPageLockInMin.HasValue ?
                new ObjectParameter("SessionOutFromPageLockInMin", sessionOutFromPageLockInMin) :
                new ObjectParameter("SessionOutFromPageLockInMin", typeof(byte));
    
            var bACompleteFromDOSInDayParameter = bACompleteFromDOSInDay.HasValue ?
                new ObjectParameter("BACompleteFromDOSInDay", bACompleteFromDOSInDay) :
                new ObjectParameter("BACompleteFromDOSInDay", typeof(byte));
    
            var qACompleteFromDOSInDayParameter = qACompleteFromDOSInDay.HasValue ?
                new ObjectParameter("QACompleteFromDOSInDay", qACompleteFromDOSInDay) :
                new ObjectParameter("QACompleteFromDOSInDay", typeof(byte));
    
            var eDIFileSentFromDOSInDayParameter = eDIFileSentFromDOSInDay.HasValue ?
                new ObjectParameter("EDIFileSentFromDOSInDay", eDIFileSentFromDOSInDay) :
                new ObjectParameter("EDIFileSentFromDOSInDay", typeof(byte));
    
            var claimDoneFromDOSInDayParameter = claimDoneFromDOSInDay.HasValue ?
                new ObjectParameter("ClaimDoneFromDOSInDay", claimDoneFromDOSInDay) :
                new ObjectParameter("ClaimDoneFromDOSInDay", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_General", userAccEmailSubjectParameter, searchRecordPerPageParameter, uploadMaxSizeInMBParameter, pageLockIdleTimeInMinParameter, sessionOutFromPageLockInMinParameter, bACompleteFromDOSInDayParameter, qACompleteFromDOSInDayParameter, eDIFileSentFromDOSInDayParameter, claimDoneFromDOSInDayParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, generalID);
        }
    
        public virtual int usp_Update_Password(Nullable<byte> minLength, Nullable<byte> maxLength, Nullable<byte> upperCaseMinCount, Nullable<byte> numberMinCount, Nullable<byte> splCharCount, Nullable<byte> expiryDayMaxCount, Nullable<byte> trialMaxCount, Nullable<byte> historyReuseStatus, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter passwordID)
        {
            var minLengthParameter = minLength.HasValue ?
                new ObjectParameter("MinLength", minLength) :
                new ObjectParameter("MinLength", typeof(byte));
    
            var maxLengthParameter = maxLength.HasValue ?
                new ObjectParameter("MaxLength", maxLength) :
                new ObjectParameter("MaxLength", typeof(byte));
    
            var upperCaseMinCountParameter = upperCaseMinCount.HasValue ?
                new ObjectParameter("UpperCaseMinCount", upperCaseMinCount) :
                new ObjectParameter("UpperCaseMinCount", typeof(byte));
    
            var numberMinCountParameter = numberMinCount.HasValue ?
                new ObjectParameter("NumberMinCount", numberMinCount) :
                new ObjectParameter("NumberMinCount", typeof(byte));
    
            var splCharCountParameter = splCharCount.HasValue ?
                new ObjectParameter("SplCharCount", splCharCount) :
                new ObjectParameter("SplCharCount", typeof(byte));
    
            var expiryDayMaxCountParameter = expiryDayMaxCount.HasValue ?
                new ObjectParameter("ExpiryDayMaxCount", expiryDayMaxCount) :
                new ObjectParameter("ExpiryDayMaxCount", typeof(byte));
    
            var trialMaxCountParameter = trialMaxCount.HasValue ?
                new ObjectParameter("TrialMaxCount", trialMaxCount) :
                new ObjectParameter("TrialMaxCount", typeof(byte));
    
            var historyReuseStatusParameter = historyReuseStatus.HasValue ?
                new ObjectParameter("HistoryReuseStatus", historyReuseStatus) :
                new ObjectParameter("HistoryReuseStatus", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Password", minLengthParameter, maxLengthParameter, upperCaseMinCountParameter, numberMinCountParameter, splCharCountParameter, expiryDayMaxCountParameter, trialMaxCountParameter, historyReuseStatusParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, passwordID);
        }
    
        public virtual ObjectResult<usp_GetAll_MvcInit_Result> usp_GetAll_MvcInit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAll_MvcInit_Result>("usp_GetAll_MvcInit");
        }
    
        public virtual ObjectResult<usp_GetNext_Identity_Result> usp_GetNext_Identity(string schemaName, string tableName)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNext_Identity_Result>("usp_GetNext_Identity", schemaNameParameter, tableNameParameter);
        }
    
        public virtual ObjectResult<usp_GetStatus_Screen_Result> usp_GetStatus_Screen(Nullable<byte> sessTimeOutMaxMin, Nullable<long> logInLogOutID)
        {
            var sessTimeOutMaxMinParameter = sessTimeOutMaxMin.HasValue ?
                new ObjectParameter("SessTimeOutMaxMin", sessTimeOutMaxMin) :
                new ObjectParameter("SessTimeOutMaxMin", typeof(byte));
    
            var logInLogOutIDParameter = logInLogOutID.HasValue ?
                new ObjectParameter("LogInLogOutID", logInLogOutID) :
                new ObjectParameter("LogInLogOutID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetStatus_Screen_Result>("usp_GetStatus_Screen", sessTimeOutMaxMinParameter, logInLogOutIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTime_Server_Result> usp_GetTime_Server()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTime_Server_Result>("usp_GetTime_Server");
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_CPT_Result> usp_GetAutoComplete_CPT(string descType, string stats)
        {
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_CPT_Result>("usp_GetAutoComplete_CPT", descTypeParameter, statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Diagnosis_Result> usp_GetAutoComplete_Diagnosis(Nullable<int> clinicID, string descType, string stats)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Diagnosis_Result>("usp_GetAutoComplete_Diagnosis", clinicIDParameter, descTypeParameter, statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_DiagnosisGroup_Result> usp_GetAutoComplete_DiagnosisGroup(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_DiagnosisGroup_Result>("usp_GetAutoComplete_DiagnosisGroup", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_IllnessIndicator_Result> usp_GetAutoComplete_IllnessIndicator(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_IllnessIndicator_Result>("usp_GetAutoComplete_IllnessIndicator", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Modifier_Result> usp_GetAutoComplete_Modifier(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Modifier_Result>("usp_GetAutoComplete_Modifier", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_CPT_Result> usp_GetByAZ_CPT(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_CPT_Result>("usp_GetByAZ_CPT", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Diagnosis_Result> usp_GetByAZ_Diagnosis(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Diagnosis_Result>("usp_GetByAZ_Diagnosis", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_DiagnosisGroup_Result> usp_GetByAZ_DiagnosisGroup(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_DiagnosisGroup_Result>("usp_GetByAZ_DiagnosisGroup", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_IllnessIndicator_Result> usp_GetByAZ_IllnessIndicator(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_IllnessIndicator_Result>("usp_GetByAZ_IllnessIndicator", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Modifier_Result> usp_GetByAZ_Modifier(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Modifier_Result>("usp_GetByAZ_Modifier", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_CPT_Result> usp_GetByPkId_CPT(Nullable<int> cPTID, Nullable<bool> isActive)
        {
            var cPTIDParameter = cPTID.HasValue ?
                new ObjectParameter("CPTID", cPTID) :
                new ObjectParameter("CPTID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_CPT_Result>("usp_GetByPkId_CPT", cPTIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Diagnosis_Result> usp_GetByPkId_Diagnosis(Nullable<int> diagnosisID, Nullable<bool> isActive)
        {
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Diagnosis_Result>("usp_GetByPkId_Diagnosis", diagnosisIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_DiagnosisGroup_Result> usp_GetByPkId_DiagnosisGroup(Nullable<int> diagnosisGroupID, Nullable<bool> isActive)
        {
            var diagnosisGroupIDParameter = diagnosisGroupID.HasValue ?
                new ObjectParameter("DiagnosisGroupID", diagnosisGroupID) :
                new ObjectParameter("DiagnosisGroupID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_DiagnosisGroup_Result>("usp_GetByPkId_DiagnosisGroup", diagnosisGroupIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_IllnessIndicator_Result> usp_GetByPkId_IllnessIndicator(Nullable<byte> illnessIndicatorID, Nullable<bool> isActive)
        {
            var illnessIndicatorIDParameter = illnessIndicatorID.HasValue ?
                new ObjectParameter("IllnessIndicatorID", illnessIndicatorID) :
                new ObjectParameter("IllnessIndicatorID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_IllnessIndicator_Result>("usp_GetByPkId_IllnessIndicator", illnessIndicatorIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Modifier_Result> usp_GetByPkId_Modifier(Nullable<int> modifierID, Nullable<bool> isActive)
        {
            var modifierIDParameter = modifierID.HasValue ?
                new ObjectParameter("ModifierID", modifierID) :
                new ObjectParameter("ModifierID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Modifier_Result>("usp_GetByPkId_Modifier", modifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_CPT_Result> usp_GetBySearch_CPT(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_CPT_Result>("usp_GetBySearch_CPT", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Diagnosis_Result> usp_GetBySearch_Diagnosis(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Diagnosis_Result>("usp_GetBySearch_Diagnosis", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_DiagnosisGroup_Result> usp_GetBySearch_DiagnosisGroup(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_DiagnosisGroup_Result>("usp_GetBySearch_DiagnosisGroup", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_IllnessIndicator_Result> usp_GetBySearch_IllnessIndicator(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_IllnessIndicator_Result>("usp_GetBySearch_IllnessIndicator", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Modifier_Result> usp_GetBySearch_Modifier(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Modifier_Result>("usp_GetBySearch_Modifier", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_CPT_Result> usp_GetIDAutoComplete_CPT(string cPTCode)
        {
            var cPTCodeParameter = cPTCode != null ?
                new ObjectParameter("CPTCode", cPTCode) :
                new ObjectParameter("CPTCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_CPT_Result>("usp_GetIDAutoComplete_CPT", cPTCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_DiagnosisGroup_Result> usp_GetIDAutoComplete_DiagnosisGroup(string diagnosisGroupCode)
        {
            var diagnosisGroupCodeParameter = diagnosisGroupCode != null ?
                new ObjectParameter("DiagnosisGroupCode", diagnosisGroupCode) :
                new ObjectParameter("DiagnosisGroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_DiagnosisGroup_Result>("usp_GetIDAutoComplete_DiagnosisGroup", diagnosisGroupCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_IllnessIndicator_Result> usp_GetIDAutoComplete_IllnessIndicator(string illnessIndicatorCode)
        {
            var illnessIndicatorCodeParameter = illnessIndicatorCode != null ?
                new ObjectParameter("IllnessIndicatorCode", illnessIndicatorCode) :
                new ObjectParameter("IllnessIndicatorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_IllnessIndicator_Result>("usp_GetIDAutoComplete_IllnessIndicator", illnessIndicatorCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Modifier_Result> usp_GetIDAutoComplete_Modifier(string modifierCode)
        {
            var modifierCodeParameter = modifierCode != null ?
                new ObjectParameter("ModifierCode", modifierCode) :
                new ObjectParameter("ModifierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Modifier_Result>("usp_GetIDAutoComplete_Modifier", modifierCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_IllnessIndicator_Result> usp_GetNameByID_IllnessIndicator(Nullable<long> illnessIndicatorID, Nullable<bool> isActive)
        {
            var illnessIndicatorIDParameter = illnessIndicatorID.HasValue ?
                new ObjectParameter("IllnessIndicatorID", illnessIndicatorID) :
                new ObjectParameter("IllnessIndicatorID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_IllnessIndicator_Result>("usp_GetNameByID_IllnessIndicator", illnessIndicatorIDParameter, isActiveParameter);
        }
    
        public virtual int usp_Insert_CPT(string cPTCode, string shortDesc, string mediumDesc, string longDesc, string customDesc, Nullable<decimal> chargePerUnit, Nullable<bool> isHCPCSCode, string comment, Nullable<long> currentModificationBy, ObjectParameter cPTID)
        {
            var cPTCodeParameter = cPTCode != null ?
                new ObjectParameter("CPTCode", cPTCode) :
                new ObjectParameter("CPTCode", typeof(string));
    
            var shortDescParameter = shortDesc != null ?
                new ObjectParameter("ShortDesc", shortDesc) :
                new ObjectParameter("ShortDesc", typeof(string));
    
            var mediumDescParameter = mediumDesc != null ?
                new ObjectParameter("MediumDesc", mediumDesc) :
                new ObjectParameter("MediumDesc", typeof(string));
    
            var longDescParameter = longDesc != null ?
                new ObjectParameter("LongDesc", longDesc) :
                new ObjectParameter("LongDesc", typeof(string));
    
            var customDescParameter = customDesc != null ?
                new ObjectParameter("CustomDesc", customDesc) :
                new ObjectParameter("CustomDesc", typeof(string));
    
            var chargePerUnitParameter = chargePerUnit.HasValue ?
                new ObjectParameter("ChargePerUnit", chargePerUnit) :
                new ObjectParameter("ChargePerUnit", typeof(decimal));
    
            var isHCPCSCodeParameter = isHCPCSCode.HasValue ?
                new ObjectParameter("IsHCPCSCode", isHCPCSCode) :
                new ObjectParameter("IsHCPCSCode", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_CPT", cPTCodeParameter, shortDescParameter, mediumDescParameter, longDescParameter, customDescParameter, chargePerUnitParameter, isHCPCSCodeParameter, commentParameter, currentModificationByParameter, cPTID);
        }
    
        public virtual int usp_Insert_Diagnosis(string diagnosisCode, Nullable<byte> iCDFormat, Nullable<int> diagnosisGroupID, string shortDesc, string mediumDesc, string longDesc, string customDesc, string comment, Nullable<long> currentModificationBy, ObjectParameter diagnosisID)
        {
            var diagnosisCodeParameter = diagnosisCode != null ?
                new ObjectParameter("DiagnosisCode", diagnosisCode) :
                new ObjectParameter("DiagnosisCode", typeof(string));
    
            var iCDFormatParameter = iCDFormat.HasValue ?
                new ObjectParameter("ICDFormat", iCDFormat) :
                new ObjectParameter("ICDFormat", typeof(byte));
    
            var diagnosisGroupIDParameter = diagnosisGroupID.HasValue ?
                new ObjectParameter("DiagnosisGroupID", diagnosisGroupID) :
                new ObjectParameter("DiagnosisGroupID", typeof(int));
    
            var shortDescParameter = shortDesc != null ?
                new ObjectParameter("ShortDesc", shortDesc) :
                new ObjectParameter("ShortDesc", typeof(string));
    
            var mediumDescParameter = mediumDesc != null ?
                new ObjectParameter("MediumDesc", mediumDesc) :
                new ObjectParameter("MediumDesc", typeof(string));
    
            var longDescParameter = longDesc != null ?
                new ObjectParameter("LongDesc", longDesc) :
                new ObjectParameter("LongDesc", typeof(string));
    
            var customDescParameter = customDesc != null ?
                new ObjectParameter("CustomDesc", customDesc) :
                new ObjectParameter("CustomDesc", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Diagnosis", diagnosisCodeParameter, iCDFormatParameter, diagnosisGroupIDParameter, shortDescParameter, mediumDescParameter, longDescParameter, customDescParameter, commentParameter, currentModificationByParameter, diagnosisID);
        }
    
        public virtual int usp_Insert_DiagnosisGroup(string diagnosisGroupCode, string diagnosisGroupDescription, Nullable<decimal> amount, string comment, Nullable<long> currentModificationBy, ObjectParameter diagnosisGroupID)
        {
            var diagnosisGroupCodeParameter = diagnosisGroupCode != null ?
                new ObjectParameter("DiagnosisGroupCode", diagnosisGroupCode) :
                new ObjectParameter("DiagnosisGroupCode", typeof(string));
    
            var diagnosisGroupDescriptionParameter = diagnosisGroupDescription != null ?
                new ObjectParameter("DiagnosisGroupDescription", diagnosisGroupDescription) :
                new ObjectParameter("DiagnosisGroupDescription", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_DiagnosisGroup", diagnosisGroupCodeParameter, diagnosisGroupDescriptionParameter, amountParameter, commentParameter, currentModificationByParameter, diagnosisGroupID);
        }
    
        public virtual int usp_Insert_IllnessIndicator(string illnessIndicatorCode, string illnessIndicatorName, string comment, Nullable<long> currentModificationBy, ObjectParameter illnessIndicatorID)
        {
            var illnessIndicatorCodeParameter = illnessIndicatorCode != null ?
                new ObjectParameter("IllnessIndicatorCode", illnessIndicatorCode) :
                new ObjectParameter("IllnessIndicatorCode", typeof(string));
    
            var illnessIndicatorNameParameter = illnessIndicatorName != null ?
                new ObjectParameter("IllnessIndicatorName", illnessIndicatorName) :
                new ObjectParameter("IllnessIndicatorName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_IllnessIndicator", illnessIndicatorCodeParameter, illnessIndicatorNameParameter, commentParameter, currentModificationByParameter, illnessIndicatorID);
        }
    
        public virtual int usp_Insert_Modifier(string modifierCode, string modifierName, string comment, Nullable<long> currentModificationBy, ObjectParameter modifierID)
        {
            var modifierCodeParameter = modifierCode != null ?
                new ObjectParameter("ModifierCode", modifierCode) :
                new ObjectParameter("ModifierCode", typeof(string));
    
            var modifierNameParameter = modifierName != null ?
                new ObjectParameter("ModifierName", modifierName) :
                new ObjectParameter("ModifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Modifier", modifierCodeParameter, modifierNameParameter, commentParameter, currentModificationByParameter, modifierID);
        }
    
        public virtual int usp_IsExists_CPT(string cPTCode, string shortDesc, string mediumDesc, string longDesc, string customDesc, Nullable<decimal> chargePerUnit, Nullable<bool> isHCPCSCode, string comment, ObjectParameter cPTID)
        {
            var cPTCodeParameter = cPTCode != null ?
                new ObjectParameter("CPTCode", cPTCode) :
                new ObjectParameter("CPTCode", typeof(string));
    
            var shortDescParameter = shortDesc != null ?
                new ObjectParameter("ShortDesc", shortDesc) :
                new ObjectParameter("ShortDesc", typeof(string));
    
            var mediumDescParameter = mediumDesc != null ?
                new ObjectParameter("MediumDesc", mediumDesc) :
                new ObjectParameter("MediumDesc", typeof(string));
    
            var longDescParameter = longDesc != null ?
                new ObjectParameter("LongDesc", longDesc) :
                new ObjectParameter("LongDesc", typeof(string));
    
            var customDescParameter = customDesc != null ?
                new ObjectParameter("CustomDesc", customDesc) :
                new ObjectParameter("CustomDesc", typeof(string));
    
            var chargePerUnitParameter = chargePerUnit.HasValue ?
                new ObjectParameter("ChargePerUnit", chargePerUnit) :
                new ObjectParameter("ChargePerUnit", typeof(decimal));
    
            var isHCPCSCodeParameter = isHCPCSCode.HasValue ?
                new ObjectParameter("IsHCPCSCode", isHCPCSCode) :
                new ObjectParameter("IsHCPCSCode", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_CPT", cPTCodeParameter, shortDescParameter, mediumDescParameter, longDescParameter, customDescParameter, chargePerUnitParameter, isHCPCSCodeParameter, commentParameter, cPTID);
        }
    
        public virtual int usp_IsExists_Diagnosis(string diagnosisCode, Nullable<byte> iCDFormat, Nullable<int> diagnosisGroupID, string shortDesc, string mediumDesc, string longDesc, string customDesc, string comment, ObjectParameter diagnosisID)
        {
            var diagnosisCodeParameter = diagnosisCode != null ?
                new ObjectParameter("DiagnosisCode", diagnosisCode) :
                new ObjectParameter("DiagnosisCode", typeof(string));
    
            var iCDFormatParameter = iCDFormat.HasValue ?
                new ObjectParameter("ICDFormat", iCDFormat) :
                new ObjectParameter("ICDFormat", typeof(byte));
    
            var diagnosisGroupIDParameter = diagnosisGroupID.HasValue ?
                new ObjectParameter("DiagnosisGroupID", diagnosisGroupID) :
                new ObjectParameter("DiagnosisGroupID", typeof(int));
    
            var shortDescParameter = shortDesc != null ?
                new ObjectParameter("ShortDesc", shortDesc) :
                new ObjectParameter("ShortDesc", typeof(string));
    
            var mediumDescParameter = mediumDesc != null ?
                new ObjectParameter("MediumDesc", mediumDesc) :
                new ObjectParameter("MediumDesc", typeof(string));
    
            var longDescParameter = longDesc != null ?
                new ObjectParameter("LongDesc", longDesc) :
                new ObjectParameter("LongDesc", typeof(string));
    
            var customDescParameter = customDesc != null ?
                new ObjectParameter("CustomDesc", customDesc) :
                new ObjectParameter("CustomDesc", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Diagnosis", diagnosisCodeParameter, iCDFormatParameter, diagnosisGroupIDParameter, shortDescParameter, mediumDescParameter, longDescParameter, customDescParameter, commentParameter, diagnosisID);
        }
    
        public virtual int usp_IsExists_DiagnosisGroup(string diagnosisGroupCode, string diagnosisGroupDescription, Nullable<decimal> amount, string comment, ObjectParameter diagnosisGroupID)
        {
            var diagnosisGroupCodeParameter = diagnosisGroupCode != null ?
                new ObjectParameter("DiagnosisGroupCode", diagnosisGroupCode) :
                new ObjectParameter("DiagnosisGroupCode", typeof(string));
    
            var diagnosisGroupDescriptionParameter = diagnosisGroupDescription != null ?
                new ObjectParameter("DiagnosisGroupDescription", diagnosisGroupDescription) :
                new ObjectParameter("DiagnosisGroupDescription", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_DiagnosisGroup", diagnosisGroupCodeParameter, diagnosisGroupDescriptionParameter, amountParameter, commentParameter, diagnosisGroupID);
        }
    
        public virtual int usp_IsExists_IllnessIndicator(string illnessIndicatorCode, string illnessIndicatorName, string comment, ObjectParameter illnessIndicatorID)
        {
            var illnessIndicatorCodeParameter = illnessIndicatorCode != null ?
                new ObjectParameter("IllnessIndicatorCode", illnessIndicatorCode) :
                new ObjectParameter("IllnessIndicatorCode", typeof(string));
    
            var illnessIndicatorNameParameter = illnessIndicatorName != null ?
                new ObjectParameter("IllnessIndicatorName", illnessIndicatorName) :
                new ObjectParameter("IllnessIndicatorName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_IllnessIndicator", illnessIndicatorCodeParameter, illnessIndicatorNameParameter, commentParameter, illnessIndicatorID);
        }
    
        public virtual int usp_IsExists_Modifier(string modifierCode, string modifierName, string comment, ObjectParameter modifierID)
        {
            var modifierCodeParameter = modifierCode != null ?
                new ObjectParameter("ModifierCode", modifierCode) :
                new ObjectParameter("ModifierCode", typeof(string));
    
            var modifierNameParameter = modifierName != null ?
                new ObjectParameter("ModifierName", modifierName) :
                new ObjectParameter("ModifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Modifier", modifierCodeParameter, modifierNameParameter, commentParameter, modifierID);
        }
    
        public virtual int usp_Update_CPT(string cPTCode, string shortDesc, string mediumDesc, string longDesc, string customDesc, Nullable<decimal> chargePerUnit, Nullable<bool> isHCPCSCode, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter cPTID)
        {
            var cPTCodeParameter = cPTCode != null ?
                new ObjectParameter("CPTCode", cPTCode) :
                new ObjectParameter("CPTCode", typeof(string));
    
            var shortDescParameter = shortDesc != null ?
                new ObjectParameter("ShortDesc", shortDesc) :
                new ObjectParameter("ShortDesc", typeof(string));
    
            var mediumDescParameter = mediumDesc != null ?
                new ObjectParameter("MediumDesc", mediumDesc) :
                new ObjectParameter("MediumDesc", typeof(string));
    
            var longDescParameter = longDesc != null ?
                new ObjectParameter("LongDesc", longDesc) :
                new ObjectParameter("LongDesc", typeof(string));
    
            var customDescParameter = customDesc != null ?
                new ObjectParameter("CustomDesc", customDesc) :
                new ObjectParameter("CustomDesc", typeof(string));
    
            var chargePerUnitParameter = chargePerUnit.HasValue ?
                new ObjectParameter("ChargePerUnit", chargePerUnit) :
                new ObjectParameter("ChargePerUnit", typeof(decimal));
    
            var isHCPCSCodeParameter = isHCPCSCode.HasValue ?
                new ObjectParameter("IsHCPCSCode", isHCPCSCode) :
                new ObjectParameter("IsHCPCSCode", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_CPT", cPTCodeParameter, shortDescParameter, mediumDescParameter, longDescParameter, customDescParameter, chargePerUnitParameter, isHCPCSCodeParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, cPTID);
        }
    
        public virtual int usp_Update_Diagnosis(string diagnosisCode, Nullable<byte> iCDFormat, Nullable<int> diagnosisGroupID, string shortDesc, string mediumDesc, string longDesc, string customDesc, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter diagnosisID)
        {
            var diagnosisCodeParameter = diagnosisCode != null ?
                new ObjectParameter("DiagnosisCode", diagnosisCode) :
                new ObjectParameter("DiagnosisCode", typeof(string));
    
            var iCDFormatParameter = iCDFormat.HasValue ?
                new ObjectParameter("ICDFormat", iCDFormat) :
                new ObjectParameter("ICDFormat", typeof(byte));
    
            var diagnosisGroupIDParameter = diagnosisGroupID.HasValue ?
                new ObjectParameter("DiagnosisGroupID", diagnosisGroupID) :
                new ObjectParameter("DiagnosisGroupID", typeof(int));
    
            var shortDescParameter = shortDesc != null ?
                new ObjectParameter("ShortDesc", shortDesc) :
                new ObjectParameter("ShortDesc", typeof(string));
    
            var mediumDescParameter = mediumDesc != null ?
                new ObjectParameter("MediumDesc", mediumDesc) :
                new ObjectParameter("MediumDesc", typeof(string));
    
            var longDescParameter = longDesc != null ?
                new ObjectParameter("LongDesc", longDesc) :
                new ObjectParameter("LongDesc", typeof(string));
    
            var customDescParameter = customDesc != null ?
                new ObjectParameter("CustomDesc", customDesc) :
                new ObjectParameter("CustomDesc", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Diagnosis", diagnosisCodeParameter, iCDFormatParameter, diagnosisGroupIDParameter, shortDescParameter, mediumDescParameter, longDescParameter, customDescParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, diagnosisID);
        }
    
        public virtual int usp_Update_DiagnosisGroup(string diagnosisGroupCode, string diagnosisGroupDescription, Nullable<decimal> amount, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter diagnosisGroupID)
        {
            var diagnosisGroupCodeParameter = diagnosisGroupCode != null ?
                new ObjectParameter("DiagnosisGroupCode", diagnosisGroupCode) :
                new ObjectParameter("DiagnosisGroupCode", typeof(string));
    
            var diagnosisGroupDescriptionParameter = diagnosisGroupDescription != null ?
                new ObjectParameter("DiagnosisGroupDescription", diagnosisGroupDescription) :
                new ObjectParameter("DiagnosisGroupDescription", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_DiagnosisGroup", diagnosisGroupCodeParameter, diagnosisGroupDescriptionParameter, amountParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, diagnosisGroupID);
        }
    
        public virtual int usp_Update_IllnessIndicator(string illnessIndicatorCode, string illnessIndicatorName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter illnessIndicatorID)
        {
            var illnessIndicatorCodeParameter = illnessIndicatorCode != null ?
                new ObjectParameter("IllnessIndicatorCode", illnessIndicatorCode) :
                new ObjectParameter("IllnessIndicatorCode", typeof(string));
    
            var illnessIndicatorNameParameter = illnessIndicatorName != null ?
                new ObjectParameter("IllnessIndicatorName", illnessIndicatorName) :
                new ObjectParameter("IllnessIndicatorName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_IllnessIndicator", illnessIndicatorCodeParameter, illnessIndicatorNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, illnessIndicatorID);
        }
    
        public virtual int usp_Update_Modifier(string modifierCode, string modifierName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter modifierID)
        {
            var modifierCodeParameter = modifierCode != null ?
                new ObjectParameter("ModifierCode", modifierCode) :
                new ObjectParameter("ModifierCode", typeof(string));
    
            var modifierNameParameter = modifierName != null ?
                new ObjectParameter("ModifierName", modifierName) :
                new ObjectParameter("ModifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Modifier", modifierCodeParameter, modifierNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, modifierID);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_EDIReceiver_Result> usp_GetAutoComplete_EDIReceiver(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_EDIReceiver_Result>("usp_GetAutoComplete_EDIReceiver", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_PrintPin_Result> usp_GetAutoComplete_PrintPin(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_PrintPin_Result>("usp_GetAutoComplete_PrintPin", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_PrintSign_Result> usp_GetAutoComplete_PrintSign(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_PrintSign_Result>("usp_GetAutoComplete_PrintSign", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetByEDIReceiverID_EDIReceiver_Result> usp_GetByEDIReceiverID_EDIReceiver(Nullable<long> insuranceID)
        {
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByEDIReceiverID_EDIReceiver_Result>("usp_GetByEDIReceiverID_EDIReceiver", insuranceIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatientID_EDIReceiver_Result> usp_GetByPatientID_EDIReceiver(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatientID_EDIReceiver_Result>("usp_GetByPatientID_EDIReceiver", patientIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_EDIFile_Result> usp_GetByPkId_EDIFile(Nullable<int> eDIFileID, Nullable<bool> isActive)
        {
            var eDIFileIDParameter = eDIFileID.HasValue ?
                new ObjectParameter("EDIFileID", eDIFileID) :
                new ObjectParameter("EDIFileID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_EDIFile_Result>("usp_GetByPkId_EDIFile", eDIFileIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_EDIReceiver_Result> usp_GetByPkId_EDIReceiver(Nullable<int> eDIReceiverID, Nullable<bool> isActive)
        {
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_EDIReceiver_Result>("usp_GetByPkId_EDIReceiver", eDIReceiverIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_PrintPin_Result> usp_GetByPkId_PrintPin(Nullable<byte> printPinID, Nullable<bool> isActive)
        {
            var printPinIDParameter = printPinID.HasValue ?
                new ObjectParameter("PrintPinID", printPinID) :
                new ObjectParameter("PrintPinID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_PrintPin_Result>("usp_GetByPkId_PrintPin", printPinIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_PrintSign_Result> usp_GetByPkId_PrintSign(Nullable<byte> printSignID, Nullable<bool> isActive)
        {
            var printSignIDParameter = printSignID.HasValue ?
                new ObjectParameter("PrintSignID", printSignID) :
                new ObjectParameter("PrintSignID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_PrintSign_Result>("usp_GetByPkId_PrintSign", printSignIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPrintPinID_PrintPin_Result> usp_GetByPrintPinID_PrintPin(Nullable<long> insuranceID)
        {
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPrintPinID_PrintPin_Result>("usp_GetByPrintPinID_PrintPin", insuranceIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPrintSignID_PrintSign_Result> usp_GetByPrintSignID_PrintSign(Nullable<int> insuranceID)
        {
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPrintSignID_PrintSign_Result>("usp_GetByPrintSignID_PrintSign", insuranceIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_EDIFile_Result> usp_GetBySearch_EDIFile(Nullable<int> clinicID, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> dOSFrom, Nullable<System.DateTime> dOSTo, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var dOSFromParameter = dOSFrom.HasValue ?
                new ObjectParameter("DOSFrom", dOSFrom) :
                new ObjectParameter("DOSFrom", typeof(System.DateTime));
    
            var dOSToParameter = dOSTo.HasValue ?
                new ObjectParameter("DOSTo", dOSTo) :
                new ObjectParameter("DOSTo", typeof(System.DateTime));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_EDIFile_Result>("usp_GetBySearch_EDIFile", clinicIDParameter, searchNameParameter, dateFromParameter, dateToParameter, dOSFromParameter, dOSToParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_EDIReceiver_Result> usp_GetBySearch_EDIReceiver(string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_EDIReceiver_Result>("usp_GetBySearch_EDIReceiver", orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_PrintPin_Result> usp_GetBySearch_PrintPin(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_PrintPin_Result>("usp_GetBySearch_PrintPin", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_PrintSign_Result> usp_GetBySearch_PrintSign(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_PrintSign_Result>("usp_GetBySearch_PrintSign", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetCount835_EDIFile_Result> usp_GetCount835_EDIFile(Nullable<int> clinicID, string statusIDs, Nullable<int> userID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCount835_EDIFile_Result>("usp_GetCount835_EDIFile", clinicIDParameter, statusIDsParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCountEDIHistory_EDIFile_Result> usp_GetCountEDIHistory_EDIFile(Nullable<int> clinicID, string statusIDs)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCountEDIHistory_EDIFile_Result>("usp_GetCountEDIHistory_EDIFile", clinicIDParameter, statusIDsParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_EDIReceiver_Result> usp_GetIDAutoComplete_EDIReceiver(string eDIReceiverCode)
        {
            var eDIReceiverCodeParameter = eDIReceiverCode != null ?
                new ObjectParameter("EDIReceiverCode", eDIReceiverCode) :
                new ObjectParameter("EDIReceiverCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_EDIReceiver_Result>("usp_GetIDAutoComplete_EDIReceiver", eDIReceiverCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_PrintPin_Result> usp_GetIDAutoComplete_PrintPin(string printPinCode)
        {
            var printPinCodeParameter = printPinCode != null ?
                new ObjectParameter("PrintPinCode", printPinCode) :
                new ObjectParameter("PrintPinCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_PrintPin_Result>("usp_GetIDAutoComplete_PrintPin", printPinCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_PrintSign_Result> usp_GetIDAutoComplete_PrintSign(string printSignCode)
        {
            var printSignCodeParameter = printSignCode != null ?
                new ObjectParameter("PrintSignCode", printSignCode) :
                new ObjectParameter("PrintSignCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_PrintSign_Result>("usp_GetIDAutoComplete_PrintSign", printSignCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetNameCode_EDIReceiver_Result> usp_GetNameCode_EDIReceiver(Nullable<int> clinicID, string statusIDs, Nullable<int> assignedTo)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameCode_EDIReceiver_Result>("usp_GetNameCode_EDIReceiver", clinicIDParameter, statusIDsParameter, assignedToParameter);
        }
    
        public virtual ObjectResult<usp_GetSentFile_EDIFile_Result> usp_GetSentFile_EDIFile(Nullable<int> clinicID, string statusIDs, Nullable<int> userID, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> dOSFrom, Nullable<System.DateTime> dOSTo, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var dOSFromParameter = dOSFrom.HasValue ?
                new ObjectParameter("DOSFrom", dOSFrom) :
                new ObjectParameter("DOSFrom", typeof(System.DateTime));
    
            var dOSToParameter = dOSTo.HasValue ?
                new ObjectParameter("DOSTo", dOSTo) :
                new ObjectParameter("DOSTo", typeof(System.DateTime));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSentFile_EDIFile_Result>("usp_GetSentFile_EDIFile", clinicIDParameter, statusIDsParameter, userIDParameter, searchNameParameter, dateFromParameter, dateToParameter, dOSFromParameter, dOSToParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual int usp_Insert_EDIFile(Nullable<int> eDIReceiverID, string x12FileRelPath, string refFileRelPath, string comment, Nullable<long> currentModificationBy, ObjectParameter eDIFileID)
        {
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var x12FileRelPathParameter = x12FileRelPath != null ?
                new ObjectParameter("X12FileRelPath", x12FileRelPath) :
                new ObjectParameter("X12FileRelPath", typeof(string));
    
            var refFileRelPathParameter = refFileRelPath != null ?
                new ObjectParameter("RefFileRelPath", refFileRelPath) :
                new ObjectParameter("RefFileRelPath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_EDIFile", eDIReceiverIDParameter, x12FileRelPathParameter, refFileRelPathParameter, commentParameter, currentModificationByParameter, eDIFileID);
        }
    
        public virtual int usp_Insert_EDIReceiver(string eDIReceiverCode, string eDIReceiverName, Nullable<byte> authorizationInformationQualifierID, string authorizationInformation, Nullable<byte> securityInformationQualifierID, string securityInformation, string securityInformationQualifierUserName, string securityInformationQualifierPassword, Nullable<long> lastInterchangeControlNumber, Nullable<byte> senderInterchangeIDQualifierID, string senderInterchangeID, Nullable<byte> receiverInterchangeIDQualifierID, string receiverInterchangeID, Nullable<byte> transactionSetPurposeCodeID, Nullable<byte> transactionTypeCodeID, Nullable<bool> isGroupPractice, Nullable<byte> claimMediaID, string applicationSenderCode, string applicationReceiverCode, Nullable<byte> interchangeUsageIndicatorID, string functionalIdentifierCode, Nullable<byte> submitterEntityIdentifierCodeID, Nullable<byte> receiverEntityIdentifierCodeID, Nullable<byte> billingProviderEntityIdentifierCodeID, Nullable<byte> subscriberEntityIdentifierCodeID, Nullable<byte> payerEntityIdentifierCodeID, Nullable<byte> entityTypeQualifierID, Nullable<byte> currencyCodeID, Nullable<byte> payerResponsibilitySequenceNumberCodeID, Nullable<byte> emailCommunicationNumberQualifierID, Nullable<byte> faxCommunicationNumberQualifierID, Nullable<byte> phoneCommunicationNumberQualifierID, Nullable<byte> patientEntityTypeQualifierID, Nullable<byte> providerEntityTypeQualifierID, Nullable<byte> insuranceEntityTypeQualifierID, string comment, Nullable<long> currentModificationBy, ObjectParameter eDIReceiverID)
        {
            var eDIReceiverCodeParameter = eDIReceiverCode != null ?
                new ObjectParameter("EDIReceiverCode", eDIReceiverCode) :
                new ObjectParameter("EDIReceiverCode", typeof(string));
    
            var eDIReceiverNameParameter = eDIReceiverName != null ?
                new ObjectParameter("EDIReceiverName", eDIReceiverName) :
                new ObjectParameter("EDIReceiverName", typeof(string));
    
            var authorizationInformationQualifierIDParameter = authorizationInformationQualifierID.HasValue ?
                new ObjectParameter("AuthorizationInformationQualifierID", authorizationInformationQualifierID) :
                new ObjectParameter("AuthorizationInformationQualifierID", typeof(byte));
    
            var authorizationInformationParameter = authorizationInformation != null ?
                new ObjectParameter("AuthorizationInformation", authorizationInformation) :
                new ObjectParameter("AuthorizationInformation", typeof(string));
    
            var securityInformationQualifierIDParameter = securityInformationQualifierID.HasValue ?
                new ObjectParameter("SecurityInformationQualifierID", securityInformationQualifierID) :
                new ObjectParameter("SecurityInformationQualifierID", typeof(byte));
    
            var securityInformationParameter = securityInformation != null ?
                new ObjectParameter("SecurityInformation", securityInformation) :
                new ObjectParameter("SecurityInformation", typeof(string));
    
            var securityInformationQualifierUserNameParameter = securityInformationQualifierUserName != null ?
                new ObjectParameter("SecurityInformationQualifierUserName", securityInformationQualifierUserName) :
                new ObjectParameter("SecurityInformationQualifierUserName", typeof(string));
    
            var securityInformationQualifierPasswordParameter = securityInformationQualifierPassword != null ?
                new ObjectParameter("SecurityInformationQualifierPassword", securityInformationQualifierPassword) :
                new ObjectParameter("SecurityInformationQualifierPassword", typeof(string));
    
            var lastInterchangeControlNumberParameter = lastInterchangeControlNumber.HasValue ?
                new ObjectParameter("LastInterchangeControlNumber", lastInterchangeControlNumber) :
                new ObjectParameter("LastInterchangeControlNumber", typeof(long));
    
            var senderInterchangeIDQualifierIDParameter = senderInterchangeIDQualifierID.HasValue ?
                new ObjectParameter("SenderInterchangeIDQualifierID", senderInterchangeIDQualifierID) :
                new ObjectParameter("SenderInterchangeIDQualifierID", typeof(byte));
    
            var senderInterchangeIDParameter = senderInterchangeID != null ?
                new ObjectParameter("SenderInterchangeID", senderInterchangeID) :
                new ObjectParameter("SenderInterchangeID", typeof(string));
    
            var receiverInterchangeIDQualifierIDParameter = receiverInterchangeIDQualifierID.HasValue ?
                new ObjectParameter("ReceiverInterchangeIDQualifierID", receiverInterchangeIDQualifierID) :
                new ObjectParameter("ReceiverInterchangeIDQualifierID", typeof(byte));
    
            var receiverInterchangeIDParameter = receiverInterchangeID != null ?
                new ObjectParameter("ReceiverInterchangeID", receiverInterchangeID) :
                new ObjectParameter("ReceiverInterchangeID", typeof(string));
    
            var transactionSetPurposeCodeIDParameter = transactionSetPurposeCodeID.HasValue ?
                new ObjectParameter("TransactionSetPurposeCodeID", transactionSetPurposeCodeID) :
                new ObjectParameter("TransactionSetPurposeCodeID", typeof(byte));
    
            var transactionTypeCodeIDParameter = transactionTypeCodeID.HasValue ?
                new ObjectParameter("TransactionTypeCodeID", transactionTypeCodeID) :
                new ObjectParameter("TransactionTypeCodeID", typeof(byte));
    
            var isGroupPracticeParameter = isGroupPractice.HasValue ?
                new ObjectParameter("IsGroupPractice", isGroupPractice) :
                new ObjectParameter("IsGroupPractice", typeof(bool));
    
            var claimMediaIDParameter = claimMediaID.HasValue ?
                new ObjectParameter("ClaimMediaID", claimMediaID) :
                new ObjectParameter("ClaimMediaID", typeof(byte));
    
            var applicationSenderCodeParameter = applicationSenderCode != null ?
                new ObjectParameter("ApplicationSenderCode", applicationSenderCode) :
                new ObjectParameter("ApplicationSenderCode", typeof(string));
    
            var applicationReceiverCodeParameter = applicationReceiverCode != null ?
                new ObjectParameter("ApplicationReceiverCode", applicationReceiverCode) :
                new ObjectParameter("ApplicationReceiverCode", typeof(string));
    
            var interchangeUsageIndicatorIDParameter = interchangeUsageIndicatorID.HasValue ?
                new ObjectParameter("InterchangeUsageIndicatorID", interchangeUsageIndicatorID) :
                new ObjectParameter("InterchangeUsageIndicatorID", typeof(byte));
    
            var functionalIdentifierCodeParameter = functionalIdentifierCode != null ?
                new ObjectParameter("FunctionalIdentifierCode", functionalIdentifierCode) :
                new ObjectParameter("FunctionalIdentifierCode", typeof(string));
    
            var submitterEntityIdentifierCodeIDParameter = submitterEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("SubmitterEntityIdentifierCodeID", submitterEntityIdentifierCodeID) :
                new ObjectParameter("SubmitterEntityIdentifierCodeID", typeof(byte));
    
            var receiverEntityIdentifierCodeIDParameter = receiverEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("ReceiverEntityIdentifierCodeID", receiverEntityIdentifierCodeID) :
                new ObjectParameter("ReceiverEntityIdentifierCodeID", typeof(byte));
    
            var billingProviderEntityIdentifierCodeIDParameter = billingProviderEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("BillingProviderEntityIdentifierCodeID", billingProviderEntityIdentifierCodeID) :
                new ObjectParameter("BillingProviderEntityIdentifierCodeID", typeof(byte));
    
            var subscriberEntityIdentifierCodeIDParameter = subscriberEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("SubscriberEntityIdentifierCodeID", subscriberEntityIdentifierCodeID) :
                new ObjectParameter("SubscriberEntityIdentifierCodeID", typeof(byte));
    
            var payerEntityIdentifierCodeIDParameter = payerEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("PayerEntityIdentifierCodeID", payerEntityIdentifierCodeID) :
                new ObjectParameter("PayerEntityIdentifierCodeID", typeof(byte));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var currencyCodeIDParameter = currencyCodeID.HasValue ?
                new ObjectParameter("CurrencyCodeID", currencyCodeID) :
                new ObjectParameter("CurrencyCodeID", typeof(byte));
    
            var payerResponsibilitySequenceNumberCodeIDParameter = payerResponsibilitySequenceNumberCodeID.HasValue ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", payerResponsibilitySequenceNumberCodeID) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", typeof(byte));
    
            var emailCommunicationNumberQualifierIDParameter = emailCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("EmailCommunicationNumberQualifierID", emailCommunicationNumberQualifierID) :
                new ObjectParameter("EmailCommunicationNumberQualifierID", typeof(byte));
    
            var faxCommunicationNumberQualifierIDParameter = faxCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("FaxCommunicationNumberQualifierID", faxCommunicationNumberQualifierID) :
                new ObjectParameter("FaxCommunicationNumberQualifierID", typeof(byte));
    
            var phoneCommunicationNumberQualifierIDParameter = phoneCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("PhoneCommunicationNumberQualifierID", phoneCommunicationNumberQualifierID) :
                new ObjectParameter("PhoneCommunicationNumberQualifierID", typeof(byte));
    
            var patientEntityTypeQualifierIDParameter = patientEntityTypeQualifierID.HasValue ?
                new ObjectParameter("PatientEntityTypeQualifierID", patientEntityTypeQualifierID) :
                new ObjectParameter("PatientEntityTypeQualifierID", typeof(byte));
    
            var providerEntityTypeQualifierIDParameter = providerEntityTypeQualifierID.HasValue ?
                new ObjectParameter("ProviderEntityTypeQualifierID", providerEntityTypeQualifierID) :
                new ObjectParameter("ProviderEntityTypeQualifierID", typeof(byte));
    
            var insuranceEntityTypeQualifierIDParameter = insuranceEntityTypeQualifierID.HasValue ?
                new ObjectParameter("InsuranceEntityTypeQualifierID", insuranceEntityTypeQualifierID) :
                new ObjectParameter("InsuranceEntityTypeQualifierID", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_EDIReceiver", eDIReceiverCodeParameter, eDIReceiverNameParameter, authorizationInformationQualifierIDParameter, authorizationInformationParameter, securityInformationQualifierIDParameter, securityInformationParameter, securityInformationQualifierUserNameParameter, securityInformationQualifierPasswordParameter, lastInterchangeControlNumberParameter, senderInterchangeIDQualifierIDParameter, senderInterchangeIDParameter, receiverInterchangeIDQualifierIDParameter, receiverInterchangeIDParameter, transactionSetPurposeCodeIDParameter, transactionTypeCodeIDParameter, isGroupPracticeParameter, claimMediaIDParameter, applicationSenderCodeParameter, applicationReceiverCodeParameter, interchangeUsageIndicatorIDParameter, functionalIdentifierCodeParameter, submitterEntityIdentifierCodeIDParameter, receiverEntityIdentifierCodeIDParameter, billingProviderEntityIdentifierCodeIDParameter, subscriberEntityIdentifierCodeIDParameter, payerEntityIdentifierCodeIDParameter, entityTypeQualifierIDParameter, currencyCodeIDParameter, payerResponsibilitySequenceNumberCodeIDParameter, emailCommunicationNumberQualifierIDParameter, faxCommunicationNumberQualifierIDParameter, phoneCommunicationNumberQualifierIDParameter, patientEntityTypeQualifierIDParameter, providerEntityTypeQualifierIDParameter, insuranceEntityTypeQualifierIDParameter, commentParameter, currentModificationByParameter, eDIReceiverID);
        }
    
        public virtual int usp_Insert_PrintPin(string printPinCode, string printPinName, string comment, Nullable<long> currentModificationBy, ObjectParameter printPinID)
        {
            var printPinCodeParameter = printPinCode != null ?
                new ObjectParameter("PrintPinCode", printPinCode) :
                new ObjectParameter("PrintPinCode", typeof(string));
    
            var printPinNameParameter = printPinName != null ?
                new ObjectParameter("PrintPinName", printPinName) :
                new ObjectParameter("PrintPinName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_PrintPin", printPinCodeParameter, printPinNameParameter, commentParameter, currentModificationByParameter, printPinID);
        }
    
        public virtual int usp_Insert_PrintSign(string printSignCode, string printSignName, string comment, Nullable<long> currentModificationBy, ObjectParameter printSignID)
        {
            var printSignCodeParameter = printSignCode != null ?
                new ObjectParameter("PrintSignCode", printSignCode) :
                new ObjectParameter("PrintSignCode", typeof(string));
    
            var printSignNameParameter = printSignName != null ?
                new ObjectParameter("PrintSignName", printSignName) :
                new ObjectParameter("PrintSignName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_PrintSign", printSignCodeParameter, printSignNameParameter, commentParameter, currentModificationByParameter, printSignID);
        }
    
        public virtual int usp_IsExists_EDIFile(Nullable<int> eDIReceiverID, string x12FileRelPath, string refFileRelPath, string comment, ObjectParameter eDIFileID)
        {
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var x12FileRelPathParameter = x12FileRelPath != null ?
                new ObjectParameter("X12FileRelPath", x12FileRelPath) :
                new ObjectParameter("X12FileRelPath", typeof(string));
    
            var refFileRelPathParameter = refFileRelPath != null ?
                new ObjectParameter("RefFileRelPath", refFileRelPath) :
                new ObjectParameter("RefFileRelPath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_EDIFile", eDIReceiverIDParameter, x12FileRelPathParameter, refFileRelPathParameter, commentParameter, eDIFileID);
        }
    
        public virtual int usp_IsExists_EDIReceiver(string eDIReceiverCode, string eDIReceiverName, Nullable<byte> authorizationInformationQualifierID, string authorizationInformation, Nullable<byte> securityInformationQualifierID, string securityInformation, string securityInformationQualifierUserName, string securityInformationQualifierPassword, Nullable<long> lastInterchangeControlNumber, Nullable<byte> senderInterchangeIDQualifierID, string senderInterchangeID, Nullable<byte> receiverInterchangeIDQualifierID, string receiverInterchangeID, Nullable<byte> transactionSetPurposeCodeID, Nullable<byte> transactionTypeCodeID, Nullable<bool> isGroupPractice, Nullable<byte> claimMediaID, string applicationSenderCode, string applicationReceiverCode, Nullable<byte> interchangeUsageIndicatorID, string functionalIdentifierCode, Nullable<byte> submitterEntityIdentifierCodeID, Nullable<byte> receiverEntityIdentifierCodeID, Nullable<byte> billingProviderEntityIdentifierCodeID, Nullable<byte> subscriberEntityIdentifierCodeID, Nullable<byte> payerEntityIdentifierCodeID, Nullable<byte> entityTypeQualifierID, Nullable<byte> currencyCodeID, Nullable<byte> payerResponsibilitySequenceNumberCodeID, Nullable<byte> emailCommunicationNumberQualifierID, Nullable<byte> faxCommunicationNumberQualifierID, Nullable<byte> phoneCommunicationNumberQualifierID, Nullable<byte> patientEntityTypeQualifierID, Nullable<byte> providerEntityTypeQualifierID, Nullable<byte> insuranceEntityTypeQualifierID, string comment, ObjectParameter eDIReceiverID)
        {
            var eDIReceiverCodeParameter = eDIReceiverCode != null ?
                new ObjectParameter("EDIReceiverCode", eDIReceiverCode) :
                new ObjectParameter("EDIReceiverCode", typeof(string));
    
            var eDIReceiverNameParameter = eDIReceiverName != null ?
                new ObjectParameter("EDIReceiverName", eDIReceiverName) :
                new ObjectParameter("EDIReceiverName", typeof(string));
    
            var authorizationInformationQualifierIDParameter = authorizationInformationQualifierID.HasValue ?
                new ObjectParameter("AuthorizationInformationQualifierID", authorizationInformationQualifierID) :
                new ObjectParameter("AuthorizationInformationQualifierID", typeof(byte));
    
            var authorizationInformationParameter = authorizationInformation != null ?
                new ObjectParameter("AuthorizationInformation", authorizationInformation) :
                new ObjectParameter("AuthorizationInformation", typeof(string));
    
            var securityInformationQualifierIDParameter = securityInformationQualifierID.HasValue ?
                new ObjectParameter("SecurityInformationQualifierID", securityInformationQualifierID) :
                new ObjectParameter("SecurityInformationQualifierID", typeof(byte));
    
            var securityInformationParameter = securityInformation != null ?
                new ObjectParameter("SecurityInformation", securityInformation) :
                new ObjectParameter("SecurityInformation", typeof(string));
    
            var securityInformationQualifierUserNameParameter = securityInformationQualifierUserName != null ?
                new ObjectParameter("SecurityInformationQualifierUserName", securityInformationQualifierUserName) :
                new ObjectParameter("SecurityInformationQualifierUserName", typeof(string));
    
            var securityInformationQualifierPasswordParameter = securityInformationQualifierPassword != null ?
                new ObjectParameter("SecurityInformationQualifierPassword", securityInformationQualifierPassword) :
                new ObjectParameter("SecurityInformationQualifierPassword", typeof(string));
    
            var lastInterchangeControlNumberParameter = lastInterchangeControlNumber.HasValue ?
                new ObjectParameter("LastInterchangeControlNumber", lastInterchangeControlNumber) :
                new ObjectParameter("LastInterchangeControlNumber", typeof(long));
    
            var senderInterchangeIDQualifierIDParameter = senderInterchangeIDQualifierID.HasValue ?
                new ObjectParameter("SenderInterchangeIDQualifierID", senderInterchangeIDQualifierID) :
                new ObjectParameter("SenderInterchangeIDQualifierID", typeof(byte));
    
            var senderInterchangeIDParameter = senderInterchangeID != null ?
                new ObjectParameter("SenderInterchangeID", senderInterchangeID) :
                new ObjectParameter("SenderInterchangeID", typeof(string));
    
            var receiverInterchangeIDQualifierIDParameter = receiverInterchangeIDQualifierID.HasValue ?
                new ObjectParameter("ReceiverInterchangeIDQualifierID", receiverInterchangeIDQualifierID) :
                new ObjectParameter("ReceiverInterchangeIDQualifierID", typeof(byte));
    
            var receiverInterchangeIDParameter = receiverInterchangeID != null ?
                new ObjectParameter("ReceiverInterchangeID", receiverInterchangeID) :
                new ObjectParameter("ReceiverInterchangeID", typeof(string));
    
            var transactionSetPurposeCodeIDParameter = transactionSetPurposeCodeID.HasValue ?
                new ObjectParameter("TransactionSetPurposeCodeID", transactionSetPurposeCodeID) :
                new ObjectParameter("TransactionSetPurposeCodeID", typeof(byte));
    
            var transactionTypeCodeIDParameter = transactionTypeCodeID.HasValue ?
                new ObjectParameter("TransactionTypeCodeID", transactionTypeCodeID) :
                new ObjectParameter("TransactionTypeCodeID", typeof(byte));
    
            var isGroupPracticeParameter = isGroupPractice.HasValue ?
                new ObjectParameter("IsGroupPractice", isGroupPractice) :
                new ObjectParameter("IsGroupPractice", typeof(bool));
    
            var claimMediaIDParameter = claimMediaID.HasValue ?
                new ObjectParameter("ClaimMediaID", claimMediaID) :
                new ObjectParameter("ClaimMediaID", typeof(byte));
    
            var applicationSenderCodeParameter = applicationSenderCode != null ?
                new ObjectParameter("ApplicationSenderCode", applicationSenderCode) :
                new ObjectParameter("ApplicationSenderCode", typeof(string));
    
            var applicationReceiverCodeParameter = applicationReceiverCode != null ?
                new ObjectParameter("ApplicationReceiverCode", applicationReceiverCode) :
                new ObjectParameter("ApplicationReceiverCode", typeof(string));
    
            var interchangeUsageIndicatorIDParameter = interchangeUsageIndicatorID.HasValue ?
                new ObjectParameter("InterchangeUsageIndicatorID", interchangeUsageIndicatorID) :
                new ObjectParameter("InterchangeUsageIndicatorID", typeof(byte));
    
            var functionalIdentifierCodeParameter = functionalIdentifierCode != null ?
                new ObjectParameter("FunctionalIdentifierCode", functionalIdentifierCode) :
                new ObjectParameter("FunctionalIdentifierCode", typeof(string));
    
            var submitterEntityIdentifierCodeIDParameter = submitterEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("SubmitterEntityIdentifierCodeID", submitterEntityIdentifierCodeID) :
                new ObjectParameter("SubmitterEntityIdentifierCodeID", typeof(byte));
    
            var receiverEntityIdentifierCodeIDParameter = receiverEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("ReceiverEntityIdentifierCodeID", receiverEntityIdentifierCodeID) :
                new ObjectParameter("ReceiverEntityIdentifierCodeID", typeof(byte));
    
            var billingProviderEntityIdentifierCodeIDParameter = billingProviderEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("BillingProviderEntityIdentifierCodeID", billingProviderEntityIdentifierCodeID) :
                new ObjectParameter("BillingProviderEntityIdentifierCodeID", typeof(byte));
    
            var subscriberEntityIdentifierCodeIDParameter = subscriberEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("SubscriberEntityIdentifierCodeID", subscriberEntityIdentifierCodeID) :
                new ObjectParameter("SubscriberEntityIdentifierCodeID", typeof(byte));
    
            var payerEntityIdentifierCodeIDParameter = payerEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("PayerEntityIdentifierCodeID", payerEntityIdentifierCodeID) :
                new ObjectParameter("PayerEntityIdentifierCodeID", typeof(byte));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var currencyCodeIDParameter = currencyCodeID.HasValue ?
                new ObjectParameter("CurrencyCodeID", currencyCodeID) :
                new ObjectParameter("CurrencyCodeID", typeof(byte));
    
            var payerResponsibilitySequenceNumberCodeIDParameter = payerResponsibilitySequenceNumberCodeID.HasValue ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", payerResponsibilitySequenceNumberCodeID) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", typeof(byte));
    
            var emailCommunicationNumberQualifierIDParameter = emailCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("EmailCommunicationNumberQualifierID", emailCommunicationNumberQualifierID) :
                new ObjectParameter("EmailCommunicationNumberQualifierID", typeof(byte));
    
            var faxCommunicationNumberQualifierIDParameter = faxCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("FaxCommunicationNumberQualifierID", faxCommunicationNumberQualifierID) :
                new ObjectParameter("FaxCommunicationNumberQualifierID", typeof(byte));
    
            var phoneCommunicationNumberQualifierIDParameter = phoneCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("PhoneCommunicationNumberQualifierID", phoneCommunicationNumberQualifierID) :
                new ObjectParameter("PhoneCommunicationNumberQualifierID", typeof(byte));
    
            var patientEntityTypeQualifierIDParameter = patientEntityTypeQualifierID.HasValue ?
                new ObjectParameter("PatientEntityTypeQualifierID", patientEntityTypeQualifierID) :
                new ObjectParameter("PatientEntityTypeQualifierID", typeof(byte));
    
            var providerEntityTypeQualifierIDParameter = providerEntityTypeQualifierID.HasValue ?
                new ObjectParameter("ProviderEntityTypeQualifierID", providerEntityTypeQualifierID) :
                new ObjectParameter("ProviderEntityTypeQualifierID", typeof(byte));
    
            var insuranceEntityTypeQualifierIDParameter = insuranceEntityTypeQualifierID.HasValue ?
                new ObjectParameter("InsuranceEntityTypeQualifierID", insuranceEntityTypeQualifierID) :
                new ObjectParameter("InsuranceEntityTypeQualifierID", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_EDIReceiver", eDIReceiverCodeParameter, eDIReceiverNameParameter, authorizationInformationQualifierIDParameter, authorizationInformationParameter, securityInformationQualifierIDParameter, securityInformationParameter, securityInformationQualifierUserNameParameter, securityInformationQualifierPasswordParameter, lastInterchangeControlNumberParameter, senderInterchangeIDQualifierIDParameter, senderInterchangeIDParameter, receiverInterchangeIDQualifierIDParameter, receiverInterchangeIDParameter, transactionSetPurposeCodeIDParameter, transactionTypeCodeIDParameter, isGroupPracticeParameter, claimMediaIDParameter, applicationSenderCodeParameter, applicationReceiverCodeParameter, interchangeUsageIndicatorIDParameter, functionalIdentifierCodeParameter, submitterEntityIdentifierCodeIDParameter, receiverEntityIdentifierCodeIDParameter, billingProviderEntityIdentifierCodeIDParameter, subscriberEntityIdentifierCodeIDParameter, payerEntityIdentifierCodeIDParameter, entityTypeQualifierIDParameter, currencyCodeIDParameter, payerResponsibilitySequenceNumberCodeIDParameter, emailCommunicationNumberQualifierIDParameter, faxCommunicationNumberQualifierIDParameter, phoneCommunicationNumberQualifierIDParameter, patientEntityTypeQualifierIDParameter, providerEntityTypeQualifierIDParameter, insuranceEntityTypeQualifierIDParameter, commentParameter, eDIReceiverID);
        }
    
        public virtual int usp_IsExists_PrintPin(string printPinCode, string printPinName, string comment, ObjectParameter printPinID)
        {
            var printPinCodeParameter = printPinCode != null ?
                new ObjectParameter("PrintPinCode", printPinCode) :
                new ObjectParameter("PrintPinCode", typeof(string));
    
            var printPinNameParameter = printPinName != null ?
                new ObjectParameter("PrintPinName", printPinName) :
                new ObjectParameter("PrintPinName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_PrintPin", printPinCodeParameter, printPinNameParameter, commentParameter, printPinID);
        }
    
        public virtual int usp_IsExists_PrintSign(string printSignCode, string printSignName, string comment, ObjectParameter printSignID)
        {
            var printSignCodeParameter = printSignCode != null ?
                new ObjectParameter("PrintSignCode", printSignCode) :
                new ObjectParameter("PrintSignCode", typeof(string));
    
            var printSignNameParameter = printSignName != null ?
                new ObjectParameter("PrintSignName", printSignName) :
                new ObjectParameter("PrintSignName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_PrintSign", printSignCodeParameter, printSignNameParameter, commentParameter, printSignID);
        }
    
        public virtual int usp_Update_EDIFile(Nullable<int> eDIReceiverID, string x12FileRelPath, string refFileRelPath, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter eDIFileID)
        {
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var x12FileRelPathParameter = x12FileRelPath != null ?
                new ObjectParameter("X12FileRelPath", x12FileRelPath) :
                new ObjectParameter("X12FileRelPath", typeof(string));
    
            var refFileRelPathParameter = refFileRelPath != null ?
                new ObjectParameter("RefFileRelPath", refFileRelPath) :
                new ObjectParameter("RefFileRelPath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_EDIFile", eDIReceiverIDParameter, x12FileRelPathParameter, refFileRelPathParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, eDIFileID);
        }
    
        public virtual int usp_Update_EDIReceiver(string eDIReceiverCode, string eDIReceiverName, Nullable<byte> authorizationInformationQualifierID, string authorizationInformation, Nullable<byte> securityInformationQualifierID, string securityInformation, string securityInformationQualifierUserName, string securityInformationQualifierPassword, Nullable<long> lastInterchangeControlNumber, Nullable<byte> senderInterchangeIDQualifierID, string senderInterchangeID, Nullable<byte> receiverInterchangeIDQualifierID, string receiverInterchangeID, Nullable<byte> transactionSetPurposeCodeID, Nullable<byte> transactionTypeCodeID, Nullable<bool> isGroupPractice, Nullable<byte> claimMediaID, string applicationSenderCode, string applicationReceiverCode, Nullable<byte> interchangeUsageIndicatorID, string functionalIdentifierCode, Nullable<byte> submitterEntityIdentifierCodeID, Nullable<byte> receiverEntityIdentifierCodeID, Nullable<byte> billingProviderEntityIdentifierCodeID, Nullable<byte> subscriberEntityIdentifierCodeID, Nullable<byte> payerEntityIdentifierCodeID, Nullable<byte> entityTypeQualifierID, Nullable<byte> currencyCodeID, Nullable<byte> payerResponsibilitySequenceNumberCodeID, Nullable<byte> emailCommunicationNumberQualifierID, Nullable<byte> faxCommunicationNumberQualifierID, Nullable<byte> phoneCommunicationNumberQualifierID, Nullable<byte> patientEntityTypeQualifierID, Nullable<byte> providerEntityTypeQualifierID, Nullable<byte> insuranceEntityTypeQualifierID, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter eDIReceiverID)
        {
            var eDIReceiverCodeParameter = eDIReceiverCode != null ?
                new ObjectParameter("EDIReceiverCode", eDIReceiverCode) :
                new ObjectParameter("EDIReceiverCode", typeof(string));
    
            var eDIReceiverNameParameter = eDIReceiverName != null ?
                new ObjectParameter("EDIReceiverName", eDIReceiverName) :
                new ObjectParameter("EDIReceiverName", typeof(string));
    
            var authorizationInformationQualifierIDParameter = authorizationInformationQualifierID.HasValue ?
                new ObjectParameter("AuthorizationInformationQualifierID", authorizationInformationQualifierID) :
                new ObjectParameter("AuthorizationInformationQualifierID", typeof(byte));
    
            var authorizationInformationParameter = authorizationInformation != null ?
                new ObjectParameter("AuthorizationInformation", authorizationInformation) :
                new ObjectParameter("AuthorizationInformation", typeof(string));
    
            var securityInformationQualifierIDParameter = securityInformationQualifierID.HasValue ?
                new ObjectParameter("SecurityInformationQualifierID", securityInformationQualifierID) :
                new ObjectParameter("SecurityInformationQualifierID", typeof(byte));
    
            var securityInformationParameter = securityInformation != null ?
                new ObjectParameter("SecurityInformation", securityInformation) :
                new ObjectParameter("SecurityInformation", typeof(string));
    
            var securityInformationQualifierUserNameParameter = securityInformationQualifierUserName != null ?
                new ObjectParameter("SecurityInformationQualifierUserName", securityInformationQualifierUserName) :
                new ObjectParameter("SecurityInformationQualifierUserName", typeof(string));
    
            var securityInformationQualifierPasswordParameter = securityInformationQualifierPassword != null ?
                new ObjectParameter("SecurityInformationQualifierPassword", securityInformationQualifierPassword) :
                new ObjectParameter("SecurityInformationQualifierPassword", typeof(string));
    
            var lastInterchangeControlNumberParameter = lastInterchangeControlNumber.HasValue ?
                new ObjectParameter("LastInterchangeControlNumber", lastInterchangeControlNumber) :
                new ObjectParameter("LastInterchangeControlNumber", typeof(long));
    
            var senderInterchangeIDQualifierIDParameter = senderInterchangeIDQualifierID.HasValue ?
                new ObjectParameter("SenderInterchangeIDQualifierID", senderInterchangeIDQualifierID) :
                new ObjectParameter("SenderInterchangeIDQualifierID", typeof(byte));
    
            var senderInterchangeIDParameter = senderInterchangeID != null ?
                new ObjectParameter("SenderInterchangeID", senderInterchangeID) :
                new ObjectParameter("SenderInterchangeID", typeof(string));
    
            var receiverInterchangeIDQualifierIDParameter = receiverInterchangeIDQualifierID.HasValue ?
                new ObjectParameter("ReceiverInterchangeIDQualifierID", receiverInterchangeIDQualifierID) :
                new ObjectParameter("ReceiverInterchangeIDQualifierID", typeof(byte));
    
            var receiverInterchangeIDParameter = receiverInterchangeID != null ?
                new ObjectParameter("ReceiverInterchangeID", receiverInterchangeID) :
                new ObjectParameter("ReceiverInterchangeID", typeof(string));
    
            var transactionSetPurposeCodeIDParameter = transactionSetPurposeCodeID.HasValue ?
                new ObjectParameter("TransactionSetPurposeCodeID", transactionSetPurposeCodeID) :
                new ObjectParameter("TransactionSetPurposeCodeID", typeof(byte));
    
            var transactionTypeCodeIDParameter = transactionTypeCodeID.HasValue ?
                new ObjectParameter("TransactionTypeCodeID", transactionTypeCodeID) :
                new ObjectParameter("TransactionTypeCodeID", typeof(byte));
    
            var isGroupPracticeParameter = isGroupPractice.HasValue ?
                new ObjectParameter("IsGroupPractice", isGroupPractice) :
                new ObjectParameter("IsGroupPractice", typeof(bool));
    
            var claimMediaIDParameter = claimMediaID.HasValue ?
                new ObjectParameter("ClaimMediaID", claimMediaID) :
                new ObjectParameter("ClaimMediaID", typeof(byte));
    
            var applicationSenderCodeParameter = applicationSenderCode != null ?
                new ObjectParameter("ApplicationSenderCode", applicationSenderCode) :
                new ObjectParameter("ApplicationSenderCode", typeof(string));
    
            var applicationReceiverCodeParameter = applicationReceiverCode != null ?
                new ObjectParameter("ApplicationReceiverCode", applicationReceiverCode) :
                new ObjectParameter("ApplicationReceiverCode", typeof(string));
    
            var interchangeUsageIndicatorIDParameter = interchangeUsageIndicatorID.HasValue ?
                new ObjectParameter("InterchangeUsageIndicatorID", interchangeUsageIndicatorID) :
                new ObjectParameter("InterchangeUsageIndicatorID", typeof(byte));
    
            var functionalIdentifierCodeParameter = functionalIdentifierCode != null ?
                new ObjectParameter("FunctionalIdentifierCode", functionalIdentifierCode) :
                new ObjectParameter("FunctionalIdentifierCode", typeof(string));
    
            var submitterEntityIdentifierCodeIDParameter = submitterEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("SubmitterEntityIdentifierCodeID", submitterEntityIdentifierCodeID) :
                new ObjectParameter("SubmitterEntityIdentifierCodeID", typeof(byte));
    
            var receiverEntityIdentifierCodeIDParameter = receiverEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("ReceiverEntityIdentifierCodeID", receiverEntityIdentifierCodeID) :
                new ObjectParameter("ReceiverEntityIdentifierCodeID", typeof(byte));
    
            var billingProviderEntityIdentifierCodeIDParameter = billingProviderEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("BillingProviderEntityIdentifierCodeID", billingProviderEntityIdentifierCodeID) :
                new ObjectParameter("BillingProviderEntityIdentifierCodeID", typeof(byte));
    
            var subscriberEntityIdentifierCodeIDParameter = subscriberEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("SubscriberEntityIdentifierCodeID", subscriberEntityIdentifierCodeID) :
                new ObjectParameter("SubscriberEntityIdentifierCodeID", typeof(byte));
    
            var payerEntityIdentifierCodeIDParameter = payerEntityIdentifierCodeID.HasValue ?
                new ObjectParameter("PayerEntityIdentifierCodeID", payerEntityIdentifierCodeID) :
                new ObjectParameter("PayerEntityIdentifierCodeID", typeof(byte));
    
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var currencyCodeIDParameter = currencyCodeID.HasValue ?
                new ObjectParameter("CurrencyCodeID", currencyCodeID) :
                new ObjectParameter("CurrencyCodeID", typeof(byte));
    
            var payerResponsibilitySequenceNumberCodeIDParameter = payerResponsibilitySequenceNumberCodeID.HasValue ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", payerResponsibilitySequenceNumberCodeID) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", typeof(byte));
    
            var emailCommunicationNumberQualifierIDParameter = emailCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("EmailCommunicationNumberQualifierID", emailCommunicationNumberQualifierID) :
                new ObjectParameter("EmailCommunicationNumberQualifierID", typeof(byte));
    
            var faxCommunicationNumberQualifierIDParameter = faxCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("FaxCommunicationNumberQualifierID", faxCommunicationNumberQualifierID) :
                new ObjectParameter("FaxCommunicationNumberQualifierID", typeof(byte));
    
            var phoneCommunicationNumberQualifierIDParameter = phoneCommunicationNumberQualifierID.HasValue ?
                new ObjectParameter("PhoneCommunicationNumberQualifierID", phoneCommunicationNumberQualifierID) :
                new ObjectParameter("PhoneCommunicationNumberQualifierID", typeof(byte));
    
            var patientEntityTypeQualifierIDParameter = patientEntityTypeQualifierID.HasValue ?
                new ObjectParameter("PatientEntityTypeQualifierID", patientEntityTypeQualifierID) :
                new ObjectParameter("PatientEntityTypeQualifierID", typeof(byte));
    
            var providerEntityTypeQualifierIDParameter = providerEntityTypeQualifierID.HasValue ?
                new ObjectParameter("ProviderEntityTypeQualifierID", providerEntityTypeQualifierID) :
                new ObjectParameter("ProviderEntityTypeQualifierID", typeof(byte));
    
            var insuranceEntityTypeQualifierIDParameter = insuranceEntityTypeQualifierID.HasValue ?
                new ObjectParameter("InsuranceEntityTypeQualifierID", insuranceEntityTypeQualifierID) :
                new ObjectParameter("InsuranceEntityTypeQualifierID", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_EDIReceiver", eDIReceiverCodeParameter, eDIReceiverNameParameter, authorizationInformationQualifierIDParameter, authorizationInformationParameter, securityInformationQualifierIDParameter, securityInformationParameter, securityInformationQualifierUserNameParameter, securityInformationQualifierPasswordParameter, lastInterchangeControlNumberParameter, senderInterchangeIDQualifierIDParameter, senderInterchangeIDParameter, receiverInterchangeIDQualifierIDParameter, receiverInterchangeIDParameter, transactionSetPurposeCodeIDParameter, transactionTypeCodeIDParameter, isGroupPracticeParameter, claimMediaIDParameter, applicationSenderCodeParameter, applicationReceiverCodeParameter, interchangeUsageIndicatorIDParameter, functionalIdentifierCodeParameter, submitterEntityIdentifierCodeIDParameter, receiverEntityIdentifierCodeIDParameter, billingProviderEntityIdentifierCodeIDParameter, subscriberEntityIdentifierCodeIDParameter, payerEntityIdentifierCodeIDParameter, entityTypeQualifierIDParameter, currencyCodeIDParameter, payerResponsibilitySequenceNumberCodeIDParameter, emailCommunicationNumberQualifierIDParameter, faxCommunicationNumberQualifierIDParameter, phoneCommunicationNumberQualifierIDParameter, patientEntityTypeQualifierIDParameter, providerEntityTypeQualifierIDParameter, insuranceEntityTypeQualifierIDParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, eDIReceiverID);
        }
    
        public virtual int usp_Update_PrintPin(string printPinCode, string printPinName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter printPinID)
        {
            var printPinCodeParameter = printPinCode != null ?
                new ObjectParameter("PrintPinCode", printPinCode) :
                new ObjectParameter("PrintPinCode", typeof(string));
    
            var printPinNameParameter = printPinName != null ?
                new ObjectParameter("PrintPinName", printPinName) :
                new ObjectParameter("PrintPinName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_PrintPin", printPinCodeParameter, printPinNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, printPinID);
        }
    
        public virtual int usp_Update_PrintSign(string printSignCode, string printSignName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter printSignID)
        {
            var printSignCodeParameter = printSignCode != null ?
                new ObjectParameter("PrintSignCode", printSignCode) :
                new ObjectParameter("PrintSignCode", typeof(string));
    
            var printSignNameParameter = printSignName != null ?
                new ObjectParameter("PrintSignName", printSignName) :
                new ObjectParameter("PrintSignName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_PrintSign", printSignCodeParameter, printSignNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, printSignID);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ReportType_Result> usp_GetByPkId_ReportType(Nullable<byte> reportTypeID, Nullable<bool> isActive)
        {
            var reportTypeIDParameter = reportTypeID.HasValue ?
                new ObjectParameter("ReportTypeID", reportTypeID) :
                new ObjectParameter("ReportTypeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ReportType_Result>("usp_GetByPkId_ReportType", reportTypeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportTypeAll_ReportType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportTypeAll_ReportType");
        }
    
        public virtual int usp_Insert_ReportType(string reportTypeCode, string reportTypeName, string comment, Nullable<long> currentModificationBy, ObjectParameter reportTypeID)
        {
            var reportTypeCodeParameter = reportTypeCode != null ?
                new ObjectParameter("ReportTypeCode", reportTypeCode) :
                new ObjectParameter("ReportTypeCode", typeof(string));
    
            var reportTypeNameParameter = reportTypeName != null ?
                new ObjectParameter("ReportTypeName", reportTypeName) :
                new ObjectParameter("ReportTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ReportType", reportTypeCodeParameter, reportTypeNameParameter, commentParameter, currentModificationByParameter, reportTypeID);
        }
    
        public virtual int usp_IsExists_ReportType(string reportTypeCode, string reportTypeName, string comment, ObjectParameter reportTypeID)
        {
            var reportTypeCodeParameter = reportTypeCode != null ?
                new ObjectParameter("ReportTypeCode", reportTypeCode) :
                new ObjectParameter("ReportTypeCode", typeof(string));
    
            var reportTypeNameParameter = reportTypeName != null ?
                new ObjectParameter("ReportTypeName", reportTypeName) :
                new ObjectParameter("ReportTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ReportType", reportTypeCodeParameter, reportTypeNameParameter, commentParameter, reportTypeID);
        }
    
        public virtual int usp_Update_ReportType(string reportTypeCode, string reportTypeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter reportTypeID)
        {
            var reportTypeCodeParameter = reportTypeCode != null ?
                new ObjectParameter("ReportTypeCode", reportTypeCode) :
                new ObjectParameter("ReportTypeCode", typeof(string));
    
            var reportTypeNameParameter = reportTypeName != null ?
                new ObjectParameter("ReportTypeName", reportTypeName) :
                new ObjectParameter("ReportTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ReportType", reportTypeCodeParameter, reportTypeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, reportTypeID);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Insurance_Result> usp_GetAutoComplete_Insurance(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Insurance_Result>("usp_GetAutoComplete_Insurance", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_InsuranceType_Result> usp_GetAutoComplete_InsuranceType(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_InsuranceType_Result>("usp_GetAutoComplete_InsuranceType", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Relationship_Result> usp_GetAutoComplete_Relationship(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Relationship_Result>("usp_GetAutoComplete_Relationship", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Insurance_Result> usp_GetByAZ_Insurance(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Insurance_Result>("usp_GetByAZ_Insurance", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByInsuranceTypeID_InsuranceType_Result> usp_GetByInsuranceTypeID_InsuranceType(Nullable<long> insuranceID)
        {
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByInsuranceTypeID_InsuranceType_Result>("usp_GetByInsuranceTypeID_InsuranceType", insuranceIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatientID_Insurance_Result> usp_GetByPatientID_Insurance(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatientID_Insurance_Result>("usp_GetByPatientID_Insurance", patientIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Insurance_Result> usp_GetByPkId_Insurance(Nullable<int> insuranceID, Nullable<bool> isActive)
        {
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Insurance_Result>("usp_GetByPkId_Insurance", insuranceIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_InsuranceType_Result> usp_GetByPkId_InsuranceType(Nullable<byte> insuranceTypeID, Nullable<bool> isActive)
        {
            var insuranceTypeIDParameter = insuranceTypeID.HasValue ?
                new ObjectParameter("InsuranceTypeID", insuranceTypeID) :
                new ObjectParameter("InsuranceTypeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_InsuranceType_Result>("usp_GetByPkId_InsuranceType", insuranceTypeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Relationship_Result> usp_GetByPkId_Relationship(Nullable<byte> relationshipID, Nullable<bool> isActive)
        {
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Relationship_Result>("usp_GetByPkId_Relationship", relationshipIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkIdInsuranceName_Insurance_Result> usp_GetByPkIdInsuranceName_Insurance(Nullable<int> insuranceID, Nullable<bool> isActive)
        {
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkIdInsuranceName_Insurance_Result>("usp_GetByPkIdInsuranceName_Insurance", insuranceIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkIdRelationshipName_Relationship_Result> usp_GetByPkIdRelationshipName_Relationship(Nullable<byte> relationshipID, Nullable<bool> isActive)
        {
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkIdRelationshipName_Relationship_Result>("usp_GetByPkIdRelationshipName_Relationship", relationshipIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByRelationshipName_Relationship_Result> usp_GetByRelationshipName_Relationship(string relationshipCode, Nullable<bool> isActive)
        {
            var relationshipCodeParameter = relationshipCode != null ?
                new ObjectParameter("RelationshipCode", relationshipCode) :
                new ObjectParameter("RelationshipCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByRelationshipName_Relationship_Result>("usp_GetByRelationshipName_Relationship", relationshipCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Insurance_Result> usp_GetBySearch_Insurance(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Insurance_Result>("usp_GetBySearch_Insurance", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_InsuranceType_Result> usp_GetBySearch_InsuranceType(string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_InsuranceType_Result>("usp_GetBySearch_InsuranceType", orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Relationship_Result> usp_GetBySearch_Relationship(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Relationship_Result>("usp_GetBySearch_Relationship", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Insurance_Result> usp_GetIDAutoComplete_Insurance(string insuranceCode)
        {
            var insuranceCodeParameter = insuranceCode != null ?
                new ObjectParameter("InsuranceCode", insuranceCode) :
                new ObjectParameter("InsuranceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Insurance_Result>("usp_GetIDAutoComplete_Insurance", insuranceCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_InsuranceType_Result> usp_GetIDAutoComplete_InsuranceType(string insuranceTypeCode)
        {
            var insuranceTypeCodeParameter = insuranceTypeCode != null ?
                new ObjectParameter("InsuranceTypeCode", insuranceTypeCode) :
                new ObjectParameter("InsuranceTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_InsuranceType_Result>("usp_GetIDAutoComplete_InsuranceType", insuranceTypeCodeParameter);
        }
    
        public virtual int usp_Insert_Insurance(string insuranceCode, string insuranceName, string payerID, Nullable<byte> insuranceTypeID, Nullable<int> eDIReceiverID, Nullable<byte> printPinID, Nullable<byte> patientPrintSignID, Nullable<byte> insuredPrintSignID, Nullable<byte> physicianPrintSignID, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string comment, Nullable<long> currentModificationBy, ObjectParameter insuranceID)
        {
            var insuranceCodeParameter = insuranceCode != null ?
                new ObjectParameter("InsuranceCode", insuranceCode) :
                new ObjectParameter("InsuranceCode", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var payerIDParameter = payerID != null ?
                new ObjectParameter("PayerID", payerID) :
                new ObjectParameter("PayerID", typeof(string));
    
            var insuranceTypeIDParameter = insuranceTypeID.HasValue ?
                new ObjectParameter("InsuranceTypeID", insuranceTypeID) :
                new ObjectParameter("InsuranceTypeID", typeof(byte));
    
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var printPinIDParameter = printPinID.HasValue ?
                new ObjectParameter("PrintPinID", printPinID) :
                new ObjectParameter("PrintPinID", typeof(byte));
    
            var patientPrintSignIDParameter = patientPrintSignID.HasValue ?
                new ObjectParameter("PatientPrintSignID", patientPrintSignID) :
                new ObjectParameter("PatientPrintSignID", typeof(byte));
    
            var insuredPrintSignIDParameter = insuredPrintSignID.HasValue ?
                new ObjectParameter("InsuredPrintSignID", insuredPrintSignID) :
                new ObjectParameter("InsuredPrintSignID", typeof(byte));
    
            var physicianPrintSignIDParameter = physicianPrintSignID.HasValue ?
                new ObjectParameter("PhysicianPrintSignID", physicianPrintSignID) :
                new ObjectParameter("PhysicianPrintSignID", typeof(byte));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Insurance", insuranceCodeParameter, insuranceNameParameter, payerIDParameter, insuranceTypeIDParameter, eDIReceiverIDParameter, printPinIDParameter, patientPrintSignIDParameter, insuredPrintSignIDParameter, physicianPrintSignIDParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, currentModificationByParameter, insuranceID);
        }
    
        public virtual int usp_Insert_InsuranceType(string insuranceTypeCode, string insuranceTypeName, string comment, Nullable<long> currentModificationBy, ObjectParameter insuranceTypeID)
        {
            var insuranceTypeCodeParameter = insuranceTypeCode != null ?
                new ObjectParameter("InsuranceTypeCode", insuranceTypeCode) :
                new ObjectParameter("InsuranceTypeCode", typeof(string));
    
            var insuranceTypeNameParameter = insuranceTypeName != null ?
                new ObjectParameter("InsuranceTypeName", insuranceTypeName) :
                new ObjectParameter("InsuranceTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_InsuranceType", insuranceTypeCodeParameter, insuranceTypeNameParameter, commentParameter, currentModificationByParameter, insuranceTypeID);
        }
    
        public virtual int usp_Insert_Relationship(string relationshipCode, string relationshipName, string comment, Nullable<long> currentModificationBy, ObjectParameter relationshipID)
        {
            var relationshipCodeParameter = relationshipCode != null ?
                new ObjectParameter("RelationshipCode", relationshipCode) :
                new ObjectParameter("RelationshipCode", typeof(string));
    
            var relationshipNameParameter = relationshipName != null ?
                new ObjectParameter("RelationshipName", relationshipName) :
                new ObjectParameter("RelationshipName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Relationship", relationshipCodeParameter, relationshipNameParameter, commentParameter, currentModificationByParameter, relationshipID);
        }
    
        public virtual int usp_IsExists_Insurance(string insuranceCode, string insuranceName, string payerID, Nullable<byte> insuranceTypeID, Nullable<int> eDIReceiverID, Nullable<byte> printPinID, Nullable<byte> patientPrintSignID, Nullable<byte> insuredPrintSignID, Nullable<byte> physicianPrintSignID, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string comment, ObjectParameter insuranceID)
        {
            var insuranceCodeParameter = insuranceCode != null ?
                new ObjectParameter("InsuranceCode", insuranceCode) :
                new ObjectParameter("InsuranceCode", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var payerIDParameter = payerID != null ?
                new ObjectParameter("PayerID", payerID) :
                new ObjectParameter("PayerID", typeof(string));
    
            var insuranceTypeIDParameter = insuranceTypeID.HasValue ?
                new ObjectParameter("InsuranceTypeID", insuranceTypeID) :
                new ObjectParameter("InsuranceTypeID", typeof(byte));
    
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var printPinIDParameter = printPinID.HasValue ?
                new ObjectParameter("PrintPinID", printPinID) :
                new ObjectParameter("PrintPinID", typeof(byte));
    
            var patientPrintSignIDParameter = patientPrintSignID.HasValue ?
                new ObjectParameter("PatientPrintSignID", patientPrintSignID) :
                new ObjectParameter("PatientPrintSignID", typeof(byte));
    
            var insuredPrintSignIDParameter = insuredPrintSignID.HasValue ?
                new ObjectParameter("InsuredPrintSignID", insuredPrintSignID) :
                new ObjectParameter("InsuredPrintSignID", typeof(byte));
    
            var physicianPrintSignIDParameter = physicianPrintSignID.HasValue ?
                new ObjectParameter("PhysicianPrintSignID", physicianPrintSignID) :
                new ObjectParameter("PhysicianPrintSignID", typeof(byte));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Insurance", insuranceCodeParameter, insuranceNameParameter, payerIDParameter, insuranceTypeIDParameter, eDIReceiverIDParameter, printPinIDParameter, patientPrintSignIDParameter, insuredPrintSignIDParameter, physicianPrintSignIDParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, insuranceID);
        }
    
        public virtual int usp_IsExists_InsuranceType(string insuranceTypeCode, string insuranceTypeName, string comment, ObjectParameter insuranceTypeID)
        {
            var insuranceTypeCodeParameter = insuranceTypeCode != null ?
                new ObjectParameter("InsuranceTypeCode", insuranceTypeCode) :
                new ObjectParameter("InsuranceTypeCode", typeof(string));
    
            var insuranceTypeNameParameter = insuranceTypeName != null ?
                new ObjectParameter("InsuranceTypeName", insuranceTypeName) :
                new ObjectParameter("InsuranceTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_InsuranceType", insuranceTypeCodeParameter, insuranceTypeNameParameter, commentParameter, insuranceTypeID);
        }
    
        public virtual int usp_IsExists_Relationship(string relationshipCode, string relationshipName, string comment, ObjectParameter relationshipID)
        {
            var relationshipCodeParameter = relationshipCode != null ?
                new ObjectParameter("RelationshipCode", relationshipCode) :
                new ObjectParameter("RelationshipCode", typeof(string));
    
            var relationshipNameParameter = relationshipName != null ?
                new ObjectParameter("RelationshipName", relationshipName) :
                new ObjectParameter("RelationshipName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Relationship", relationshipCodeParameter, relationshipNameParameter, commentParameter, relationshipID);
        }
    
        public virtual int usp_Update_Insurance(string insuranceCode, string insuranceName, string payerID, Nullable<byte> insuranceTypeID, Nullable<int> eDIReceiverID, Nullable<byte> printPinID, Nullable<byte> patientPrintSignID, Nullable<byte> insuredPrintSignID, Nullable<byte> physicianPrintSignID, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, Nullable<int> phoneNumberExtn, string secondaryPhoneNumber, Nullable<int> secondaryPhoneNumberExtn, string email, string secondaryEmail, string fax, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter insuranceID)
        {
            var insuranceCodeParameter = insuranceCode != null ?
                new ObjectParameter("InsuranceCode", insuranceCode) :
                new ObjectParameter("InsuranceCode", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var payerIDParameter = payerID != null ?
                new ObjectParameter("PayerID", payerID) :
                new ObjectParameter("PayerID", typeof(string));
    
            var insuranceTypeIDParameter = insuranceTypeID.HasValue ?
                new ObjectParameter("InsuranceTypeID", insuranceTypeID) :
                new ObjectParameter("InsuranceTypeID", typeof(byte));
    
            var eDIReceiverIDParameter = eDIReceiverID.HasValue ?
                new ObjectParameter("EDIReceiverID", eDIReceiverID) :
                new ObjectParameter("EDIReceiverID", typeof(int));
    
            var printPinIDParameter = printPinID.HasValue ?
                new ObjectParameter("PrintPinID", printPinID) :
                new ObjectParameter("PrintPinID", typeof(byte));
    
            var patientPrintSignIDParameter = patientPrintSignID.HasValue ?
                new ObjectParameter("PatientPrintSignID", patientPrintSignID) :
                new ObjectParameter("PatientPrintSignID", typeof(byte));
    
            var insuredPrintSignIDParameter = insuredPrintSignID.HasValue ?
                new ObjectParameter("InsuredPrintSignID", insuredPrintSignID) :
                new ObjectParameter("InsuredPrintSignID", typeof(byte));
    
            var physicianPrintSignIDParameter = physicianPrintSignID.HasValue ?
                new ObjectParameter("PhysicianPrintSignID", physicianPrintSignID) :
                new ObjectParameter("PhysicianPrintSignID", typeof(byte));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberExtnParameter = phoneNumberExtn.HasValue ?
                new ObjectParameter("PhoneNumberExtn", phoneNumberExtn) :
                new ObjectParameter("PhoneNumberExtn", typeof(int));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var secondaryPhoneNumberExtnParameter = secondaryPhoneNumberExtn.HasValue ?
                new ObjectParameter("SecondaryPhoneNumberExtn", secondaryPhoneNumberExtn) :
                new ObjectParameter("SecondaryPhoneNumberExtn", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Insurance", insuranceCodeParameter, insuranceNameParameter, payerIDParameter, insuranceTypeIDParameter, eDIReceiverIDParameter, printPinIDParameter, patientPrintSignIDParameter, insuredPrintSignIDParameter, physicianPrintSignIDParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, phoneNumberExtnParameter, secondaryPhoneNumberParameter, secondaryPhoneNumberExtnParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, insuranceID);
        }
    
        public virtual int usp_Update_InsuranceType(string insuranceTypeCode, string insuranceTypeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter insuranceTypeID)
        {
            var insuranceTypeCodeParameter = insuranceTypeCode != null ?
                new ObjectParameter("InsuranceTypeCode", insuranceTypeCode) :
                new ObjectParameter("InsuranceTypeCode", typeof(string));
    
            var insuranceTypeNameParameter = insuranceTypeName != null ?
                new ObjectParameter("InsuranceTypeName", insuranceTypeName) :
                new ObjectParameter("InsuranceTypeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_InsuranceType", insuranceTypeCodeParameter, insuranceTypeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, insuranceTypeID);
        }
    
        public virtual int usp_Update_Relationship(string relationshipCode, string relationshipName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter relationshipID)
        {
            var relationshipCodeParameter = relationshipCode != null ?
                new ObjectParameter("RelationshipCode", relationshipCode) :
                new ObjectParameter("RelationshipCode", typeof(string));
    
            var relationshipNameParameter = relationshipName != null ?
                new ObjectParameter("RelationshipName", relationshipName) :
                new ObjectParameter("RelationshipName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Relationship", relationshipCodeParameter, relationshipNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, relationshipID);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_City_Result> usp_GetAutoComplete_City(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_City_Result>("usp_GetAutoComplete_City", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Country_Result> usp_GetAutoComplete_Country(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Country_Result>("usp_GetAutoComplete_Country", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_County_Result> usp_GetAutoComplete_County(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_County_Result>("usp_GetAutoComplete_County", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_DocumentCategory_Result> usp_GetAutoComplete_DocumentCategory(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_DocumentCategory_Result>("usp_GetAutoComplete_DocumentCategory", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_State_Result> usp_GetAutoComplete_State(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_State_Result>("usp_GetAutoComplete_State", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_City_Result> usp_GetByAZ_City(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_City_Result>("usp_GetByAZ_City", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Country_Result> usp_GetByAZ_Country(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Country_Result>("usp_GetByAZ_Country", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_County_Result> usp_GetByAZ_County(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_County_Result>("usp_GetByAZ_County", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_State_Result> usp_GetByAZ_State(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_State_Result>("usp_GetByAZ_State", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_City_Result> usp_GetByPkId_City(Nullable<int> cityID, Nullable<bool> isActive)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_City_Result>("usp_GetByPkId_City", cityIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ClaimStatus_Result> usp_GetByPkId_ClaimStatus(Nullable<byte> claimStatusID, Nullable<bool> isActive)
        {
            var claimStatusIDParameter = claimStatusID.HasValue ?
                new ObjectParameter("ClaimStatusID", claimStatusID) :
                new ObjectParameter("ClaimStatusID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ClaimStatus_Result>("usp_GetByPkId_ClaimStatus", claimStatusIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Country_Result> usp_GetByPkId_Country(Nullable<int> countryID, Nullable<bool> isActive)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Country_Result>("usp_GetByPkId_Country", countryIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_County_Result> usp_GetByPkId_County(Nullable<int> countyID, Nullable<bool> isActive)
        {
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_County_Result>("usp_GetByPkId_County", countyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_DocumentCategory_Result> usp_GetByPkId_DocumentCategory(Nullable<byte> documentCategoryID, Nullable<bool> isActive)
        {
            var documentCategoryIDParameter = documentCategoryID.HasValue ?
                new ObjectParameter("DocumentCategoryID", documentCategoryID) :
                new ObjectParameter("DocumentCategoryID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_DocumentCategory_Result>("usp_GetByPkId_DocumentCategory", documentCategoryIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_State_Result> usp_GetByPkId_State(Nullable<int> stateID, Nullable<bool> isActive)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_State_Result>("usp_GetByPkId_State", stateIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkIdCountyName_County_Result> usp_GetByPkIdCountyName_County(Nullable<int> countyID, Nullable<bool> isActive)
        {
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkIdCountyName_County_Result>("usp_GetByPkIdCountyName_County", countyIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkIdStateName_State_Result> usp_GetByPkIdStateName_State(Nullable<int> stateID, Nullable<bool> isActive)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkIdStateName_State_Result>("usp_GetByPkIdStateName_State", stateIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_City_Result> usp_GetBySearch_City(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_City_Result>("usp_GetBySearch_City", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_ClaimStatus_Result> usp_GetBySearch_ClaimStatus(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_ClaimStatus_Result>("usp_GetBySearch_ClaimStatus", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Country_Result> usp_GetBySearch_Country(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Country_Result>("usp_GetBySearch_Country", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_County_Result> usp_GetBySearch_County(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_County_Result>("usp_GetBySearch_County", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_DocumentCategory_Result> usp_GetBySearch_DocumentCategory(string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_DocumentCategory_Result>("usp_GetBySearch_DocumentCategory", orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_State_Result> usp_GetBySearch_State(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_State_Result>("usp_GetBySearch_State", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetDocumentCategoryByID_DocumentCategory_Result> usp_GetDocumentCategoryByID_DocumentCategory(Nullable<long> documentCategoryID, Nullable<bool> isActive)
        {
            var documentCategoryIDParameter = documentCategoryID.HasValue ?
                new ObjectParameter("DocumentCategoryID", documentCategoryID) :
                new ObjectParameter("DocumentCategoryID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDocumentCategoryByID_DocumentCategory_Result>("usp_GetDocumentCategoryByID_DocumentCategory", documentCategoryIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_City_Result> usp_GetIDAutoComplete_City(string zipCode)
        {
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_City_Result>("usp_GetIDAutoComplete_City", zipCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Country_Result> usp_GetIDAutoComplete_Country(string countryCode)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Country_Result>("usp_GetIDAutoComplete_Country", countryCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_County_Result> usp_GetIDAutoComplete_County(string countyCode)
        {
            var countyCodeParameter = countyCode != null ?
                new ObjectParameter("CountyCode", countyCode) :
                new ObjectParameter("CountyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_County_Result>("usp_GetIDAutoComplete_County", countyCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutocomplete_DocumentCategory_Result> usp_GetIDAutocomplete_DocumentCategory(string documentCategoryCode, Nullable<bool> isActive)
        {
            var documentCategoryCodeParameter = documentCategoryCode != null ?
                new ObjectParameter("DocumentCategoryCode", documentCategoryCode) :
                new ObjectParameter("DocumentCategoryCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutocomplete_DocumentCategory_Result>("usp_GetIDAutocomplete_DocumentCategory", documentCategoryCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_State_Result> usp_GetIDAutoComplete_State(string stateCode)
        {
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_State_Result>("usp_GetIDAutoComplete_State", stateCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_City_Result> usp_GetNameByID_City(Nullable<int> cityID, Nullable<bool> isActive)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_City_Result>("usp_GetNameByID_City", cityIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameById_Country_Result> usp_GetNameById_Country(Nullable<int> countryID, Nullable<bool> isActive)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameById_Country_Result>("usp_GetNameById_Country", countryIDParameter, isActiveParameter);
        }
    
        public virtual int usp_Insert_City(string cityCode, string zipCode, string cityName, string comment, Nullable<long> currentModificationBy, ObjectParameter cityID)
        {
            var cityCodeParameter = cityCode != null ?
                new ObjectParameter("CityCode", cityCode) :
                new ObjectParameter("CityCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_City", cityCodeParameter, zipCodeParameter, cityNameParameter, commentParameter, currentModificationByParameter, cityID);
        }
    
        public virtual int usp_Insert_ClaimStatus(string claimStatusCode, string claimStatusName, string comment, Nullable<long> currentModificationBy, ObjectParameter claimStatusID)
        {
            var claimStatusCodeParameter = claimStatusCode != null ?
                new ObjectParameter("ClaimStatusCode", claimStatusCode) :
                new ObjectParameter("ClaimStatusCode", typeof(string));
    
            var claimStatusNameParameter = claimStatusName != null ?
                new ObjectParameter("ClaimStatusName", claimStatusName) :
                new ObjectParameter("ClaimStatusName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ClaimStatus", claimStatusCodeParameter, claimStatusNameParameter, commentParameter, currentModificationByParameter, claimStatusID);
        }
    
        public virtual int usp_Insert_Country(string countryCode, string countryName, string comment, Nullable<long> currentModificationBy, ObjectParameter countryID)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Country", countryCodeParameter, countryNameParameter, commentParameter, currentModificationByParameter, countryID);
        }
    
        public virtual int usp_Insert_County(string countyCode, string countyName, string comment, Nullable<long> currentModificationBy, ObjectParameter countyID)
        {
            var countyCodeParameter = countyCode != null ?
                new ObjectParameter("CountyCode", countyCode) :
                new ObjectParameter("CountyCode", typeof(string));
    
            var countyNameParameter = countyName != null ?
                new ObjectParameter("CountyName", countyName) :
                new ObjectParameter("CountyName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_County", countyCodeParameter, countyNameParameter, commentParameter, currentModificationByParameter, countyID);
        }
    
        public virtual int usp_Insert_DocumentCategory(string documentCategoryCode, string documentCategoryName, Nullable<bool> isInPatientRelated, string comment, Nullable<long> currentModificationBy, ObjectParameter documentCategoryID)
        {
            var documentCategoryCodeParameter = documentCategoryCode != null ?
                new ObjectParameter("DocumentCategoryCode", documentCategoryCode) :
                new ObjectParameter("DocumentCategoryCode", typeof(string));
    
            var documentCategoryNameParameter = documentCategoryName != null ?
                new ObjectParameter("DocumentCategoryName", documentCategoryName) :
                new ObjectParameter("DocumentCategoryName", typeof(string));
    
            var isInPatientRelatedParameter = isInPatientRelated.HasValue ?
                new ObjectParameter("IsInPatientRelated", isInPatientRelated) :
                new ObjectParameter("IsInPatientRelated", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_DocumentCategory", documentCategoryCodeParameter, documentCategoryNameParameter, isInPatientRelatedParameter, commentParameter, currentModificationByParameter, documentCategoryID);
        }
    
        public virtual int usp_Insert_State(string stateCode, string stateName, string comment, Nullable<long> currentModificationBy, ObjectParameter stateID)
        {
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_State", stateCodeParameter, stateNameParameter, commentParameter, currentModificationByParameter, stateID);
        }
    
        public virtual int usp_IsExists_City(string cityCode, string zipCode, string cityName, string comment, ObjectParameter cityID)
        {
            var cityCodeParameter = cityCode != null ?
                new ObjectParameter("CityCode", cityCode) :
                new ObjectParameter("CityCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_City", cityCodeParameter, zipCodeParameter, cityNameParameter, commentParameter, cityID);
        }
    
        public virtual int usp_IsExists_ClaimStatus(string claimStatusCode, string claimStatusName, string comment, ObjectParameter claimStatusID)
        {
            var claimStatusCodeParameter = claimStatusCode != null ?
                new ObjectParameter("ClaimStatusCode", claimStatusCode) :
                new ObjectParameter("ClaimStatusCode", typeof(string));
    
            var claimStatusNameParameter = claimStatusName != null ?
                new ObjectParameter("ClaimStatusName", claimStatusName) :
                new ObjectParameter("ClaimStatusName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ClaimStatus", claimStatusCodeParameter, claimStatusNameParameter, commentParameter, claimStatusID);
        }
    
        public virtual int usp_IsExists_Country(string countryCode, string countryName, string comment, ObjectParameter countryID)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Country", countryCodeParameter, countryNameParameter, commentParameter, countryID);
        }
    
        public virtual int usp_IsExists_County(string countyCode, string countyName, string comment, ObjectParameter countyID)
        {
            var countyCodeParameter = countyCode != null ?
                new ObjectParameter("CountyCode", countyCode) :
                new ObjectParameter("CountyCode", typeof(string));
    
            var countyNameParameter = countyName != null ?
                new ObjectParameter("CountyName", countyName) :
                new ObjectParameter("CountyName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_County", countyCodeParameter, countyNameParameter, commentParameter, countyID);
        }
    
        public virtual int usp_IsExists_DocumentCategory(string documentCategoryCode, string documentCategoryName, Nullable<bool> isInPatientRelated, string comment, ObjectParameter documentCategoryID)
        {
            var documentCategoryCodeParameter = documentCategoryCode != null ?
                new ObjectParameter("DocumentCategoryCode", documentCategoryCode) :
                new ObjectParameter("DocumentCategoryCode", typeof(string));
    
            var documentCategoryNameParameter = documentCategoryName != null ?
                new ObjectParameter("DocumentCategoryName", documentCategoryName) :
                new ObjectParameter("DocumentCategoryName", typeof(string));
    
            var isInPatientRelatedParameter = isInPatientRelated.HasValue ?
                new ObjectParameter("IsInPatientRelated", isInPatientRelated) :
                new ObjectParameter("IsInPatientRelated", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_DocumentCategory", documentCategoryCodeParameter, documentCategoryNameParameter, isInPatientRelatedParameter, commentParameter, documentCategoryID);
        }
    
        public virtual int usp_IsExists_State(string stateCode, string stateName, string comment, ObjectParameter stateID)
        {
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_State", stateCodeParameter, stateNameParameter, commentParameter, stateID);
        }
    
        public virtual int usp_Update_City(string cityCode, string zipCode, string cityName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter cityID)
        {
            var cityCodeParameter = cityCode != null ?
                new ObjectParameter("CityCode", cityCode) :
                new ObjectParameter("CityCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_City", cityCodeParameter, zipCodeParameter, cityNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, cityID);
        }
    
        public virtual int usp_Update_ClaimStatus(string claimStatusCode, string claimStatusName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter claimStatusID)
        {
            var claimStatusCodeParameter = claimStatusCode != null ?
                new ObjectParameter("ClaimStatusCode", claimStatusCode) :
                new ObjectParameter("ClaimStatusCode", typeof(string));
    
            var claimStatusNameParameter = claimStatusName != null ?
                new ObjectParameter("ClaimStatusName", claimStatusName) :
                new ObjectParameter("ClaimStatusName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ClaimStatus", claimStatusCodeParameter, claimStatusNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, claimStatusID);
        }
    
        public virtual int usp_Update_Country(string countryCode, string countryName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter countryID)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Country", countryCodeParameter, countryNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, countryID);
        }
    
        public virtual int usp_Update_County(string countyCode, string countyName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter countyID)
        {
            var countyCodeParameter = countyCode != null ?
                new ObjectParameter("CountyCode", countyCode) :
                new ObjectParameter("CountyCode", typeof(string));
    
            var countyNameParameter = countyName != null ?
                new ObjectParameter("CountyName", countyName) :
                new ObjectParameter("CountyName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_County", countyCodeParameter, countyNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, countyID);
        }
    
        public virtual int usp_Update_DocumentCategory(string documentCategoryCode, string documentCategoryName, Nullable<bool> isInPatientRelated, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter documentCategoryID)
        {
            var documentCategoryCodeParameter = documentCategoryCode != null ?
                new ObjectParameter("DocumentCategoryCode", documentCategoryCode) :
                new ObjectParameter("DocumentCategoryCode", typeof(string));
    
            var documentCategoryNameParameter = documentCategoryName != null ?
                new ObjectParameter("DocumentCategoryName", documentCategoryName) :
                new ObjectParameter("DocumentCategoryName", typeof(string));
    
            var isInPatientRelatedParameter = isInPatientRelated.HasValue ?
                new ObjectParameter("IsInPatientRelated", isInPatientRelated) :
                new ObjectParameter("IsInPatientRelated", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_DocumentCategory", documentCategoryCodeParameter, documentCategoryNameParameter, isInPatientRelatedParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, documentCategoryID);
        }
    
        public virtual int usp_Update_State(string stateCode, string stateName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter stateID)
        {
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_State", stateCodeParameter, stateNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, stateID);
        }
    
        public virtual ObjectResult<usp_GetAgentWiseSummary_PatientVisit_Result> usp_GetAgentWiseSummary_PatientVisit(Nullable<long> userID, Nullable<byte> nEW_CLAIM, Nullable<byte> bA_HOLDED, Nullable<byte> cREATED_CLAIM, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> rEJECTED_CLAIM, Nullable<byte> rEJECTED_CLAIM_NIT, Nullable<byte> aCCEPTED_CLAIM)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var bA_HOLDEDParameter = bA_HOLDED.HasValue ?
                new ObjectParameter("BA_HOLDED", bA_HOLDED) :
                new ObjectParameter("BA_HOLDED", typeof(byte));
    
            var cREATED_CLAIMParameter = cREATED_CLAIM.HasValue ?
                new ObjectParameter("CREATED_CLAIM", cREATED_CLAIM) :
                new ObjectParameter("CREATED_CLAIM", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var rEJECTED_CLAIMParameter = rEJECTED_CLAIM.HasValue ?
                new ObjectParameter("REJECTED_CLAIM", rEJECTED_CLAIM) :
                new ObjectParameter("REJECTED_CLAIM", typeof(byte));
    
            var rEJECTED_CLAIM_NITParameter = rEJECTED_CLAIM_NIT.HasValue ?
                new ObjectParameter("REJECTED_CLAIM_NIT", rEJECTED_CLAIM_NIT) :
                new ObjectParameter("REJECTED_CLAIM_NIT", typeof(byte));
    
            var aCCEPTED_CLAIMParameter = aCCEPTED_CLAIM.HasValue ?
                new ObjectParameter("ACCEPTED_CLAIM", aCCEPTED_CLAIM) :
                new ObjectParameter("ACCEPTED_CLAIM", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAgentWiseSummary_PatientVisit_Result>("usp_GetAgentWiseSummary_PatientVisit", userIDParameter, nEW_CLAIMParameter, bA_HOLDEDParameter, cREATED_CLAIMParameter, rEADY_TO_SEND_CLAIMParameter, eDI_FILE_CREATEDParameter, rEJECTED_CLAIMParameter, rEJECTED_CLAIM_NITParameter, aCCEPTED_CLAIMParameter);
        }
    
        public virtual ObjectResult<usp_GetAgentWiseSummaryNIT_PatientVisit_Result> usp_GetAgentWiseSummaryNIT_PatientVisit(Nullable<int> userID, string nIT_StatusIDs)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nIT_StatusIDsParameter = nIT_StatusIDs != null ?
                new ObjectParameter("NIT_StatusIDs", nIT_StatusIDs) :
                new ObjectParameter("NIT_StatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAgentWiseSummaryNIT_PatientVisit_Result>("usp_GetAgentWiseSummaryNIT_PatientVisit", userIDParameter, nIT_StatusIDsParameter);
        }
    
        public virtual ObjectResult<usp_GetAgentWiseVisit_PatientVisit_Result> usp_GetAgentWiseVisit_PatientVisit(Nullable<int> userID, string desc, string dayCount, Nullable<byte> nEW_CLAIM, Nullable<byte> bA_HOLDED, Nullable<byte> cREATED_CLAIM, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> rEJECTED_CLAIM, Nullable<byte> rEJECTED_CLAIM_NIT, Nullable<byte> aCCEPTED_CLAIM, string nIT_StatusIDs, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var bA_HOLDEDParameter = bA_HOLDED.HasValue ?
                new ObjectParameter("BA_HOLDED", bA_HOLDED) :
                new ObjectParameter("BA_HOLDED", typeof(byte));
    
            var cREATED_CLAIMParameter = cREATED_CLAIM.HasValue ?
                new ObjectParameter("CREATED_CLAIM", cREATED_CLAIM) :
                new ObjectParameter("CREATED_CLAIM", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var rEJECTED_CLAIMParameter = rEJECTED_CLAIM.HasValue ?
                new ObjectParameter("REJECTED_CLAIM", rEJECTED_CLAIM) :
                new ObjectParameter("REJECTED_CLAIM", typeof(byte));
    
            var rEJECTED_CLAIM_NITParameter = rEJECTED_CLAIM_NIT.HasValue ?
                new ObjectParameter("REJECTED_CLAIM_NIT", rEJECTED_CLAIM_NIT) :
                new ObjectParameter("REJECTED_CLAIM_NIT", typeof(byte));
    
            var aCCEPTED_CLAIMParameter = aCCEPTED_CLAIM.HasValue ?
                new ObjectParameter("ACCEPTED_CLAIM", aCCEPTED_CLAIM) :
                new ObjectParameter("ACCEPTED_CLAIM", typeof(byte));
    
            var nIT_StatusIDsParameter = nIT_StatusIDs != null ?
                new ObjectParameter("NIT_StatusIDs", nIT_StatusIDs) :
                new ObjectParameter("NIT_StatusIDs", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAgentWiseVisit_PatientVisit_Result>("usp_GetAgentWiseVisit_PatientVisit", userIDParameter, descParameter, dayCountParameter, nEW_CLAIMParameter, bA_HOLDEDParameter, cREATED_CLAIMParameter, rEADY_TO_SEND_CLAIMParameter, eDI_FILE_CREATEDParameter, rEJECTED_CLAIMParameter, rEJECTED_CLAIM_NITParameter, aCCEPTED_CLAIMParameter, nIT_StatusIDsParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetAgentWiseVisitPdf_PatientVisit_Result> usp_GetAgentWiseVisitPdf_PatientVisit(Nullable<int> userID, string desc, string dayCount, Nullable<byte> nEW_CLAIM, Nullable<byte> bA_HOLDED, Nullable<byte> cREATED_CLAIM, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> rEJECTED_CLAIM, Nullable<byte> rEJECTED_CLAIM_NIT, Nullable<byte> aCCEPTED_CLAIM, string nIT_StatusIDs)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var bA_HOLDEDParameter = bA_HOLDED.HasValue ?
                new ObjectParameter("BA_HOLDED", bA_HOLDED) :
                new ObjectParameter("BA_HOLDED", typeof(byte));
    
            var cREATED_CLAIMParameter = cREATED_CLAIM.HasValue ?
                new ObjectParameter("CREATED_CLAIM", cREATED_CLAIM) :
                new ObjectParameter("CREATED_CLAIM", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var rEJECTED_CLAIMParameter = rEJECTED_CLAIM.HasValue ?
                new ObjectParameter("REJECTED_CLAIM", rEJECTED_CLAIM) :
                new ObjectParameter("REJECTED_CLAIM", typeof(byte));
    
            var rEJECTED_CLAIM_NITParameter = rEJECTED_CLAIM_NIT.HasValue ?
                new ObjectParameter("REJECTED_CLAIM_NIT", rEJECTED_CLAIM_NIT) :
                new ObjectParameter("REJECTED_CLAIM_NIT", typeof(byte));
    
            var aCCEPTED_CLAIMParameter = aCCEPTED_CLAIM.HasValue ?
                new ObjectParameter("ACCEPTED_CLAIM", aCCEPTED_CLAIM) :
                new ObjectParameter("ACCEPTED_CLAIM", typeof(byte));
    
            var nIT_StatusIDsParameter = nIT_StatusIDs != null ?
                new ObjectParameter("NIT_StatusIDs", nIT_StatusIDs) :
                new ObjectParameter("NIT_StatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAgentWiseVisitPdf_PatientVisit_Result>("usp_GetAgentWiseVisitPdf_PatientVisit", userIDParameter, descParameter, dayCountParameter, nEW_CLAIMParameter, bA_HOLDEDParameter, cREATED_CLAIMParameter, rEADY_TO_SEND_CLAIMParameter, eDI_FILE_CREATEDParameter, rEJECTED_CLAIMParameter, rEJECTED_CLAIM_NITParameter, aCCEPTED_CLAIMParameter, nIT_StatusIDsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_Patient_Result> usp_GetAutoComplete_Patient(Nullable<int> clinicID, string stats)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_Patient_Result>("usp_GetAutoComplete_Patient", clinicIDParameter, statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoCompleteVisit_Patient_Result> usp_GetAutoCompleteVisit_Patient(Nullable<int> clinicID, string stats)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoCompleteVisit_Patient_Result>("usp_GetAutoCompleteVisit_Patient", clinicIDParameter, statsParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_Patient_Result> usp_GetByAZ_Patient(Nullable<long> clinicID, string patientName, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(long));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_Patient_Result>("usp_GetByAZ_Patient", clinicIDParameter, patientNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_PatientDocument_Result> usp_GetByAZ_PatientDocument(string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_PatientDocument_Result>("usp_GetByAZ_PatientDocument", searchNameParameter, dateFromParameter, dateToParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_PatientHospitalization_Result> usp_GetByAZ_PatientHospitalization(Nullable<int> clinicTypeID, Nullable<int> clinicID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> isActive, string chartNumber, Nullable<long> patientID)
        {
            var clinicTypeIDParameter = clinicTypeID.HasValue ?
                new ObjectParameter("ClinicTypeID", clinicTypeID) :
                new ObjectParameter("ClinicTypeID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var chartNumberParameter = chartNumber != null ?
                new ObjectParameter("ChartNumber", chartNumber) :
                new ObjectParameter("ChartNumber", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_PatientHospitalization_Result>("usp_GetByAZ_PatientHospitalization", clinicTypeIDParameter, clinicIDParameter, dateFromParameter, dateToParameter, isActiveParameter, chartNumberParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_PatientVisit_Result> usp_GetByAZ_PatientVisit(Nullable<int> clinicID, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> patientID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_PatientVisit_Result>("usp_GetByAZ_PatientVisit", clinicIDParameter, searchNameParameter, dateFromParameter, dateToParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZCase_PatientVisit_Result> usp_GetByAZCase_PatientVisit(Nullable<int> userID, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZCase_PatientVisit_Result>("usp_GetByAZCase_PatientVisit", userIDParameter, searchNameParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZDashVisits_PatientVisit_Result> usp_GetByAZDashVisits_PatientVisit(Nullable<int> userID, string desc, string dayCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZDashVisits_PatientVisit_Result>("usp_GetByAZDashVisits_PatientVisit", userIDParameter, descParameter, dayCountParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZEDI_PatientVisit_Result> usp_GetByAZEDI_PatientVisit(Nullable<int> eDIFileID, Nullable<int> clinicID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string searchName)
        {
            var eDIFileIDParameter = eDIFileID.HasValue ?
                new ObjectParameter("EDIFileID", eDIFileID) :
                new ObjectParameter("EDIFileID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZEDI_PatientVisit_Result>("usp_GetByAZEDI_PatientVisit", eDIFileIDParameter, clinicIDParameter, dateFromParameter, dateToParameter, searchNameParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZRpt_Patient_Result> usp_GetByAZRpt_Patient(Nullable<int> clinicID, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZRpt_Patient_Result>("usp_GetByAZRpt_Patient", clinicIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByEDI_PatientVisit_Result> usp_GetByEDI_PatientVisit(Nullable<int> eDIFileID, Nullable<int> clinicID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var eDIFileIDParameter = eDIFileID.HasValue ?
                new ObjectParameter("EDIFileID", eDIFileID) :
                new ObjectParameter("EDIFileID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByEDI_PatientVisit_Result>("usp_GetByEDI_PatientVisit", eDIFileIDParameter, clinicIDParameter, dateFromParameter, dateToParameter, searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetByHospitalizationId_PatientVisit_Result> usp_GetByHospitalizationId_PatientVisit(Nullable<long> patientHospitalizationID, Nullable<System.DateTime> admittedOn, Nullable<System.DateTime> dischargedOn)
        {
            var patientHospitalizationIDParameter = patientHospitalizationID.HasValue ?
                new ObjectParameter("PatientHospitalizationID", patientHospitalizationID) :
                new ObjectParameter("PatientHospitalizationID", typeof(long));
    
            var admittedOnParameter = admittedOn.HasValue ?
                new ObjectParameter("AdmittedOn", admittedOn) :
                new ObjectParameter("AdmittedOn", typeof(System.DateTime));
    
            var dischargedOnParameter = dischargedOn.HasValue ?
                new ObjectParameter("DischargedOn", dischargedOn) :
                new ObjectParameter("DischargedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByHospitalizationId_PatientVisit_Result>("usp_GetByHospitalizationId_PatientVisit", patientHospitalizationIDParameter, admittedOnParameter, dischargedOnParameter);
        }
    
        public virtual ObjectResult<usp_GetByPatientID_PatientDocument_Result> usp_GetByPatientID_PatientDocument(Nullable<long> patientID, Nullable<bool> isActive)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPatientID_PatientDocument_Result>("usp_GetByPatientID_PatientDocument", patientIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_Patient_Result> usp_GetByPkId_Patient(Nullable<long> patientID, Nullable<bool> isActive)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_Patient_Result>("usp_GetByPkId_Patient", patientIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_PatientDocument_Result> usp_GetByPkId_PatientDocument(Nullable<long> patientDocumentID, Nullable<bool> isActive)
        {
            var patientDocumentIDParameter = patientDocumentID.HasValue ?
                new ObjectParameter("PatientDocumentID", patientDocumentID) :
                new ObjectParameter("PatientDocumentID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_PatientDocument_Result>("usp_GetByPkId_PatientDocument", patientDocumentIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_PatientHospitalization_Result> usp_GetByPkId_PatientHospitalization(Nullable<long> patientHospitalizationID, Nullable<bool> isActive)
        {
            var patientHospitalizationIDParameter = patientHospitalizationID.HasValue ?
                new ObjectParameter("PatientHospitalizationID", patientHospitalizationID) :
                new ObjectParameter("PatientHospitalizationID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_PatientHospitalization_Result>("usp_GetByPkId_PatientHospitalization", patientHospitalizationIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_PatientVisit_Result> usp_GetByPkId_PatientVisit(Nullable<long> patientVisitID, Nullable<bool> isActive)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_PatientVisit_Result>("usp_GetByPkId_PatientVisit", patientVisitIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_Patient_Result> usp_GetBySearch_Patient(Nullable<int> clinicID, string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_Patient_Result>("usp_GetBySearch_Patient", clinicIDParameter, searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_PatientDocument_Result> usp_GetBySearch_PatientDocument(string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_PatientDocument_Result>("usp_GetBySearch_PatientDocument", searchNameParameter, dateFromParameter, dateToParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_PatientHospitalization_Result> usp_GetBySearch_PatientHospitalization(Nullable<byte> clinicTypeID, Nullable<int> clinicID, string chartNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string startBy, Nullable<long> patientID, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var clinicTypeIDParameter = clinicTypeID.HasValue ?
                new ObjectParameter("ClinicTypeID", clinicTypeID) :
                new ObjectParameter("ClinicTypeID", typeof(byte));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var chartNumberParameter = chartNumber != null ?
                new ObjectParameter("ChartNumber", chartNumber) :
                new ObjectParameter("ChartNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_PatientHospitalization_Result>("usp_GetBySearch_PatientHospitalization", clinicTypeIDParameter, clinicIDParameter, chartNumberParameter, dateFromParameter, dateToParameter, startByParameter, patientIDParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_PatientVisit_Result> usp_GetBySearch_PatientVisit(Nullable<byte> statusFrom, Nullable<byte> statusTo, Nullable<int> clinicID, Nullable<long> patientID, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var statusFromParameter = statusFrom.HasValue ?
                new ObjectParameter("StatusFrom", statusFrom) :
                new ObjectParameter("StatusFrom", typeof(byte));
    
            var statusToParameter = statusTo.HasValue ?
                new ObjectParameter("StatusTo", statusTo) :
                new ObjectParameter("StatusTo", typeof(byte));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_PatientVisit_Result>("usp_GetBySearch_PatientVisit", statusFromParameter, statusToParameter, clinicIDParameter, patientIDParameter, searchNameParameter, dateFromParameter, dateToParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearchCase_PatientVisit_Result> usp_GetBySearchCase_PatientVisit(Nullable<int> userID, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearchCase_PatientVisit_Result>("usp_GetBySearchCase_PatientVisit", userIDParameter, searchNameParameter, dateFromParameter, dateToParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearchRpt_Patient_Result> usp_GetBySearchRpt_Patient(Nullable<int> clinicID, string startBy, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearchRpt_Patient_Result>("usp_GetBySearchRpt_Patient", clinicIDParameter, startByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByUserID_PatientVisit_Result> usp_GetByUserID_PatientVisit(Nullable<byte> roleID, Nullable<long> userID, Nullable<bool> isActive)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByUserID_PatientVisit_Result>("usp_GetByUserID_PatientVisit", roleIDParameter, userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetClaimAgent_PatientVisit_Result> usp_GetClaimAgent_PatientVisit(Nullable<int> clinicID, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClaimAgent_PatientVisit_Result>("usp_GetClaimAgent_PatientVisit", clinicIDParameter, searchNameParameter, dateFromParameter, dateToParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetClinicWiseSummary_PatientVisit_Result> usp_GetClinicWiseSummary_PatientVisit(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClinicWiseSummary_PatientVisit_Result>("usp_GetClinicWiseSummary_PatientVisit", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetClinicWiseSummaryNIT_PatientVisit_Result> usp_GetClinicWiseSummaryNIT_PatientVisit(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClinicWiseSummaryNIT_PatientVisit_Result>("usp_GetClinicWiseSummaryNIT_PatientVisit", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetClinicWiseVisit_PatientVisit_Result> usp_GetClinicWiseVisit_PatientVisit(Nullable<int> clinicID, string desc, string dayCount, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClinicWiseVisit_PatientVisit_Result>("usp_GetClinicWiseVisit_PatientVisit", clinicIDParameter, descParameter, dayCountParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetClinicWiseVisitpDF_PatientVisit_Result> usp_GetClinicWiseVisitpDF_PatientVisit(Nullable<int> clinicID, string desc, string dayCount)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetClinicWiseVisitpDF_PatientVisit_Result>("usp_GetClinicWiseVisitpDF_PatientVisit", clinicIDParameter, descParameter, dayCountParameter);
        }
    
        public virtual ObjectResult<usp_GetCount_PatientVisit_Result> usp_GetCount_PatientVisit(Nullable<int> clinicID, string statusIDs, Nullable<int> assignedTo)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCount_PatientVisit_Result>("usp_GetCount_PatientVisit", clinicIDParameter, statusIDsParameter, assignedToParameter);
        }
    
        public virtual ObjectResult<usp_GetCount837_PatientVisit_Result> usp_GetCount837_PatientVisit(Nullable<int> clinicID, string statusIDs, Nullable<int> assignedTo)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCount837_PatientVisit_Result>("usp_GetCount837_PatientVisit", clinicIDParameter, statusIDsParameter, assignedToParameter);
        }
    
        public virtual ObjectResult<usp_GetDashboardSummary_PatientVisit_Result> usp_GetDashboardSummary_PatientVisit(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDashboardSummary_PatientVisit_Result>("usp_GetDashboardSummary_PatientVisit", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetDashboardSummaryNIT_PatientVisit_Result> usp_GetDashboardSummaryNIT_PatientVisit(Nullable<long> userID, string nIT_StatusIDs)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var nIT_StatusIDsParameter = nIT_StatusIDs != null ?
                new ObjectParameter("NIT_StatusIDs", nIT_StatusIDs) :
                new ObjectParameter("NIT_StatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDashboardSummaryNIT_PatientVisit_Result>("usp_GetDashboardSummaryNIT_PatientVisit", userIDParameter, nIT_StatusIDsParameter);
        }
    
        public virtual ObjectResult<usp_GetDashboardVisit_PatientVisit_Result> usp_GetDashboardVisit_PatientVisit(Nullable<int> userID, string desc, string dayCount, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDashboardVisit_PatientVisit_Result>("usp_GetDashboardVisit_PatientVisit", userIDParameter, descParameter, dayCountParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetDashboardVisitPdf_PatientVisit_Result> usp_GetDashboardVisitPdf_PatientVisit(Nullable<int> userID, string desc, string dayCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDashboardVisitPdf_PatientVisit_Result>("usp_GetDashboardVisitPdf_PatientVisit", userIDParameter, descParameter, dayCountParameter);
        }
    
        public virtual ObjectResult<usp_GetDOSByID_PatientVisit_Result> usp_GetDOSByID_PatientVisit(Nullable<long> patientVisitID, Nullable<bool> isActive)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDOSByID_PatientVisit_Result>("usp_GetDOSByID_PatientVisit", patientVisitIDParameter, isActiveParameter);
        }
    
        public virtual int usp_GetEClinic_Patient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetEClinic_Patient");
        }
    
        public virtual ObjectResult<usp_GetHospital_PatientHospitalization_Result> usp_GetHospital_PatientHospitalization(Nullable<long> patientID, Nullable<System.DateTime> dOS, Nullable<bool> isActive)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHospital_PatientHospitalization_Result>("usp_GetHospital_PatientHospitalization", patientIDParameter, dOSParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetHospitalization_PatientVisit_Result> usp_GetHospitalization_PatientVisit(Nullable<long> patientHospitalizationID)
        {
            var patientHospitalizationIDParameter = patientHospitalizationID.HasValue ?
                new ObjectParameter("PatientHospitalizationID", patientHospitalizationID) :
                new ObjectParameter("PatientHospitalizationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHospitalization_PatientVisit_Result>("usp_GetHospitalization_PatientVisit", patientHospitalizationIDParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_Patient_Result> usp_GetIDAutoComplete_Patient(string chartNumber, Nullable<int> clinicID, Nullable<bool> isActive)
        {
            var chartNumberParameter = chartNumber != null ?
                new ObjectParameter("ChartNumber", chartNumber) :
                new ObjectParameter("ChartNumber", typeof(string));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_Patient_Result>("usp_GetIDAutoComplete_Patient", chartNumberParameter, clinicIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIsDischarged_PatientHospitalization_Result> usp_GetIsDischarged_PatientHospitalization(Nullable<long> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIsDischarged_PatientHospitalization_Result>("usp_GetIsDischarged_PatientHospitalization", patientIDParameter);
        }
    
        public virtual int usp_GetMedChek_Patient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetMedChek_Patient");
        }
    
        public virtual ObjectResult<usp_GetNameByID_Patient_Result> usp_GetNameByID_Patient(Nullable<long> patientID, Nullable<bool> isActive)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_Patient_Result>("usp_GetNameByID_Patient", patientIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByPatientVisitID_Patient_Result> usp_GetNameByPatientVisitID_Patient(Nullable<long> patientVisitID, Nullable<bool> isActive)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByPatientVisitID_Patient_Result>("usp_GetNameByPatientVisitID_Patient", patientVisitIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetPrevVisit_PatientVisit_Result> usp_GetPrevVisit_PatientVisit(Nullable<long> patientVisitID, Nullable<long> patientID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPrevVisit_PatientVisit_Result>("usp_GetPrevVisit_PatientVisit", patientVisitIDParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPrimeDxByID_PatientVisit_Result> usp_GetPrimeDxByID_PatientVisit(Nullable<long> patientVisitID, Nullable<bool> isActive, string descType)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var descTypeParameter = descType != null ?
                new ObjectParameter("DescType", descType) :
                new ObjectParameter("DescType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPrimeDxByID_PatientVisit_Result>("usp_GetPrimeDxByID_PatientVisit", patientVisitIDParameter, isActiveParameter, descTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetReport_PatientVisit_Result> usp_GetReport_PatientVisit(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReport_PatientVisit_Result>("usp_GetReport_PatientVisit", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReportAgent_PatientVisit_Result> usp_GetReportAgent_PatientVisit(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportAgent_PatientVisit_Result>("usp_GetReportAgent_PatientVisit", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReportAgentDate_PatientVisit_Result> usp_GetReportAgentDate_PatientVisit(Nullable<int> userID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportAgentDate_PatientVisit_Result>("usp_GetReportAgentDate_PatientVisit", userIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportClinic_PatientVisit_Result> usp_GetReportClinic_PatientVisit(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportClinic_PatientVisit_Result>("usp_GetReportClinic_PatientVisit", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReportClinicDate_PatientVisit_Result> usp_GetReportClinicDate_PatientVisit(Nullable<int> clinicID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportClinicDate_PatientVisit_Result>("usp_GetReportClinicDate_PatientVisit", clinicIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportDashboard_PatientVisit_Result> usp_GetReportDashboard_PatientVisit(Nullable<int> userID, string desc, string dayCount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportDashboard_PatientVisit_Result>("usp_GetReportDashboard_PatientVisit", userIDParameter, descParameter, dayCountParameter);
        }
    
        public virtual ObjectResult<usp_GetReportDashboardAgent_PatientVisit_Result> usp_GetReportDashboardAgent_PatientVisit(Nullable<int> userID, string desc, string dayCount, Nullable<byte> nEW_CLAIM, Nullable<byte> bA_HOLDED, Nullable<byte> cREATED_CLAIM, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> rEJECTED_CLAIM, Nullable<byte> rEJECTED_CLAIM_NIT, Nullable<byte> aCCEPTED_CLAIM, string nIT_StatusIDs)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var bA_HOLDEDParameter = bA_HOLDED.HasValue ?
                new ObjectParameter("BA_HOLDED", bA_HOLDED) :
                new ObjectParameter("BA_HOLDED", typeof(byte));
    
            var cREATED_CLAIMParameter = cREATED_CLAIM.HasValue ?
                new ObjectParameter("CREATED_CLAIM", cREATED_CLAIM) :
                new ObjectParameter("CREATED_CLAIM", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var rEJECTED_CLAIMParameter = rEJECTED_CLAIM.HasValue ?
                new ObjectParameter("REJECTED_CLAIM", rEJECTED_CLAIM) :
                new ObjectParameter("REJECTED_CLAIM", typeof(byte));
    
            var rEJECTED_CLAIM_NITParameter = rEJECTED_CLAIM_NIT.HasValue ?
                new ObjectParameter("REJECTED_CLAIM_NIT", rEJECTED_CLAIM_NIT) :
                new ObjectParameter("REJECTED_CLAIM_NIT", typeof(byte));
    
            var aCCEPTED_CLAIMParameter = aCCEPTED_CLAIM.HasValue ?
                new ObjectParameter("ACCEPTED_CLAIM", aCCEPTED_CLAIM) :
                new ObjectParameter("ACCEPTED_CLAIM", typeof(byte));
    
            var nIT_StatusIDsParameter = nIT_StatusIDs != null ?
                new ObjectParameter("NIT_StatusIDs", nIT_StatusIDs) :
                new ObjectParameter("NIT_StatusIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportDashboardAgent_PatientVisit_Result>("usp_GetReportDashboardAgent_PatientVisit", userIDParameter, descParameter, dayCountParameter, nEW_CLAIMParameter, bA_HOLDEDParameter, cREATED_CLAIMParameter, rEADY_TO_SEND_CLAIMParameter, eDI_FILE_CREATEDParameter, rEJECTED_CLAIMParameter, rEJECTED_CLAIM_NITParameter, aCCEPTED_CLAIMParameter, nIT_StatusIDsParameter);
        }
    
        public virtual ObjectResult<usp_GetReportDashboardClinic_PatientVisit_Result> usp_GetReportDashboardClinic_PatientVisit(Nullable<int> clinicID, string desc, string dayCount)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dayCountParameter = dayCount != null ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportDashboardClinic_PatientVisit_Result>("usp_GetReportDashboardClinic_PatientVisit", clinicIDParameter, descParameter, dayCountParameter);
        }
    
        public virtual ObjectResult<usp_GetReportDate_PatientVisit_Result> usp_GetReportDate_PatientVisit(Nullable<int> userID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportDate_PatientVisit_Result>("usp_GetReportDate_PatientVisit", userIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportDx_PatientVisit_Result> usp_GetReportDx_PatientVisit(Nullable<long> patientvisitid)
        {
            var patientvisitidParameter = patientvisitid.HasValue ?
                new ObjectParameter("patientvisitid", patientvisitid) :
                new ObjectParameter("patientvisitid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportDx_PatientVisit_Result>("usp_GetReportDx_PatientVisit", patientvisitidParameter);
        }
    
        public virtual ObjectResult<usp_GetReportPatient_PatientVisit_Result> usp_GetReportPatient_PatientVisit(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportPatient_PatientVisit_Result>("usp_GetReportPatient_PatientVisit", patientIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReportPatientDate_PatientVisit_Result> usp_GetReportPatientDate_PatientVisit(Nullable<long> patientID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportPatientDate_PatientVisit_Result>("usp_GetReportPatientDate_PatientVisit", patientIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportProvider_PatientVisit_Result> usp_GetReportProvider_PatientVisit(Nullable<int> providerID)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportProvider_PatientVisit_Result>("usp_GetReportProvider_PatientVisit", providerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReportProviderDate_PatientVisit_Result> usp_GetReportProviderDate_PatientVisit(Nullable<int> providerID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportProviderDate_PatientVisit_Result>("usp_GetReportProviderDate_PatientVisit", providerIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSum_PatientVisit_Result> usp_GetReportSum_PatientVisit(Nullable<int> userID, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSum_PatientVisit_Result>("usp_GetReportSum_PatientVisit", userIDParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumAgent_PatientVisit_Result> usp_GetReportSumAgent_PatientVisit(Nullable<int> userID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumAgent_PatientVisit_Result>("usp_GetReportSumAgent_PatientVisit", userIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumAgentComp_PatientVisit_Result> usp_GetReportSumAgentComp_PatientVisit(Nullable<int> userID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumAgentComp_PatientVisit_Result>("usp_GetReportSumAgentComp_PatientVisit", userIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumAgentWise_PatientVisit_Result> usp_GetReportSumAgentWise_PatientVisit(Nullable<int> userID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumAgentWise_PatientVisit_Result>("usp_GetReportSumAgentWise_PatientVisit", userIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumClinic_PatientVisit_Result> usp_GetReportSumClinic_PatientVisit(Nullable<int> clinicID, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumClinic_PatientVisit_Result>("usp_GetReportSumClinic_PatientVisit", clinicIDParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumMn_PatientVisit_Result> usp_GetReportSumMn_PatientVisit(Nullable<int> userID, Nullable<int> yEAR, Nullable<byte> mONTH, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(byte));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumMn_PatientVisit_Result>("usp_GetReportSumMn_PatientVisit", userIDParameter, yEARParameter, mONTHParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumMnClinic_PatientVisit_Result> usp_GetReportSumMnClinic_PatientVisit(Nullable<int> clinicID, Nullable<int> yEAR, Nullable<byte> mONTH, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(byte));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumMnClinic_PatientVisit_Result>("usp_GetReportSumMnClinic_PatientVisit", clinicIDParameter, yEARParameter, mONTHParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumMnPatient_PatientVisit_Result> usp_GetReportSumMnPatient_PatientVisit(Nullable<long> patientID, Nullable<int> yEAR, Nullable<byte> mONTH, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(byte));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumMnPatient_PatientVisit_Result>("usp_GetReportSumMnPatient_PatientVisit", patientIDParameter, yEARParameter, mONTHParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumMnProvider_PatientVisit_Result> usp_GetReportSumMnProvider_PatientVisit(Nullable<int> providerID, Nullable<int> yEAR, Nullable<byte> mONTH, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(byte));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumMnProvider_PatientVisit_Result>("usp_GetReportSumMnProvider_PatientVisit", providerIDParameter, yEARParameter, mONTHParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumPatient_PatientVisit_Result> usp_GetReportSumPatient_PatientVisit(Nullable<long> patientID, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumPatient_PatientVisit_Result>("usp_GetReportSumPatient_PatientVisit", patientIDParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumProvider_PatientVisit_Result> usp_GetReportSumProvider_PatientVisit(Nullable<int> providerID, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumProvider_PatientVisit_Result>("usp_GetReportSumProvider_PatientVisit", providerIDParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumYr_PatientVisit_Result> usp_GetReportSumYr_PatientVisit(Nullable<int> userID, Nullable<int> yEAR, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumYr_PatientVisit_Result>("usp_GetReportSumYr_PatientVisit", userIDParameter, yEARParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumYrClinic_PatientVisit_Result> usp_GetReportSumYrClinic_PatientVisit(Nullable<int> clinicID, Nullable<int> yEAR, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumYrClinic_PatientVisit_Result>("usp_GetReportSumYrClinic_PatientVisit", clinicIDParameter, yEARParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumYrPatient_PatientVisit_Result> usp_GetReportSumYrPatient_PatientVisit(Nullable<long> patientID, Nullable<int> yEAR, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumYrPatient_PatientVisit_Result>("usp_GetReportSumYrPatient_PatientVisit", patientIDParameter, yEARParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetReportSumYrProvider_PatientVisit_Result> usp_GetReportSumYrProvider_PatientVisit(Nullable<int> providerID, Nullable<int> yEAR, Nullable<byte> nEW_CLAIM, Nullable<byte> qA_PERSONAL_QUEUE_NIT, Nullable<byte> rEADY_TO_SEND_CLAIM, Nullable<byte> eA_PERSONAL_QUEUE_NIT, Nullable<byte> eDI_FILE_CREATED, Nullable<byte> sENT_CLAIM_NIT, Nullable<byte> dONE)
        {
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var nEW_CLAIMParameter = nEW_CLAIM.HasValue ?
                new ObjectParameter("NEW_CLAIM", nEW_CLAIM) :
                new ObjectParameter("NEW_CLAIM", typeof(byte));
    
            var qA_PERSONAL_QUEUE_NITParameter = qA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", qA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("QA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var rEADY_TO_SEND_CLAIMParameter = rEADY_TO_SEND_CLAIM.HasValue ?
                new ObjectParameter("READY_TO_SEND_CLAIM", rEADY_TO_SEND_CLAIM) :
                new ObjectParameter("READY_TO_SEND_CLAIM", typeof(byte));
    
            var eA_PERSONAL_QUEUE_NITParameter = eA_PERSONAL_QUEUE_NIT.HasValue ?
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", eA_PERSONAL_QUEUE_NIT) :
                new ObjectParameter("EA_PERSONAL_QUEUE_NIT", typeof(byte));
    
            var eDI_FILE_CREATEDParameter = eDI_FILE_CREATED.HasValue ?
                new ObjectParameter("EDI_FILE_CREATED", eDI_FILE_CREATED) :
                new ObjectParameter("EDI_FILE_CREATED", typeof(byte));
    
            var sENT_CLAIM_NITParameter = sENT_CLAIM_NIT.HasValue ?
                new ObjectParameter("SENT_CLAIM_NIT", sENT_CLAIM_NIT) :
                new ObjectParameter("SENT_CLAIM_NIT", typeof(byte));
    
            var dONEParameter = dONE.HasValue ?
                new ObjectParameter("DONE", dONE) :
                new ObjectParameter("DONE", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportSumYrProvider_PatientVisit_Result>("usp_GetReportSumYrProvider_PatientVisit", providerIDParameter, yEARParameter, nEW_CLAIMParameter, qA_PERSONAL_QUEUE_NITParameter, rEADY_TO_SEND_CLAIMParameter, eA_PERSONAL_QUEUE_NITParameter, eDI_FILE_CREATEDParameter, sENT_CLAIM_NITParameter, dONEParameter);
        }
    
        public virtual ObjectResult<usp_GetUnAssigned_PatientVisit_Result> usp_GetUnAssigned_PatientVisit(Nullable<int> clinicID, string statusIDs, string searchName, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> assignedTo, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var statusIDsParameter = statusIDs != null ?
                new ObjectParameter("StatusIDs", statusIDs) :
                new ObjectParameter("StatusIDs", typeof(string));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUnAssigned_PatientVisit_Result>("usp_GetUnAssigned_PatientVisit", clinicIDParameter, statusIDsParameter, searchNameParameter, dateFromParameter, dateToParameter, assignedToParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlPatient_Patient(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlPatient_Patient", iDParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlPatientID_Patient(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlPatientID_Patient", patientIDParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportAgent_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportAgent_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportAgentDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportAgentDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportAgentWise_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportAgentWise_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportAgentWiseDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportAgentWiseDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportClinic_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportClinic_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportClinicDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportClinicDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportClinicWise_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportClinicWise_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportClinicWiseDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportClinicWiseDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportPatient_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportPatient_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportPatientDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportPatientDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportPatientWise_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportPatientWise_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportPatientWiseDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportPatientWiseDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportProvider_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportProvider_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportProviderDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportProviderDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportProviderWise_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportProviderWise_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlReportProviderWiseDt_PatientVisit(Nullable<int> iD, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlReportProviderWiseDt_PatientVisit", iDParameter, dATE_FROMParameter, dATE_TOParameter);
        }
    
        public virtual int usp_Insert_Patient(Nullable<int> clinicID, string chartNumber, string medicareID, string lastName, string middleName, string firstName, string sex, Nullable<System.DateTime> dOB, string sSN, Nullable<int> providerID, Nullable<int> insuranceID, string policyNumber, string groupNumber, string policyHolderChartNumber, Nullable<byte> relationshipID, Nullable<bool> isInsuranceBenefitAccepted, Nullable<bool> isCapitated, Nullable<System.DateTime> insuranceEffectFrom, Nullable<System.DateTime> insuranceEffectTo, string photoRelPath, Nullable<bool> isSignedFile, Nullable<System.DateTime> signedDate, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, string secondaryPhoneNumber, string email, string secondaryEmail, string fax, string comment, Nullable<long> currentModificationBy, ObjectParameter patientID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var chartNumberParameter = chartNumber != null ?
                new ObjectParameter("ChartNumber", chartNumber) :
                new ObjectParameter("ChartNumber", typeof(string));
    
            var medicareIDParameter = medicareID != null ?
                new ObjectParameter("MedicareID", medicareID) :
                new ObjectParameter("MedicareID", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var groupNumberParameter = groupNumber != null ?
                new ObjectParameter("GroupNumber", groupNumber) :
                new ObjectParameter("GroupNumber", typeof(string));
    
            var policyHolderChartNumberParameter = policyHolderChartNumber != null ?
                new ObjectParameter("PolicyHolderChartNumber", policyHolderChartNumber) :
                new ObjectParameter("PolicyHolderChartNumber", typeof(string));
    
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(byte));
    
            var isInsuranceBenefitAcceptedParameter = isInsuranceBenefitAccepted.HasValue ?
                new ObjectParameter("IsInsuranceBenefitAccepted", isInsuranceBenefitAccepted) :
                new ObjectParameter("IsInsuranceBenefitAccepted", typeof(bool));
    
            var isCapitatedParameter = isCapitated.HasValue ?
                new ObjectParameter("IsCapitated", isCapitated) :
                new ObjectParameter("IsCapitated", typeof(bool));
    
            var insuranceEffectFromParameter = insuranceEffectFrom.HasValue ?
                new ObjectParameter("InsuranceEffectFrom", insuranceEffectFrom) :
                new ObjectParameter("InsuranceEffectFrom", typeof(System.DateTime));
    
            var insuranceEffectToParameter = insuranceEffectTo.HasValue ?
                new ObjectParameter("InsuranceEffectTo", insuranceEffectTo) :
                new ObjectParameter("InsuranceEffectTo", typeof(System.DateTime));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var isSignedFileParameter = isSignedFile.HasValue ?
                new ObjectParameter("IsSignedFile", isSignedFile) :
                new ObjectParameter("IsSignedFile", typeof(bool));
    
            var signedDateParameter = signedDate.HasValue ?
                new ObjectParameter("SignedDate", signedDate) :
                new ObjectParameter("SignedDate", typeof(System.DateTime));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_Patient", clinicIDParameter, chartNumberParameter, medicareIDParameter, lastNameParameter, middleNameParameter, firstNameParameter, sexParameter, dOBParameter, sSNParameter, providerIDParameter, insuranceIDParameter, policyNumberParameter, groupNumberParameter, policyHolderChartNumberParameter, relationshipIDParameter, isInsuranceBenefitAcceptedParameter, isCapitatedParameter, insuranceEffectFromParameter, insuranceEffectToParameter, photoRelPathParameter, isSignedFileParameter, signedDateParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, secondaryPhoneNumberParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, currentModificationByParameter, patientID);
        }
    
        public virtual int usp_Insert_PatientDocument(Nullable<long> patientID, Nullable<byte> documentCategoryID, Nullable<System.DateTime> serviceOrFromDate, Nullable<System.DateTime> toDate, string documentRelPath, string comment, Nullable<long> currentModificationBy, ObjectParameter patientDocumentID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var documentCategoryIDParameter = documentCategoryID.HasValue ?
                new ObjectParameter("DocumentCategoryID", documentCategoryID) :
                new ObjectParameter("DocumentCategoryID", typeof(byte));
    
            var serviceOrFromDateParameter = serviceOrFromDate.HasValue ?
                new ObjectParameter("ServiceOrFromDate", serviceOrFromDate) :
                new ObjectParameter("ServiceOrFromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var documentRelPathParameter = documentRelPath != null ?
                new ObjectParameter("DocumentRelPath", documentRelPath) :
                new ObjectParameter("DocumentRelPath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_PatientDocument", patientIDParameter, documentCategoryIDParameter, serviceOrFromDateParameter, toDateParameter, documentRelPathParameter, commentParameter, currentModificationByParameter, patientDocumentID);
        }
    
        public virtual int usp_Insert_PatientHospitalization(Nullable<long> patientID, Nullable<int> facilityDoneHospitalID, Nullable<System.DateTime> admittedOn, Nullable<System.DateTime> dischargedOn, string comment, Nullable<long> currentModificationBy, ObjectParameter patientHospitalizationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var facilityDoneHospitalIDParameter = facilityDoneHospitalID.HasValue ?
                new ObjectParameter("FacilityDoneHospitalID", facilityDoneHospitalID) :
                new ObjectParameter("FacilityDoneHospitalID", typeof(int));
    
            var admittedOnParameter = admittedOn.HasValue ?
                new ObjectParameter("AdmittedOn", admittedOn) :
                new ObjectParameter("AdmittedOn", typeof(System.DateTime));
    
            var dischargedOnParameter = dischargedOn.HasValue ?
                new ObjectParameter("DischargedOn", dischargedOn) :
                new ObjectParameter("DischargedOn", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_PatientHospitalization", patientIDParameter, facilityDoneHospitalIDParameter, admittedOnParameter, dischargedOnParameter, commentParameter, currentModificationByParameter, patientHospitalizationID);
        }
    
        public virtual int usp_Insert_PatientVisit(Nullable<int> clinicID, Nullable<long> patientID, Nullable<System.DateTime> dOS, string comment, Nullable<long> currentModificationBy, ObjectParameter patientVisitID, Nullable<byte> fACILITY_TYPE_OFFICE_ID, Nullable<byte> fACILITY_TYPE_INPATIENT_HOSPITAL_ID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            var fACILITY_TYPE_OFFICE_IDParameter = fACILITY_TYPE_OFFICE_ID.HasValue ?
                new ObjectParameter("FACILITY_TYPE_OFFICE_ID", fACILITY_TYPE_OFFICE_ID) :
                new ObjectParameter("FACILITY_TYPE_OFFICE_ID", typeof(byte));
    
            var fACILITY_TYPE_INPATIENT_HOSPITAL_IDParameter = fACILITY_TYPE_INPATIENT_HOSPITAL_ID.HasValue ?
                new ObjectParameter("FACILITY_TYPE_INPATIENT_HOSPITAL_ID", fACILITY_TYPE_INPATIENT_HOSPITAL_ID) :
                new ObjectParameter("FACILITY_TYPE_INPATIENT_HOSPITAL_ID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_PatientVisit", clinicIDParameter, patientIDParameter, dOSParameter, commentParameter, currentModificationByParameter, patientVisitID, fACILITY_TYPE_OFFICE_IDParameter, fACILITY_TYPE_INPATIENT_HOSPITAL_IDParameter);
        }
    
        public virtual int usp_IsExists_Patient(Nullable<int> clinicID, string chartNumber, string medicareID, string lastName, string middleName, string firstName, string sex, Nullable<System.DateTime> dOB, string sSN, Nullable<int> providerID, Nullable<int> insuranceID, string policyNumber, string groupNumber, string policyHolderChartNumber, Nullable<byte> relationshipID, Nullable<bool> isInsuranceBenefitAccepted, Nullable<bool> isCapitated, Nullable<System.DateTime> insuranceEffectFrom, Nullable<System.DateTime> insuranceEffectTo, string photoRelPath, Nullable<bool> isSignedFile, Nullable<System.DateTime> signedDate, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, string secondaryPhoneNumber, string email, string secondaryEmail, string fax, string comment, ObjectParameter patientID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var chartNumberParameter = chartNumber != null ?
                new ObjectParameter("ChartNumber", chartNumber) :
                new ObjectParameter("ChartNumber", typeof(string));
    
            var medicareIDParameter = medicareID != null ?
                new ObjectParameter("MedicareID", medicareID) :
                new ObjectParameter("MedicareID", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var groupNumberParameter = groupNumber != null ?
                new ObjectParameter("GroupNumber", groupNumber) :
                new ObjectParameter("GroupNumber", typeof(string));
    
            var policyHolderChartNumberParameter = policyHolderChartNumber != null ?
                new ObjectParameter("PolicyHolderChartNumber", policyHolderChartNumber) :
                new ObjectParameter("PolicyHolderChartNumber", typeof(string));
    
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(byte));
    
            var isInsuranceBenefitAcceptedParameter = isInsuranceBenefitAccepted.HasValue ?
                new ObjectParameter("IsInsuranceBenefitAccepted", isInsuranceBenefitAccepted) :
                new ObjectParameter("IsInsuranceBenefitAccepted", typeof(bool));
    
            var isCapitatedParameter = isCapitated.HasValue ?
                new ObjectParameter("IsCapitated", isCapitated) :
                new ObjectParameter("IsCapitated", typeof(bool));
    
            var insuranceEffectFromParameter = insuranceEffectFrom.HasValue ?
                new ObjectParameter("InsuranceEffectFrom", insuranceEffectFrom) :
                new ObjectParameter("InsuranceEffectFrom", typeof(System.DateTime));
    
            var insuranceEffectToParameter = insuranceEffectTo.HasValue ?
                new ObjectParameter("InsuranceEffectTo", insuranceEffectTo) :
                new ObjectParameter("InsuranceEffectTo", typeof(System.DateTime));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var isSignedFileParameter = isSignedFile.HasValue ?
                new ObjectParameter("IsSignedFile", isSignedFile) :
                new ObjectParameter("IsSignedFile", typeof(bool));
    
            var signedDateParameter = signedDate.HasValue ?
                new ObjectParameter("SignedDate", signedDate) :
                new ObjectParameter("SignedDate", typeof(System.DateTime));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_Patient", clinicIDParameter, chartNumberParameter, medicareIDParameter, lastNameParameter, middleNameParameter, firstNameParameter, sexParameter, dOBParameter, sSNParameter, providerIDParameter, insuranceIDParameter, policyNumberParameter, groupNumberParameter, policyHolderChartNumberParameter, relationshipIDParameter, isInsuranceBenefitAcceptedParameter, isCapitatedParameter, insuranceEffectFromParameter, insuranceEffectToParameter, photoRelPathParameter, isSignedFileParameter, signedDateParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, secondaryPhoneNumberParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, patientID);
        }
    
        public virtual int usp_IsExists_PatientDocument(Nullable<long> patientID, Nullable<byte> documentCategoryID, Nullable<System.DateTime> serviceOrFromDate, Nullable<System.DateTime> toDate, string documentRelPath, string comment, ObjectParameter patientDocumentID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var documentCategoryIDParameter = documentCategoryID.HasValue ?
                new ObjectParameter("DocumentCategoryID", documentCategoryID) :
                new ObjectParameter("DocumentCategoryID", typeof(byte));
    
            var serviceOrFromDateParameter = serviceOrFromDate.HasValue ?
                new ObjectParameter("ServiceOrFromDate", serviceOrFromDate) :
                new ObjectParameter("ServiceOrFromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var documentRelPathParameter = documentRelPath != null ?
                new ObjectParameter("DocumentRelPath", documentRelPath) :
                new ObjectParameter("DocumentRelPath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_PatientDocument", patientIDParameter, documentCategoryIDParameter, serviceOrFromDateParameter, toDateParameter, documentRelPathParameter, commentParameter, patientDocumentID);
        }
    
        public virtual int usp_IsExists_PatientHospitalization(Nullable<long> patientID, Nullable<int> facilityDoneHospitalID, Nullable<System.DateTime> admittedOn, Nullable<System.DateTime> dischargedOn, string comment, ObjectParameter patientHospitalizationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var facilityDoneHospitalIDParameter = facilityDoneHospitalID.HasValue ?
                new ObjectParameter("FacilityDoneHospitalID", facilityDoneHospitalID) :
                new ObjectParameter("FacilityDoneHospitalID", typeof(int));
    
            var admittedOnParameter = admittedOn.HasValue ?
                new ObjectParameter("AdmittedOn", admittedOn) :
                new ObjectParameter("AdmittedOn", typeof(System.DateTime));
    
            var dischargedOnParameter = dischargedOn.HasValue ?
                new ObjectParameter("DischargedOn", dischargedOn) :
                new ObjectParameter("DischargedOn", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_PatientHospitalization", patientIDParameter, facilityDoneHospitalIDParameter, admittedOnParameter, dischargedOnParameter, commentParameter, patientHospitalizationID);
        }
    
        public virtual int usp_IsExists_PatientVisit(Nullable<long> patientID, Nullable<long> patientHospitalizationID, Nullable<System.DateTime> dOS, Nullable<byte> illnessIndicatorID, Nullable<System.DateTime> illnessIndicatorDate, Nullable<byte> facilityTypeID, Nullable<int> facilityDoneID, Nullable<long> primaryClaimDiagnosisID, string doctorNoteRelPath, string superBillRelPath, string patientVisitDesc, Nullable<byte> claimStatusID, Nullable<int> assignedTo, Nullable<int> targetBAUserID, Nullable<int> targetQAUserID, Nullable<int> targetEAUserID, Nullable<byte> patientVisitComplexity, string comment, ObjectParameter patientVisitID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var patientHospitalizationIDParameter = patientHospitalizationID.HasValue ?
                new ObjectParameter("PatientHospitalizationID", patientHospitalizationID) :
                new ObjectParameter("PatientHospitalizationID", typeof(long));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var illnessIndicatorIDParameter = illnessIndicatorID.HasValue ?
                new ObjectParameter("IllnessIndicatorID", illnessIndicatorID) :
                new ObjectParameter("IllnessIndicatorID", typeof(byte));
    
            var illnessIndicatorDateParameter = illnessIndicatorDate.HasValue ?
                new ObjectParameter("IllnessIndicatorDate", illnessIndicatorDate) :
                new ObjectParameter("IllnessIndicatorDate", typeof(System.DateTime));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var facilityDoneIDParameter = facilityDoneID.HasValue ?
                new ObjectParameter("FacilityDoneID", facilityDoneID) :
                new ObjectParameter("FacilityDoneID", typeof(int));
    
            var primaryClaimDiagnosisIDParameter = primaryClaimDiagnosisID.HasValue ?
                new ObjectParameter("PrimaryClaimDiagnosisID", primaryClaimDiagnosisID) :
                new ObjectParameter("PrimaryClaimDiagnosisID", typeof(long));
    
            var doctorNoteRelPathParameter = doctorNoteRelPath != null ?
                new ObjectParameter("DoctorNoteRelPath", doctorNoteRelPath) :
                new ObjectParameter("DoctorNoteRelPath", typeof(string));
    
            var superBillRelPathParameter = superBillRelPath != null ?
                new ObjectParameter("SuperBillRelPath", superBillRelPath) :
                new ObjectParameter("SuperBillRelPath", typeof(string));
    
            var patientVisitDescParameter = patientVisitDesc != null ?
                new ObjectParameter("PatientVisitDesc", patientVisitDesc) :
                new ObjectParameter("PatientVisitDesc", typeof(string));
    
            var claimStatusIDParameter = claimStatusID.HasValue ?
                new ObjectParameter("ClaimStatusID", claimStatusID) :
                new ObjectParameter("ClaimStatusID", typeof(byte));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var targetBAUserIDParameter = targetBAUserID.HasValue ?
                new ObjectParameter("TargetBAUserID", targetBAUserID) :
                new ObjectParameter("TargetBAUserID", typeof(int));
    
            var targetQAUserIDParameter = targetQAUserID.HasValue ?
                new ObjectParameter("TargetQAUserID", targetQAUserID) :
                new ObjectParameter("TargetQAUserID", typeof(int));
    
            var targetEAUserIDParameter = targetEAUserID.HasValue ?
                new ObjectParameter("TargetEAUserID", targetEAUserID) :
                new ObjectParameter("TargetEAUserID", typeof(int));
    
            var patientVisitComplexityParameter = patientVisitComplexity.HasValue ?
                new ObjectParameter("PatientVisitComplexity", patientVisitComplexity) :
                new ObjectParameter("PatientVisitComplexity", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_PatientVisit", patientIDParameter, patientHospitalizationIDParameter, dOSParameter, illnessIndicatorIDParameter, illnessIndicatorDateParameter, facilityTypeIDParameter, facilityDoneIDParameter, primaryClaimDiagnosisIDParameter, doctorNoteRelPathParameter, superBillRelPathParameter, patientVisitDescParameter, claimStatusIDParameter, assignedToParameter, targetBAUserIDParameter, targetQAUserIDParameter, targetEAUserIDParameter, patientVisitComplexityParameter, commentParameter, patientVisitID);
        }
    
        public virtual int usp_Update_Patient(Nullable<int> clinicID, string chartNumber, string medicareID, string lastName, string middleName, string firstName, string sex, Nullable<System.DateTime> dOB, string sSN, Nullable<int> providerID, Nullable<int> insuranceID, string policyNumber, string groupNumber, string policyHolderChartNumber, Nullable<byte> relationshipID, Nullable<bool> isInsuranceBenefitAccepted, Nullable<bool> isCapitated, Nullable<System.DateTime> insuranceEffectFrom, Nullable<System.DateTime> insuranceEffectTo, string photoRelPath, Nullable<bool> isSignedFile, Nullable<System.DateTime> signedDate, string streetName, string suite, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countyID, Nullable<int> countryID, string phoneNumber, string secondaryPhoneNumber, string email, string secondaryEmail, string fax, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter patientID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var chartNumberParameter = chartNumber != null ?
                new ObjectParameter("ChartNumber", chartNumber) :
                new ObjectParameter("ChartNumber", typeof(string));
    
            var medicareIDParameter = medicareID != null ?
                new ObjectParameter("MedicareID", medicareID) :
                new ObjectParameter("MedicareID", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var providerIDParameter = providerID.HasValue ?
                new ObjectParameter("ProviderID", providerID) :
                new ObjectParameter("ProviderID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var groupNumberParameter = groupNumber != null ?
                new ObjectParameter("GroupNumber", groupNumber) :
                new ObjectParameter("GroupNumber", typeof(string));
    
            var policyHolderChartNumberParameter = policyHolderChartNumber != null ?
                new ObjectParameter("PolicyHolderChartNumber", policyHolderChartNumber) :
                new ObjectParameter("PolicyHolderChartNumber", typeof(string));
    
            var relationshipIDParameter = relationshipID.HasValue ?
                new ObjectParameter("RelationshipID", relationshipID) :
                new ObjectParameter("RelationshipID", typeof(byte));
    
            var isInsuranceBenefitAcceptedParameter = isInsuranceBenefitAccepted.HasValue ?
                new ObjectParameter("IsInsuranceBenefitAccepted", isInsuranceBenefitAccepted) :
                new ObjectParameter("IsInsuranceBenefitAccepted", typeof(bool));
    
            var isCapitatedParameter = isCapitated.HasValue ?
                new ObjectParameter("IsCapitated", isCapitated) :
                new ObjectParameter("IsCapitated", typeof(bool));
    
            var insuranceEffectFromParameter = insuranceEffectFrom.HasValue ?
                new ObjectParameter("InsuranceEffectFrom", insuranceEffectFrom) :
                new ObjectParameter("InsuranceEffectFrom", typeof(System.DateTime));
    
            var insuranceEffectToParameter = insuranceEffectTo.HasValue ?
                new ObjectParameter("InsuranceEffectTo", insuranceEffectTo) :
                new ObjectParameter("InsuranceEffectTo", typeof(System.DateTime));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var isSignedFileParameter = isSignedFile.HasValue ?
                new ObjectParameter("IsSignedFile", isSignedFile) :
                new ObjectParameter("IsSignedFile", typeof(bool));
    
            var signedDateParameter = signedDate.HasValue ?
                new ObjectParameter("SignedDate", signedDate) :
                new ObjectParameter("SignedDate", typeof(System.DateTime));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countyIDParameter = countyID.HasValue ?
                new ObjectParameter("CountyID", countyID) :
                new ObjectParameter("CountyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secondaryPhoneNumberParameter = secondaryPhoneNumber != null ?
                new ObjectParameter("SecondaryPhoneNumber", secondaryPhoneNumber) :
                new ObjectParameter("SecondaryPhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_Patient", clinicIDParameter, chartNumberParameter, medicareIDParameter, lastNameParameter, middleNameParameter, firstNameParameter, sexParameter, dOBParameter, sSNParameter, providerIDParameter, insuranceIDParameter, policyNumberParameter, groupNumberParameter, policyHolderChartNumberParameter, relationshipIDParameter, isInsuranceBenefitAcceptedParameter, isCapitatedParameter, insuranceEffectFromParameter, insuranceEffectToParameter, photoRelPathParameter, isSignedFileParameter, signedDateParameter, streetNameParameter, suiteParameter, cityIDParameter, stateIDParameter, countyIDParameter, countryIDParameter, phoneNumberParameter, secondaryPhoneNumberParameter, emailParameter, secondaryEmailParameter, faxParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, patientID);
        }
    
        public virtual int usp_Update_PatientDocument(Nullable<long> patientID, Nullable<byte> documentCategoryID, Nullable<System.DateTime> serviceOrFromDate, Nullable<System.DateTime> toDate, string documentRelPath, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter patientDocumentID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var documentCategoryIDParameter = documentCategoryID.HasValue ?
                new ObjectParameter("DocumentCategoryID", documentCategoryID) :
                new ObjectParameter("DocumentCategoryID", typeof(byte));
    
            var serviceOrFromDateParameter = serviceOrFromDate.HasValue ?
                new ObjectParameter("ServiceOrFromDate", serviceOrFromDate) :
                new ObjectParameter("ServiceOrFromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var documentRelPathParameter = documentRelPath != null ?
                new ObjectParameter("DocumentRelPath", documentRelPath) :
                new ObjectParameter("DocumentRelPath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_PatientDocument", patientIDParameter, documentCategoryIDParameter, serviceOrFromDateParameter, toDateParameter, documentRelPathParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, patientDocumentID);
        }
    
        public virtual int usp_Update_PatientHospitalization(Nullable<long> patientID, Nullable<int> facilityDoneHospitalID, Nullable<System.DateTime> admittedOn, Nullable<System.DateTime> dischargedOn, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter patientHospitalizationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var facilityDoneHospitalIDParameter = facilityDoneHospitalID.HasValue ?
                new ObjectParameter("FacilityDoneHospitalID", facilityDoneHospitalID) :
                new ObjectParameter("FacilityDoneHospitalID", typeof(int));
    
            var admittedOnParameter = admittedOn.HasValue ?
                new ObjectParameter("AdmittedOn", admittedOn) :
                new ObjectParameter("AdmittedOn", typeof(System.DateTime));
    
            var dischargedOnParameter = dischargedOn.HasValue ?
                new ObjectParameter("DischargedOn", dischargedOn) :
                new ObjectParameter("DischargedOn", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_PatientHospitalization", patientIDParameter, facilityDoneHospitalIDParameter, admittedOnParameter, dischargedOnParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, patientHospitalizationID);
        }
    
        public virtual int usp_Update_PatientVisit(Nullable<long> patientID, Nullable<System.DateTime> dOS, Nullable<byte> illnessIndicatorID, Nullable<System.DateTime> illnessIndicatorDate, Nullable<byte> facilityTypeID, Nullable<int> facilityDoneID, Nullable<long> primaryClaimDiagnosisID, string doctorNoteRelPath, string superBillRelPath, string patientVisitDesc, string claimStatusXml, Nullable<int> assignedTo, Nullable<int> targetBAUserID, Nullable<int> targetQAUserID, Nullable<int> targetEAUserID, Nullable<byte> patientVisitComplexity, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter patientVisitID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(long));
    
            var dOSParameter = dOS.HasValue ?
                new ObjectParameter("DOS", dOS) :
                new ObjectParameter("DOS", typeof(System.DateTime));
    
            var illnessIndicatorIDParameter = illnessIndicatorID.HasValue ?
                new ObjectParameter("IllnessIndicatorID", illnessIndicatorID) :
                new ObjectParameter("IllnessIndicatorID", typeof(byte));
    
            var illnessIndicatorDateParameter = illnessIndicatorDate.HasValue ?
                new ObjectParameter("IllnessIndicatorDate", illnessIndicatorDate) :
                new ObjectParameter("IllnessIndicatorDate", typeof(System.DateTime));
    
            var facilityTypeIDParameter = facilityTypeID.HasValue ?
                new ObjectParameter("FacilityTypeID", facilityTypeID) :
                new ObjectParameter("FacilityTypeID", typeof(byte));
    
            var facilityDoneIDParameter = facilityDoneID.HasValue ?
                new ObjectParameter("FacilityDoneID", facilityDoneID) :
                new ObjectParameter("FacilityDoneID", typeof(int));
    
            var primaryClaimDiagnosisIDParameter = primaryClaimDiagnosisID.HasValue ?
                new ObjectParameter("PrimaryClaimDiagnosisID", primaryClaimDiagnosisID) :
                new ObjectParameter("PrimaryClaimDiagnosisID", typeof(long));
    
            var doctorNoteRelPathParameter = doctorNoteRelPath != null ?
                new ObjectParameter("DoctorNoteRelPath", doctorNoteRelPath) :
                new ObjectParameter("DoctorNoteRelPath", typeof(string));
    
            var superBillRelPathParameter = superBillRelPath != null ?
                new ObjectParameter("SuperBillRelPath", superBillRelPath) :
                new ObjectParameter("SuperBillRelPath", typeof(string));
    
            var patientVisitDescParameter = patientVisitDesc != null ?
                new ObjectParameter("PatientVisitDesc", patientVisitDesc) :
                new ObjectParameter("PatientVisitDesc", typeof(string));
    
            var claimStatusXmlParameter = claimStatusXml != null ?
                new ObjectParameter("ClaimStatusXml", claimStatusXml) :
                new ObjectParameter("ClaimStatusXml", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var targetBAUserIDParameter = targetBAUserID.HasValue ?
                new ObjectParameter("TargetBAUserID", targetBAUserID) :
                new ObjectParameter("TargetBAUserID", typeof(int));
    
            var targetQAUserIDParameter = targetQAUserID.HasValue ?
                new ObjectParameter("TargetQAUserID", targetQAUserID) :
                new ObjectParameter("TargetQAUserID", typeof(int));
    
            var targetEAUserIDParameter = targetEAUserID.HasValue ?
                new ObjectParameter("TargetEAUserID", targetEAUserID) :
                new ObjectParameter("TargetEAUserID", typeof(int));
    
            var patientVisitComplexityParameter = patientVisitComplexity.HasValue ?
                new ObjectParameter("PatientVisitComplexity", patientVisitComplexity) :
                new ObjectParameter("PatientVisitComplexity", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_PatientVisit", patientIDParameter, dOSParameter, illnessIndicatorIDParameter, illnessIndicatorDateParameter, facilityTypeIDParameter, facilityDoneIDParameter, primaryClaimDiagnosisIDParameter, doctorNoteRelPathParameter, superBillRelPathParameter, patientVisitDescParameter, claimStatusXmlParameter, assignedToParameter, targetBAUserIDParameter, targetQAUserIDParameter, targetEAUserIDParameter, patientVisitComplexityParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, patientVisitID);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_AuthorizationInformationQualifier_Result> usp_GetAutoComplete_AuthorizationInformationQualifier(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_AuthorizationInformationQualifier_Result>("usp_GetAutoComplete_AuthorizationInformationQualifier", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_ClaimMedia_Result> usp_GetAutoComplete_ClaimMedia(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_ClaimMedia_Result>("usp_GetAutoComplete_ClaimMedia", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_CommunicationNumberQualifier_Result> usp_GetAutoComplete_CommunicationNumberQualifier(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_CommunicationNumberQualifier_Result>("usp_GetAutoComplete_CommunicationNumberQualifier", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_CurrencyCode_Result> usp_GetAutoComplete_CurrencyCode(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_CurrencyCode_Result>("usp_GetAutoComplete_CurrencyCode", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_EntityIdentifierCode_Result> usp_GetAutoComplete_EntityIdentifierCode(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_EntityIdentifierCode_Result>("usp_GetAutoComplete_EntityIdentifierCode", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_EntityTypeQualifier_Result> usp_GetAutoComplete_EntityTypeQualifier(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_EntityTypeQualifier_Result>("usp_GetAutoComplete_EntityTypeQualifier", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_InterchangeIDQualifier_Result> usp_GetAutoComplete_InterchangeIDQualifier(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_InterchangeIDQualifier_Result>("usp_GetAutoComplete_InterchangeIDQualifier", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_InterchangeUsageIndicator_Result> usp_GetAutoComplete_InterchangeUsageIndicator(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_InterchangeUsageIndicator_Result>("usp_GetAutoComplete_InterchangeUsageIndicator", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode_Result> usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode_Result>("usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_SecurityInformationQualifier_Result> usp_GetAutoComplete_SecurityInformationQualifier(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_SecurityInformationQualifier_Result>("usp_GetAutoComplete_SecurityInformationQualifier", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_TransactionSetPurposeCode_Result> usp_GetAutoComplete_TransactionSetPurposeCode(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_TransactionSetPurposeCode_Result>("usp_GetAutoComplete_TransactionSetPurposeCode", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetAutoComplete_TransactionTypeCode_Result> usp_GetAutoComplete_TransactionTypeCode(string stats)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutoComplete_TransactionTypeCode_Result>("usp_GetAutoComplete_TransactionTypeCode", statsParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_ClaimMedia_Result> usp_GetByAZ_ClaimMedia(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_ClaimMedia_Result>("usp_GetByAZ_ClaimMedia", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_EntityTypeQualifier_Result> usp_GetByAZ_EntityTypeQualifier(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_EntityTypeQualifier_Result>("usp_GetByAZ_EntityTypeQualifier", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_InterchangeUsageIndicator_Result> usp_GetByAZ_InterchangeUsageIndicator(string searchName, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_InterchangeUsageIndicator_Result>("usp_GetByAZ_InterchangeUsageIndicator", searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_AuthorizationInformationQualifier_Result> usp_GetByPkId_AuthorizationInformationQualifier(Nullable<byte> authorizationInformationQualifierID, Nullable<bool> isActive)
        {
            var authorizationInformationQualifierIDParameter = authorizationInformationQualifierID.HasValue ?
                new ObjectParameter("AuthorizationInformationQualifierID", authorizationInformationQualifierID) :
                new ObjectParameter("AuthorizationInformationQualifierID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_AuthorizationInformationQualifier_Result>("usp_GetByPkId_AuthorizationInformationQualifier", authorizationInformationQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_ClaimMedia_Result> usp_GetByPkId_ClaimMedia(Nullable<byte> claimMediaID, Nullable<bool> isActive)
        {
            var claimMediaIDParameter = claimMediaID.HasValue ?
                new ObjectParameter("ClaimMediaID", claimMediaID) :
                new ObjectParameter("ClaimMediaID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_ClaimMedia_Result>("usp_GetByPkId_ClaimMedia", claimMediaIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_CommunicationNumberQualifier_Result> usp_GetByPkId_CommunicationNumberQualifier(Nullable<byte> communicationNumberQualifierID, Nullable<bool> isActive)
        {
            var communicationNumberQualifierIDParameter = communicationNumberQualifierID.HasValue ?
                new ObjectParameter("CommunicationNumberQualifierID", communicationNumberQualifierID) :
                new ObjectParameter("CommunicationNumberQualifierID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_CommunicationNumberQualifier_Result>("usp_GetByPkId_CommunicationNumberQualifier", communicationNumberQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_CurrencyCode_Result> usp_GetByPkId_CurrencyCode(Nullable<byte> currencyCodeID, Nullable<bool> isActive)
        {
            var currencyCodeIDParameter = currencyCodeID.HasValue ?
                new ObjectParameter("CurrencyCodeID", currencyCodeID) :
                new ObjectParameter("CurrencyCodeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_CurrencyCode_Result>("usp_GetByPkId_CurrencyCode", currencyCodeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_EntityIdentifierCode_Result> usp_GetByPkId_EntityIdentifierCode(Nullable<byte> entityIdentifierCodeID, Nullable<bool> isActive)
        {
            var entityIdentifierCodeIDParameter = entityIdentifierCodeID.HasValue ?
                new ObjectParameter("EntityIdentifierCodeID", entityIdentifierCodeID) :
                new ObjectParameter("EntityIdentifierCodeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_EntityIdentifierCode_Result>("usp_GetByPkId_EntityIdentifierCode", entityIdentifierCodeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_EntityTypeQualifier_Result> usp_GetByPkId_EntityTypeQualifier(Nullable<byte> entityTypeQualifierID, Nullable<bool> isActive)
        {
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_EntityTypeQualifier_Result>("usp_GetByPkId_EntityTypeQualifier", entityTypeQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_InterchangeIDQualifier_Result> usp_GetByPkId_InterchangeIDQualifier(Nullable<byte> interchangeIDQualifierID, Nullable<bool> isActive)
        {
            var interchangeIDQualifierIDParameter = interchangeIDQualifierID.HasValue ?
                new ObjectParameter("InterchangeIDQualifierID", interchangeIDQualifierID) :
                new ObjectParameter("InterchangeIDQualifierID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_InterchangeIDQualifier_Result>("usp_GetByPkId_InterchangeIDQualifier", interchangeIDQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_InterchangeUsageIndicator_Result> usp_GetByPkId_InterchangeUsageIndicator(Nullable<byte> interchangeUsageIndicatorID, Nullable<bool> isActive)
        {
            var interchangeUsageIndicatorIDParameter = interchangeUsageIndicatorID.HasValue ?
                new ObjectParameter("InterchangeUsageIndicatorID", interchangeUsageIndicatorID) :
                new ObjectParameter("InterchangeUsageIndicatorID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_InterchangeUsageIndicator_Result>("usp_GetByPkId_InterchangeUsageIndicator", interchangeUsageIndicatorIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_PayerResponsibilitySequenceNumberCode_Result> usp_GetByPkId_PayerResponsibilitySequenceNumberCode(Nullable<byte> payerResponsibilitySequenceNumberCodeID, Nullable<bool> isActive)
        {
            var payerResponsibilitySequenceNumberCodeIDParameter = payerResponsibilitySequenceNumberCodeID.HasValue ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", payerResponsibilitySequenceNumberCodeID) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_PayerResponsibilitySequenceNumberCode_Result>("usp_GetByPkId_PayerResponsibilitySequenceNumberCode", payerResponsibilitySequenceNumberCodeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_SecurityInformationQualifier_Result> usp_GetByPkId_SecurityInformationQualifier(Nullable<byte> securityInformationQualifierID, Nullable<bool> isActive)
        {
            var securityInformationQualifierIDParameter = securityInformationQualifierID.HasValue ?
                new ObjectParameter("SecurityInformationQualifierID", securityInformationQualifierID) :
                new ObjectParameter("SecurityInformationQualifierID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_SecurityInformationQualifier_Result>("usp_GetByPkId_SecurityInformationQualifier", securityInformationQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_TransactionSetPurposeCode_Result> usp_GetByPkId_TransactionSetPurposeCode(Nullable<byte> transactionSetPurposeCodeID, Nullable<bool> isActive)
        {
            var transactionSetPurposeCodeIDParameter = transactionSetPurposeCodeID.HasValue ?
                new ObjectParameter("TransactionSetPurposeCodeID", transactionSetPurposeCodeID) :
                new ObjectParameter("TransactionSetPurposeCodeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_TransactionSetPurposeCode_Result>("usp_GetByPkId_TransactionSetPurposeCode", transactionSetPurposeCodeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_TransactionTypeCode_Result> usp_GetByPkId_TransactionTypeCode(Nullable<byte> transactionTypeCodeID, Nullable<bool> isActive)
        {
            var transactionTypeCodeIDParameter = transactionTypeCodeID.HasValue ?
                new ObjectParameter("TransactionTypeCodeID", transactionTypeCodeID) :
                new ObjectParameter("TransactionTypeCodeID", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_TransactionTypeCode_Result>("usp_GetByPkId_TransactionTypeCode", transactionTypeCodeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_AuthorizationInformationQualifier_Result> usp_GetBySearch_AuthorizationInformationQualifier(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_AuthorizationInformationQualifier_Result>("usp_GetBySearch_AuthorizationInformationQualifier", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_ClaimMedia_Result> usp_GetBySearch_ClaimMedia(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_ClaimMedia_Result>("usp_GetBySearch_ClaimMedia", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_CommunicationNumberQualifier_Result> usp_GetBySearch_CommunicationNumberQualifier(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_CommunicationNumberQualifier_Result>("usp_GetBySearch_CommunicationNumberQualifier", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_CurrencyCode_Result> usp_GetBySearch_CurrencyCode(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_CurrencyCode_Result>("usp_GetBySearch_CurrencyCode", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_EntityIdentifierCode_Result> usp_GetBySearch_EntityIdentifierCode(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_EntityIdentifierCode_Result>("usp_GetBySearch_EntityIdentifierCode", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_EntityTypeQualifier_Result> usp_GetBySearch_EntityTypeQualifier(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_EntityTypeQualifier_Result>("usp_GetBySearch_EntityTypeQualifier", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_InterchangeIDQualifier_Result> usp_GetBySearch_InterchangeIDQualifier(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_InterchangeIDQualifier_Result>("usp_GetBySearch_InterchangeIDQualifier", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_InterchangeUsageIndicator_Result> usp_GetBySearch_InterchangeUsageIndicator(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_InterchangeUsageIndicator_Result>("usp_GetBySearch_InterchangeUsageIndicator", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_PayerResponsibilitySequenceNumberCode_Result> usp_GetBySearch_PayerResponsibilitySequenceNumberCode(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_PayerResponsibilitySequenceNumberCode_Result>("usp_GetBySearch_PayerResponsibilitySequenceNumberCode", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_SecurityInformationQualifier_Result> usp_GetBySearch_SecurityInformationQualifier(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_SecurityInformationQualifier_Result>("usp_GetBySearch_SecurityInformationQualifier", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_TransactionSetPurposeCode_Result> usp_GetBySearch_TransactionSetPurposeCode(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_TransactionSetPurposeCode_Result>("usp_GetBySearch_TransactionSetPurposeCode", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_TransactionTypeCode_Result> usp_GetBySearch_TransactionTypeCode(string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_TransactionTypeCode_Result>("usp_GetBySearch_TransactionTypeCode", searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_AuthorizationInformationQualifier_Result> usp_GetIDAutoComplete_AuthorizationInformationQualifier(string authorizationInformationQualifierCode)
        {
            var authorizationInformationQualifierCodeParameter = authorizationInformationQualifierCode != null ?
                new ObjectParameter("AuthorizationInformationQualifierCode", authorizationInformationQualifierCode) :
                new ObjectParameter("AuthorizationInformationQualifierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_AuthorizationInformationQualifier_Result>("usp_GetIDAutoComplete_AuthorizationInformationQualifier", authorizationInformationQualifierCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_ClaimMedia_Result> usp_GetIDAutoComplete_ClaimMedia(string claimMediaCode)
        {
            var claimMediaCodeParameter = claimMediaCode != null ?
                new ObjectParameter("ClaimMediaCode", claimMediaCode) :
                new ObjectParameter("ClaimMediaCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_ClaimMedia_Result>("usp_GetIDAutoComplete_ClaimMedia", claimMediaCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_CommunicationNumberQualifier_Result> usp_GetIDAutoComplete_CommunicationNumberQualifier(string communicationNumberQualifierCode)
        {
            var communicationNumberQualifierCodeParameter = communicationNumberQualifierCode != null ?
                new ObjectParameter("CommunicationNumberQualifierCode", communicationNumberQualifierCode) :
                new ObjectParameter("CommunicationNumberQualifierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_CommunicationNumberQualifier_Result>("usp_GetIDAutoComplete_CommunicationNumberQualifier", communicationNumberQualifierCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_CurrencyCode_Result> usp_GetIDAutoComplete_CurrencyCode(string currencyCodeCode)
        {
            var currencyCodeCodeParameter = currencyCodeCode != null ?
                new ObjectParameter("CurrencyCodeCode", currencyCodeCode) :
                new ObjectParameter("CurrencyCodeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_CurrencyCode_Result>("usp_GetIDAutoComplete_CurrencyCode", currencyCodeCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_EntityIdentifierCode_Result> usp_GetIDAutoComplete_EntityIdentifierCode(string entityIdentifierCodeCode)
        {
            var entityIdentifierCodeCodeParameter = entityIdentifierCodeCode != null ?
                new ObjectParameter("EntityIdentifierCodeCode", entityIdentifierCodeCode) :
                new ObjectParameter("EntityIdentifierCodeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_EntityIdentifierCode_Result>("usp_GetIDAutoComplete_EntityIdentifierCode", entityIdentifierCodeCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_EntityTypeQualifier_Result> usp_GetIDAutoComplete_EntityTypeQualifier(string entityTypeQualifierCode)
        {
            var entityTypeQualifierCodeParameter = entityTypeQualifierCode != null ?
                new ObjectParameter("EntityTypeQualifierCode", entityTypeQualifierCode) :
                new ObjectParameter("EntityTypeQualifierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_EntityTypeQualifier_Result>("usp_GetIDAutoComplete_EntityTypeQualifier", entityTypeQualifierCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_InterchangeIDQualifier_Result> usp_GetIDAutoComplete_InterchangeIDQualifier(string interchangeIDQualifierCode)
        {
            var interchangeIDQualifierCodeParameter = interchangeIDQualifierCode != null ?
                new ObjectParameter("InterchangeIDQualifierCode", interchangeIDQualifierCode) :
                new ObjectParameter("InterchangeIDQualifierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_InterchangeIDQualifier_Result>("usp_GetIDAutoComplete_InterchangeIDQualifier", interchangeIDQualifierCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_InterchangeUsageIndicator_Result> usp_GetIDAutoComplete_InterchangeUsageIndicator(string interchangeUsageIndicatorCode)
        {
            var interchangeUsageIndicatorCodeParameter = interchangeUsageIndicatorCode != null ?
                new ObjectParameter("InterchangeUsageIndicatorCode", interchangeUsageIndicatorCode) :
                new ObjectParameter("InterchangeUsageIndicatorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_InterchangeUsageIndicator_Result>("usp_GetIDAutoComplete_InterchangeUsageIndicator", interchangeUsageIndicatorCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode_Result> usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode(string payerResponsibilitySequenceNumberCodeCode)
        {
            var payerResponsibilitySequenceNumberCodeCodeParameter = payerResponsibilitySequenceNumberCodeCode != null ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", payerResponsibilitySequenceNumberCodeCode) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode_Result>("usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode", payerResponsibilitySequenceNumberCodeCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_SecurityInformationQualifier_Result> usp_GetIDAutoComplete_SecurityInformationQualifier(string securityInformationQualifierCode)
        {
            var securityInformationQualifierCodeParameter = securityInformationQualifierCode != null ?
                new ObjectParameter("SecurityInformationQualifierCode", securityInformationQualifierCode) :
                new ObjectParameter("SecurityInformationQualifierCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_SecurityInformationQualifier_Result>("usp_GetIDAutoComplete_SecurityInformationQualifier", securityInformationQualifierCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_TransactionSetPurposeCode_Result> usp_GetIDAutoComplete_TransactionSetPurposeCode(string transactionSetPurposeCodeCode)
        {
            var transactionSetPurposeCodeCodeParameter = transactionSetPurposeCodeCode != null ?
                new ObjectParameter("TransactionSetPurposeCodeCode", transactionSetPurposeCodeCode) :
                new ObjectParameter("TransactionSetPurposeCodeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_TransactionSetPurposeCode_Result>("usp_GetIDAutoComplete_TransactionSetPurposeCode", transactionSetPurposeCodeCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_TransactionTypeCode_Result> usp_GetIDAutoComplete_TransactionTypeCode(string transactionTypeCodeCode)
        {
            var transactionTypeCodeCodeParameter = transactionTypeCodeCode != null ?
                new ObjectParameter("TransactionTypeCodeCode", transactionTypeCodeCode) :
                new ObjectParameter("TransactionTypeCodeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_TransactionTypeCode_Result>("usp_GetIDAutoComplete_TransactionTypeCode", transactionTypeCodeCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetMaxDiagnosis_ClaimMedia_Result> usp_GetMaxDiagnosis_ClaimMedia(Nullable<long> patientVisitID)
        {
            var patientVisitIDParameter = patientVisitID.HasValue ?
                new ObjectParameter("PatientVisitID", patientVisitID) :
                new ObjectParameter("PatientVisitID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMaxDiagnosis_ClaimMedia_Result>("usp_GetMaxDiagnosis_ClaimMedia", patientVisitIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_AuthorizationInformationQualifier_Result> usp_GetNameByID_AuthorizationInformationQualifier(Nullable<int> authorizationInformationQualifierID, Nullable<bool> isActive)
        {
            var authorizationInformationQualifierIDParameter = authorizationInformationQualifierID.HasValue ?
                new ObjectParameter("AuthorizationInformationQualifierID", authorizationInformationQualifierID) :
                new ObjectParameter("AuthorizationInformationQualifierID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_AuthorizationInformationQualifier_Result>("usp_GetNameByID_AuthorizationInformationQualifier", authorizationInformationQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_EntityTypeQualifier_Result> usp_GetNameByID_EntityTypeQualifier(Nullable<int> entityTypeQualifierID, Nullable<bool> isActive)
        {
            var entityTypeQualifierIDParameter = entityTypeQualifierID.HasValue ?
                new ObjectParameter("EntityTypeQualifierID", entityTypeQualifierID) :
                new ObjectParameter("EntityTypeQualifierID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_EntityTypeQualifier_Result>("usp_GetNameByID_EntityTypeQualifier", entityTypeQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_InterchangeUsageIndicator_Result> usp_GetNameByID_InterchangeUsageIndicator(Nullable<long> interchangeUsageIndicatorID, Nullable<bool> isActive)
        {
            var interchangeUsageIndicatorIDParameter = interchangeUsageIndicatorID.HasValue ?
                new ObjectParameter("InterchangeUsageIndicatorID", interchangeUsageIndicatorID) :
                new ObjectParameter("InterchangeUsageIndicatorID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_InterchangeUsageIndicator_Result>("usp_GetNameByID_InterchangeUsageIndicator", interchangeUsageIndicatorIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_SecurityInformationQualifier_Result> usp_GetNameByID_SecurityInformationQualifier(Nullable<int> securityInformationQualifierID, Nullable<bool> isActive)
        {
            var securityInformationQualifierIDParameter = securityInformationQualifierID.HasValue ?
                new ObjectParameter("SecurityInformationQualifierID", securityInformationQualifierID) :
                new ObjectParameter("SecurityInformationQualifierID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_SecurityInformationQualifier_Result>("usp_GetNameByID_SecurityInformationQualifier", securityInformationQualifierIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_TransactionSetPurposeCode_Result> usp_GetNameByID_TransactionSetPurposeCode(Nullable<int> transactionSetPurposeCodeID, Nullable<bool> isActive)
        {
            var transactionSetPurposeCodeIDParameter = transactionSetPurposeCodeID.HasValue ?
                new ObjectParameter("TransactionSetPurposeCodeID", transactionSetPurposeCodeID) :
                new ObjectParameter("TransactionSetPurposeCodeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_TransactionSetPurposeCode_Result>("usp_GetNameByID_TransactionSetPurposeCode", transactionSetPurposeCodeIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_TransactionTypeCode_Result> usp_GetNameByID_TransactionTypeCode(Nullable<int> transactionTypeCodeID, Nullable<bool> isActive)
        {
            var transactionTypeCodeIDParameter = transactionTypeCodeID.HasValue ?
                new ObjectParameter("TransactionTypeCodeID", transactionTypeCodeID) :
                new ObjectParameter("TransactionTypeCodeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_TransactionTypeCode_Result>("usp_GetNameByID_TransactionTypeCode", transactionTypeCodeIDParameter, isActiveParameter);
        }
    
        public virtual int usp_Insert_AuthorizationInformationQualifier(string authorizationInformationQualifierCode, string authorizationInformationQualifierName, string comment, Nullable<long> currentModificationBy, ObjectParameter authorizationInformationQualifierID)
        {
            var authorizationInformationQualifierCodeParameter = authorizationInformationQualifierCode != null ?
                new ObjectParameter("AuthorizationInformationQualifierCode", authorizationInformationQualifierCode) :
                new ObjectParameter("AuthorizationInformationQualifierCode", typeof(string));
    
            var authorizationInformationQualifierNameParameter = authorizationInformationQualifierName != null ?
                new ObjectParameter("AuthorizationInformationQualifierName", authorizationInformationQualifierName) :
                new ObjectParameter("AuthorizationInformationQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_AuthorizationInformationQualifier", authorizationInformationQualifierCodeParameter, authorizationInformationQualifierNameParameter, commentParameter, currentModificationByParameter, authorizationInformationQualifierID);
        }
    
        public virtual int usp_Insert_ClaimMedia(string claimMediaCode, string claimMediaName, Nullable<byte> maxDiagnosis, string comment, Nullable<long> currentModificationBy, ObjectParameter claimMediaID)
        {
            var claimMediaCodeParameter = claimMediaCode != null ?
                new ObjectParameter("ClaimMediaCode", claimMediaCode) :
                new ObjectParameter("ClaimMediaCode", typeof(string));
    
            var claimMediaNameParameter = claimMediaName != null ?
                new ObjectParameter("ClaimMediaName", claimMediaName) :
                new ObjectParameter("ClaimMediaName", typeof(string));
    
            var maxDiagnosisParameter = maxDiagnosis.HasValue ?
                new ObjectParameter("MaxDiagnosis", maxDiagnosis) :
                new ObjectParameter("MaxDiagnosis", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_ClaimMedia", claimMediaCodeParameter, claimMediaNameParameter, maxDiagnosisParameter, commentParameter, currentModificationByParameter, claimMediaID);
        }
    
        public virtual int usp_Insert_CommunicationNumberQualifier(string communicationNumberQualifierCode, string communicationNumberQualifierName, string comment, Nullable<long> currentModificationBy, ObjectParameter communicationNumberQualifierID)
        {
            var communicationNumberQualifierCodeParameter = communicationNumberQualifierCode != null ?
                new ObjectParameter("CommunicationNumberQualifierCode", communicationNumberQualifierCode) :
                new ObjectParameter("CommunicationNumberQualifierCode", typeof(string));
    
            var communicationNumberQualifierNameParameter = communicationNumberQualifierName != null ?
                new ObjectParameter("CommunicationNumberQualifierName", communicationNumberQualifierName) :
                new ObjectParameter("CommunicationNumberQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_CommunicationNumberQualifier", communicationNumberQualifierCodeParameter, communicationNumberQualifierNameParameter, commentParameter, currentModificationByParameter, communicationNumberQualifierID);
        }
    
        public virtual int usp_Insert_CurrencyCode(string currencyCodeCode, string currencyCodeName, string comment, Nullable<long> currentModificationBy, ObjectParameter currencyCodeID)
        {
            var currencyCodeCodeParameter = currencyCodeCode != null ?
                new ObjectParameter("CurrencyCodeCode", currencyCodeCode) :
                new ObjectParameter("CurrencyCodeCode", typeof(string));
    
            var currencyCodeNameParameter = currencyCodeName != null ?
                new ObjectParameter("CurrencyCodeName", currencyCodeName) :
                new ObjectParameter("CurrencyCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_CurrencyCode", currencyCodeCodeParameter, currencyCodeNameParameter, commentParameter, currentModificationByParameter, currencyCodeID);
        }
    
        public virtual int usp_Insert_EntityIdentifierCode(string entityIdentifierCodeCode, string entityIdentifierCodeName, string comment, Nullable<long> currentModificationBy, ObjectParameter entityIdentifierCodeID)
        {
            var entityIdentifierCodeCodeParameter = entityIdentifierCodeCode != null ?
                new ObjectParameter("EntityIdentifierCodeCode", entityIdentifierCodeCode) :
                new ObjectParameter("EntityIdentifierCodeCode", typeof(string));
    
            var entityIdentifierCodeNameParameter = entityIdentifierCodeName != null ?
                new ObjectParameter("EntityIdentifierCodeName", entityIdentifierCodeName) :
                new ObjectParameter("EntityIdentifierCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_EntityIdentifierCode", entityIdentifierCodeCodeParameter, entityIdentifierCodeNameParameter, commentParameter, currentModificationByParameter, entityIdentifierCodeID);
        }
    
        public virtual int usp_Insert_EntityTypeQualifier(string entityTypeQualifierCode, string entityTypeQualifierName, string comment, Nullable<long> currentModificationBy, ObjectParameter entityTypeQualifierID)
        {
            var entityTypeQualifierCodeParameter = entityTypeQualifierCode != null ?
                new ObjectParameter("EntityTypeQualifierCode", entityTypeQualifierCode) :
                new ObjectParameter("EntityTypeQualifierCode", typeof(string));
    
            var entityTypeQualifierNameParameter = entityTypeQualifierName != null ?
                new ObjectParameter("EntityTypeQualifierName", entityTypeQualifierName) :
                new ObjectParameter("EntityTypeQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_EntityTypeQualifier", entityTypeQualifierCodeParameter, entityTypeQualifierNameParameter, commentParameter, currentModificationByParameter, entityTypeQualifierID);
        }
    
        public virtual int usp_Insert_InterchangeIDQualifier(string interchangeIDQualifierCode, string interchangeIDQualifierName, string comment, Nullable<long> currentModificationBy, ObjectParameter interchangeIDQualifierID)
        {
            var interchangeIDQualifierCodeParameter = interchangeIDQualifierCode != null ?
                new ObjectParameter("InterchangeIDQualifierCode", interchangeIDQualifierCode) :
                new ObjectParameter("InterchangeIDQualifierCode", typeof(string));
    
            var interchangeIDQualifierNameParameter = interchangeIDQualifierName != null ?
                new ObjectParameter("InterchangeIDQualifierName", interchangeIDQualifierName) :
                new ObjectParameter("InterchangeIDQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_InterchangeIDQualifier", interchangeIDQualifierCodeParameter, interchangeIDQualifierNameParameter, commentParameter, currentModificationByParameter, interchangeIDQualifierID);
        }
    
        public virtual int usp_Insert_InterchangeUsageIndicator(string interchangeUsageIndicatorCode, string interchangeUsageIndicatorName, string comment, Nullable<long> currentModificationBy, ObjectParameter interchangeUsageIndicatorID)
        {
            var interchangeUsageIndicatorCodeParameter = interchangeUsageIndicatorCode != null ?
                new ObjectParameter("InterchangeUsageIndicatorCode", interchangeUsageIndicatorCode) :
                new ObjectParameter("InterchangeUsageIndicatorCode", typeof(string));
    
            var interchangeUsageIndicatorNameParameter = interchangeUsageIndicatorName != null ?
                new ObjectParameter("InterchangeUsageIndicatorName", interchangeUsageIndicatorName) :
                new ObjectParameter("InterchangeUsageIndicatorName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_InterchangeUsageIndicator", interchangeUsageIndicatorCodeParameter, interchangeUsageIndicatorNameParameter, commentParameter, currentModificationByParameter, interchangeUsageIndicatorID);
        }
    
        public virtual int usp_Insert_PayerResponsibilitySequenceNumberCode(string payerResponsibilitySequenceNumberCodeCode, string payerResponsibilitySequenceNumberCodeName, string comment, Nullable<long> currentModificationBy, ObjectParameter payerResponsibilitySequenceNumberCodeID)
        {
            var payerResponsibilitySequenceNumberCodeCodeParameter = payerResponsibilitySequenceNumberCodeCode != null ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", payerResponsibilitySequenceNumberCodeCode) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", typeof(string));
    
            var payerResponsibilitySequenceNumberCodeNameParameter = payerResponsibilitySequenceNumberCodeName != null ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeName", payerResponsibilitySequenceNumberCodeName) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_PayerResponsibilitySequenceNumberCode", payerResponsibilitySequenceNumberCodeCodeParameter, payerResponsibilitySequenceNumberCodeNameParameter, commentParameter, currentModificationByParameter, payerResponsibilitySequenceNumberCodeID);
        }
    
        public virtual int usp_Insert_SecurityInformationQualifier(string securityInformationQualifierCode, string securityInformationQualifierName, string comment, Nullable<long> currentModificationBy, ObjectParameter securityInformationQualifierID)
        {
            var securityInformationQualifierCodeParameter = securityInformationQualifierCode != null ?
                new ObjectParameter("SecurityInformationQualifierCode", securityInformationQualifierCode) :
                new ObjectParameter("SecurityInformationQualifierCode", typeof(string));
    
            var securityInformationQualifierNameParameter = securityInformationQualifierName != null ?
                new ObjectParameter("SecurityInformationQualifierName", securityInformationQualifierName) :
                new ObjectParameter("SecurityInformationQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_SecurityInformationQualifier", securityInformationQualifierCodeParameter, securityInformationQualifierNameParameter, commentParameter, currentModificationByParameter, securityInformationQualifierID);
        }
    
        public virtual int usp_Insert_TransactionSetPurposeCode(string transactionSetPurposeCodeCode, string transactionSetPurposeCodeName, string comment, Nullable<long> currentModificationBy, ObjectParameter transactionSetPurposeCodeID)
        {
            var transactionSetPurposeCodeCodeParameter = transactionSetPurposeCodeCode != null ?
                new ObjectParameter("TransactionSetPurposeCodeCode", transactionSetPurposeCodeCode) :
                new ObjectParameter("TransactionSetPurposeCodeCode", typeof(string));
    
            var transactionSetPurposeCodeNameParameter = transactionSetPurposeCodeName != null ?
                new ObjectParameter("TransactionSetPurposeCodeName", transactionSetPurposeCodeName) :
                new ObjectParameter("TransactionSetPurposeCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_TransactionSetPurposeCode", transactionSetPurposeCodeCodeParameter, transactionSetPurposeCodeNameParameter, commentParameter, currentModificationByParameter, transactionSetPurposeCodeID);
        }
    
        public virtual int usp_Insert_TransactionTypeCode(string transactionTypeCodeCode, string transactionTypeCodeName, string comment, Nullable<long> currentModificationBy, ObjectParameter transactionTypeCodeID)
        {
            var transactionTypeCodeCodeParameter = transactionTypeCodeCode != null ?
                new ObjectParameter("TransactionTypeCodeCode", transactionTypeCodeCode) :
                new ObjectParameter("TransactionTypeCodeCode", typeof(string));
    
            var transactionTypeCodeNameParameter = transactionTypeCodeName != null ?
                new ObjectParameter("TransactionTypeCodeName", transactionTypeCodeName) :
                new ObjectParameter("TransactionTypeCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_TransactionTypeCode", transactionTypeCodeCodeParameter, transactionTypeCodeNameParameter, commentParameter, currentModificationByParameter, transactionTypeCodeID);
        }
    
        public virtual int usp_IsExists_AuthorizationInformationQualifier(string authorizationInformationQualifierCode, string authorizationInformationQualifierName, string comment, ObjectParameter authorizationInformationQualifierID)
        {
            var authorizationInformationQualifierCodeParameter = authorizationInformationQualifierCode != null ?
                new ObjectParameter("AuthorizationInformationQualifierCode", authorizationInformationQualifierCode) :
                new ObjectParameter("AuthorizationInformationQualifierCode", typeof(string));
    
            var authorizationInformationQualifierNameParameter = authorizationInformationQualifierName != null ?
                new ObjectParameter("AuthorizationInformationQualifierName", authorizationInformationQualifierName) :
                new ObjectParameter("AuthorizationInformationQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_AuthorizationInformationQualifier", authorizationInformationQualifierCodeParameter, authorizationInformationQualifierNameParameter, commentParameter, authorizationInformationQualifierID);
        }
    
        public virtual int usp_IsExists_ClaimMedia(string claimMediaCode, string claimMediaName, Nullable<byte> maxDiagnosis, string comment, ObjectParameter claimMediaID)
        {
            var claimMediaCodeParameter = claimMediaCode != null ?
                new ObjectParameter("ClaimMediaCode", claimMediaCode) :
                new ObjectParameter("ClaimMediaCode", typeof(string));
    
            var claimMediaNameParameter = claimMediaName != null ?
                new ObjectParameter("ClaimMediaName", claimMediaName) :
                new ObjectParameter("ClaimMediaName", typeof(string));
    
            var maxDiagnosisParameter = maxDiagnosis.HasValue ?
                new ObjectParameter("MaxDiagnosis", maxDiagnosis) :
                new ObjectParameter("MaxDiagnosis", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_ClaimMedia", claimMediaCodeParameter, claimMediaNameParameter, maxDiagnosisParameter, commentParameter, claimMediaID);
        }
    
        public virtual int usp_IsExists_CommunicationNumberQualifier(string communicationNumberQualifierCode, string communicationNumberQualifierName, string comment, ObjectParameter communicationNumberQualifierID)
        {
            var communicationNumberQualifierCodeParameter = communicationNumberQualifierCode != null ?
                new ObjectParameter("CommunicationNumberQualifierCode", communicationNumberQualifierCode) :
                new ObjectParameter("CommunicationNumberQualifierCode", typeof(string));
    
            var communicationNumberQualifierNameParameter = communicationNumberQualifierName != null ?
                new ObjectParameter("CommunicationNumberQualifierName", communicationNumberQualifierName) :
                new ObjectParameter("CommunicationNumberQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_CommunicationNumberQualifier", communicationNumberQualifierCodeParameter, communicationNumberQualifierNameParameter, commentParameter, communicationNumberQualifierID);
        }
    
        public virtual int usp_IsExists_CurrencyCode(string currencyCodeCode, string currencyCodeName, string comment, ObjectParameter currencyCodeID)
        {
            var currencyCodeCodeParameter = currencyCodeCode != null ?
                new ObjectParameter("CurrencyCodeCode", currencyCodeCode) :
                new ObjectParameter("CurrencyCodeCode", typeof(string));
    
            var currencyCodeNameParameter = currencyCodeName != null ?
                new ObjectParameter("CurrencyCodeName", currencyCodeName) :
                new ObjectParameter("CurrencyCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_CurrencyCode", currencyCodeCodeParameter, currencyCodeNameParameter, commentParameter, currencyCodeID);
        }
    
        public virtual int usp_IsExists_EntityIdentifierCode(string entityIdentifierCodeCode, string entityIdentifierCodeName, string comment, ObjectParameter entityIdentifierCodeID)
        {
            var entityIdentifierCodeCodeParameter = entityIdentifierCodeCode != null ?
                new ObjectParameter("EntityIdentifierCodeCode", entityIdentifierCodeCode) :
                new ObjectParameter("EntityIdentifierCodeCode", typeof(string));
    
            var entityIdentifierCodeNameParameter = entityIdentifierCodeName != null ?
                new ObjectParameter("EntityIdentifierCodeName", entityIdentifierCodeName) :
                new ObjectParameter("EntityIdentifierCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_EntityIdentifierCode", entityIdentifierCodeCodeParameter, entityIdentifierCodeNameParameter, commentParameter, entityIdentifierCodeID);
        }
    
        public virtual int usp_IsExists_EntityTypeQualifier(string entityTypeQualifierCode, string entityTypeQualifierName, string comment, ObjectParameter entityTypeQualifierID)
        {
            var entityTypeQualifierCodeParameter = entityTypeQualifierCode != null ?
                new ObjectParameter("EntityTypeQualifierCode", entityTypeQualifierCode) :
                new ObjectParameter("EntityTypeQualifierCode", typeof(string));
    
            var entityTypeQualifierNameParameter = entityTypeQualifierName != null ?
                new ObjectParameter("EntityTypeQualifierName", entityTypeQualifierName) :
                new ObjectParameter("EntityTypeQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_EntityTypeQualifier", entityTypeQualifierCodeParameter, entityTypeQualifierNameParameter, commentParameter, entityTypeQualifierID);
        }
    
        public virtual int usp_IsExists_InterchangeIDQualifier(string interchangeIDQualifierCode, string interchangeIDQualifierName, string comment, ObjectParameter interchangeIDQualifierID)
        {
            var interchangeIDQualifierCodeParameter = interchangeIDQualifierCode != null ?
                new ObjectParameter("InterchangeIDQualifierCode", interchangeIDQualifierCode) :
                new ObjectParameter("InterchangeIDQualifierCode", typeof(string));
    
            var interchangeIDQualifierNameParameter = interchangeIDQualifierName != null ?
                new ObjectParameter("InterchangeIDQualifierName", interchangeIDQualifierName) :
                new ObjectParameter("InterchangeIDQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_InterchangeIDQualifier", interchangeIDQualifierCodeParameter, interchangeIDQualifierNameParameter, commentParameter, interchangeIDQualifierID);
        }
    
        public virtual int usp_IsExists_InterchangeUsageIndicator(string interchangeUsageIndicatorCode, string interchangeUsageIndicatorName, string comment, ObjectParameter interchangeUsageIndicatorID)
        {
            var interchangeUsageIndicatorCodeParameter = interchangeUsageIndicatorCode != null ?
                new ObjectParameter("InterchangeUsageIndicatorCode", interchangeUsageIndicatorCode) :
                new ObjectParameter("InterchangeUsageIndicatorCode", typeof(string));
    
            var interchangeUsageIndicatorNameParameter = interchangeUsageIndicatorName != null ?
                new ObjectParameter("InterchangeUsageIndicatorName", interchangeUsageIndicatorName) :
                new ObjectParameter("InterchangeUsageIndicatorName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_InterchangeUsageIndicator", interchangeUsageIndicatorCodeParameter, interchangeUsageIndicatorNameParameter, commentParameter, interchangeUsageIndicatorID);
        }
    
        public virtual int usp_IsExists_PayerResponsibilitySequenceNumberCode(string payerResponsibilitySequenceNumberCodeCode, string payerResponsibilitySequenceNumberCodeName, string comment, ObjectParameter payerResponsibilitySequenceNumberCodeID)
        {
            var payerResponsibilitySequenceNumberCodeCodeParameter = payerResponsibilitySequenceNumberCodeCode != null ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", payerResponsibilitySequenceNumberCodeCode) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", typeof(string));
    
            var payerResponsibilitySequenceNumberCodeNameParameter = payerResponsibilitySequenceNumberCodeName != null ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeName", payerResponsibilitySequenceNumberCodeName) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_PayerResponsibilitySequenceNumberCode", payerResponsibilitySequenceNumberCodeCodeParameter, payerResponsibilitySequenceNumberCodeNameParameter, commentParameter, payerResponsibilitySequenceNumberCodeID);
        }
    
        public virtual int usp_IsExists_SecurityInformationQualifier(string securityInformationQualifierCode, string securityInformationQualifierName, string comment, ObjectParameter securityInformationQualifierID)
        {
            var securityInformationQualifierCodeParameter = securityInformationQualifierCode != null ?
                new ObjectParameter("SecurityInformationQualifierCode", securityInformationQualifierCode) :
                new ObjectParameter("SecurityInformationQualifierCode", typeof(string));
    
            var securityInformationQualifierNameParameter = securityInformationQualifierName != null ?
                new ObjectParameter("SecurityInformationQualifierName", securityInformationQualifierName) :
                new ObjectParameter("SecurityInformationQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_SecurityInformationQualifier", securityInformationQualifierCodeParameter, securityInformationQualifierNameParameter, commentParameter, securityInformationQualifierID);
        }
    
        public virtual int usp_IsExists_TransactionSetPurposeCode(string transactionSetPurposeCodeCode, string transactionSetPurposeCodeName, string comment, ObjectParameter transactionSetPurposeCodeID)
        {
            var transactionSetPurposeCodeCodeParameter = transactionSetPurposeCodeCode != null ?
                new ObjectParameter("TransactionSetPurposeCodeCode", transactionSetPurposeCodeCode) :
                new ObjectParameter("TransactionSetPurposeCodeCode", typeof(string));
    
            var transactionSetPurposeCodeNameParameter = transactionSetPurposeCodeName != null ?
                new ObjectParameter("TransactionSetPurposeCodeName", transactionSetPurposeCodeName) :
                new ObjectParameter("TransactionSetPurposeCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_TransactionSetPurposeCode", transactionSetPurposeCodeCodeParameter, transactionSetPurposeCodeNameParameter, commentParameter, transactionSetPurposeCodeID);
        }
    
        public virtual int usp_IsExists_TransactionTypeCode(string transactionTypeCodeCode, string transactionTypeCodeName, string comment, ObjectParameter transactionTypeCodeID)
        {
            var transactionTypeCodeCodeParameter = transactionTypeCodeCode != null ?
                new ObjectParameter("TransactionTypeCodeCode", transactionTypeCodeCode) :
                new ObjectParameter("TransactionTypeCodeCode", typeof(string));
    
            var transactionTypeCodeNameParameter = transactionTypeCodeName != null ?
                new ObjectParameter("TransactionTypeCodeName", transactionTypeCodeName) :
                new ObjectParameter("TransactionTypeCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_TransactionTypeCode", transactionTypeCodeCodeParameter, transactionTypeCodeNameParameter, commentParameter, transactionTypeCodeID);
        }
    
        public virtual int usp_Update_AuthorizationInformationQualifier(string authorizationInformationQualifierCode, string authorizationInformationQualifierName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter authorizationInformationQualifierID)
        {
            var authorizationInformationQualifierCodeParameter = authorizationInformationQualifierCode != null ?
                new ObjectParameter("AuthorizationInformationQualifierCode", authorizationInformationQualifierCode) :
                new ObjectParameter("AuthorizationInformationQualifierCode", typeof(string));
    
            var authorizationInformationQualifierNameParameter = authorizationInformationQualifierName != null ?
                new ObjectParameter("AuthorizationInformationQualifierName", authorizationInformationQualifierName) :
                new ObjectParameter("AuthorizationInformationQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_AuthorizationInformationQualifier", authorizationInformationQualifierCodeParameter, authorizationInformationQualifierNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, authorizationInformationQualifierID);
        }
    
        public virtual int usp_Update_ClaimMedia(string claimMediaCode, string claimMediaName, Nullable<byte> maxDiagnosis, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter claimMediaID)
        {
            var claimMediaCodeParameter = claimMediaCode != null ?
                new ObjectParameter("ClaimMediaCode", claimMediaCode) :
                new ObjectParameter("ClaimMediaCode", typeof(string));
    
            var claimMediaNameParameter = claimMediaName != null ?
                new ObjectParameter("ClaimMediaName", claimMediaName) :
                new ObjectParameter("ClaimMediaName", typeof(string));
    
            var maxDiagnosisParameter = maxDiagnosis.HasValue ?
                new ObjectParameter("MaxDiagnosis", maxDiagnosis) :
                new ObjectParameter("MaxDiagnosis", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ClaimMedia", claimMediaCodeParameter, claimMediaNameParameter, maxDiagnosisParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, claimMediaID);
        }
    
        public virtual int usp_Update_CommunicationNumberQualifier(string communicationNumberQualifierCode, string communicationNumberQualifierName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter communicationNumberQualifierID)
        {
            var communicationNumberQualifierCodeParameter = communicationNumberQualifierCode != null ?
                new ObjectParameter("CommunicationNumberQualifierCode", communicationNumberQualifierCode) :
                new ObjectParameter("CommunicationNumberQualifierCode", typeof(string));
    
            var communicationNumberQualifierNameParameter = communicationNumberQualifierName != null ?
                new ObjectParameter("CommunicationNumberQualifierName", communicationNumberQualifierName) :
                new ObjectParameter("CommunicationNumberQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_CommunicationNumberQualifier", communicationNumberQualifierCodeParameter, communicationNumberQualifierNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, communicationNumberQualifierID);
        }
    
        public virtual int usp_Update_CurrencyCode(string currencyCodeCode, string currencyCodeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter currencyCodeID)
        {
            var currencyCodeCodeParameter = currencyCodeCode != null ?
                new ObjectParameter("CurrencyCodeCode", currencyCodeCode) :
                new ObjectParameter("CurrencyCodeCode", typeof(string));
    
            var currencyCodeNameParameter = currencyCodeName != null ?
                new ObjectParameter("CurrencyCodeName", currencyCodeName) :
                new ObjectParameter("CurrencyCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_CurrencyCode", currencyCodeCodeParameter, currencyCodeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, currencyCodeID);
        }
    
        public virtual int usp_Update_EntityIdentifierCode(string entityIdentifierCodeCode, string entityIdentifierCodeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter entityIdentifierCodeID)
        {
            var entityIdentifierCodeCodeParameter = entityIdentifierCodeCode != null ?
                new ObjectParameter("EntityIdentifierCodeCode", entityIdentifierCodeCode) :
                new ObjectParameter("EntityIdentifierCodeCode", typeof(string));
    
            var entityIdentifierCodeNameParameter = entityIdentifierCodeName != null ?
                new ObjectParameter("EntityIdentifierCodeName", entityIdentifierCodeName) :
                new ObjectParameter("EntityIdentifierCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_EntityIdentifierCode", entityIdentifierCodeCodeParameter, entityIdentifierCodeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, entityIdentifierCodeID);
        }
    
        public virtual int usp_Update_EntityTypeQualifier(string entityTypeQualifierCode, string entityTypeQualifierName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter entityTypeQualifierID)
        {
            var entityTypeQualifierCodeParameter = entityTypeQualifierCode != null ?
                new ObjectParameter("EntityTypeQualifierCode", entityTypeQualifierCode) :
                new ObjectParameter("EntityTypeQualifierCode", typeof(string));
    
            var entityTypeQualifierNameParameter = entityTypeQualifierName != null ?
                new ObjectParameter("EntityTypeQualifierName", entityTypeQualifierName) :
                new ObjectParameter("EntityTypeQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_EntityTypeQualifier", entityTypeQualifierCodeParameter, entityTypeQualifierNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, entityTypeQualifierID);
        }
    
        public virtual int usp_Update_InterchangeIDQualifier(string interchangeIDQualifierCode, string interchangeIDQualifierName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter interchangeIDQualifierID)
        {
            var interchangeIDQualifierCodeParameter = interchangeIDQualifierCode != null ?
                new ObjectParameter("InterchangeIDQualifierCode", interchangeIDQualifierCode) :
                new ObjectParameter("InterchangeIDQualifierCode", typeof(string));
    
            var interchangeIDQualifierNameParameter = interchangeIDQualifierName != null ?
                new ObjectParameter("InterchangeIDQualifierName", interchangeIDQualifierName) :
                new ObjectParameter("InterchangeIDQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_InterchangeIDQualifier", interchangeIDQualifierCodeParameter, interchangeIDQualifierNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, interchangeIDQualifierID);
        }
    
        public virtual int usp_Update_InterchangeUsageIndicator(string interchangeUsageIndicatorCode, string interchangeUsageIndicatorName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter interchangeUsageIndicatorID)
        {
            var interchangeUsageIndicatorCodeParameter = interchangeUsageIndicatorCode != null ?
                new ObjectParameter("InterchangeUsageIndicatorCode", interchangeUsageIndicatorCode) :
                new ObjectParameter("InterchangeUsageIndicatorCode", typeof(string));
    
            var interchangeUsageIndicatorNameParameter = interchangeUsageIndicatorName != null ?
                new ObjectParameter("InterchangeUsageIndicatorName", interchangeUsageIndicatorName) :
                new ObjectParameter("InterchangeUsageIndicatorName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_InterchangeUsageIndicator", interchangeUsageIndicatorCodeParameter, interchangeUsageIndicatorNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, interchangeUsageIndicatorID);
        }
    
        public virtual int usp_Update_PayerResponsibilitySequenceNumberCode(string payerResponsibilitySequenceNumberCodeCode, string payerResponsibilitySequenceNumberCodeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter payerResponsibilitySequenceNumberCodeID)
        {
            var payerResponsibilitySequenceNumberCodeCodeParameter = payerResponsibilitySequenceNumberCodeCode != null ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", payerResponsibilitySequenceNumberCodeCode) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeCode", typeof(string));
    
            var payerResponsibilitySequenceNumberCodeNameParameter = payerResponsibilitySequenceNumberCodeName != null ?
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeName", payerResponsibilitySequenceNumberCodeName) :
                new ObjectParameter("PayerResponsibilitySequenceNumberCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_PayerResponsibilitySequenceNumberCode", payerResponsibilitySequenceNumberCodeCodeParameter, payerResponsibilitySequenceNumberCodeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, payerResponsibilitySequenceNumberCodeID);
        }
    
        public virtual int usp_Update_SecurityInformationQualifier(string securityInformationQualifierCode, string securityInformationQualifierName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter securityInformationQualifierID)
        {
            var securityInformationQualifierCodeParameter = securityInformationQualifierCode != null ?
                new ObjectParameter("SecurityInformationQualifierCode", securityInformationQualifierCode) :
                new ObjectParameter("SecurityInformationQualifierCode", typeof(string));
    
            var securityInformationQualifierNameParameter = securityInformationQualifierName != null ?
                new ObjectParameter("SecurityInformationQualifierName", securityInformationQualifierName) :
                new ObjectParameter("SecurityInformationQualifierName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_SecurityInformationQualifier", securityInformationQualifierCodeParameter, securityInformationQualifierNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, securityInformationQualifierID);
        }
    
        public virtual int usp_Update_TransactionSetPurposeCode(string transactionSetPurposeCodeCode, string transactionSetPurposeCodeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter transactionSetPurposeCodeID)
        {
            var transactionSetPurposeCodeCodeParameter = transactionSetPurposeCodeCode != null ?
                new ObjectParameter("TransactionSetPurposeCodeCode", transactionSetPurposeCodeCode) :
                new ObjectParameter("TransactionSetPurposeCodeCode", typeof(string));
    
            var transactionSetPurposeCodeNameParameter = transactionSetPurposeCodeName != null ?
                new ObjectParameter("TransactionSetPurposeCodeName", transactionSetPurposeCodeName) :
                new ObjectParameter("TransactionSetPurposeCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_TransactionSetPurposeCode", transactionSetPurposeCodeCodeParameter, transactionSetPurposeCodeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, transactionSetPurposeCodeID);
        }
    
        public virtual int usp_Update_TransactionTypeCode(string transactionTypeCodeCode, string transactionTypeCodeName, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter transactionTypeCodeID)
        {
            var transactionTypeCodeCodeParameter = transactionTypeCodeCode != null ?
                new ObjectParameter("TransactionTypeCodeCode", transactionTypeCodeCode) :
                new ObjectParameter("TransactionTypeCodeCode", typeof(string));
    
            var transactionTypeCodeNameParameter = transactionTypeCodeName != null ?
                new ObjectParameter("TransactionTypeCodeName", transactionTypeCodeName) :
                new ObjectParameter("TransactionTypeCodeName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_TransactionTypeCode", transactionTypeCodeCodeParameter, transactionTypeCodeNameParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, transactionTypeCodeID);
        }
    
        public virtual ObjectResult<usp_GetAlertByID_User_Result> usp_GetAlertByID_User(Nullable<int> userID, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAlertByID_User_Result>("usp_GetAlertByID_User", userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetAll_User_Result> usp_GetAll_User(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAll_User_Result>("usp_GetAll_User", isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetAutocomplete_User_Result> usp_GetAutocomplete_User(string stats, Nullable<byte> managerRoleID)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutocomplete_User_Result>("usp_GetAutocomplete_User", statsParameter, managerRoleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAutocompleteClinicNew_User_Result> usp_GetAutocompleteClinicNew_User(string stats, Nullable<byte> managerRoleID)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutocompleteClinicNew_User_Result>("usp_GetAutocompleteClinicNew_User", statsParameter, managerRoleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAutocompleteNew_User_Result> usp_GetAutocompleteNew_User(string stats, Nullable<byte> managerRoleID)
        {
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAutocompleteNew_User_Result>("usp_GetAutocompleteNew_User", statsParameter, managerRoleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_User_Result> usp_GetByAZ_User(Nullable<byte> selHighRoleID, Nullable<byte> managerRoleID, Nullable<int> selManagerID, string searchName, Nullable<bool> isActive)
        {
            var selHighRoleIDParameter = selHighRoleID.HasValue ?
                new ObjectParameter("SelHighRoleID", selHighRoleID) :
                new ObjectParameter("SelHighRoleID", typeof(byte));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var selManagerIDParameter = selManagerID.HasValue ?
                new ObjectParameter("SelManagerID", selManagerID) :
                new ObjectParameter("SelManagerID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_User_Result>("usp_GetByAZ_User", selHighRoleIDParameter, managerRoleIDParameter, selManagerIDParameter, searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZ_UserRole_Result> usp_GetByAZ_UserRole(Nullable<byte> webAdminRoleID, Nullable<byte> managerRoleID, Nullable<int> selManagerID, string searchName, Nullable<bool> isActive)
        {
            var webAdminRoleIDParameter = webAdminRoleID.HasValue ?
                new ObjectParameter("WebAdminRoleID", webAdminRoleID) :
                new ObjectParameter("WebAdminRoleID", typeof(byte));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var selManagerIDParameter = selManagerID.HasValue ?
                new ObjectParameter("SelManagerID", selManagerID) :
                new ObjectParameter("SelManagerID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZ_UserRole_Result>("usp_GetByAZ_UserRole", webAdminRoleIDParameter, managerRoleIDParameter, selManagerIDParameter, searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZClinic_UserRole_Result> usp_GetByAZClinic_UserRole(Nullable<byte> webAdminRoleID, Nullable<byte> managerRoleID, Nullable<int> selManagerID, string searchName, Nullable<bool> isActive)
        {
            var webAdminRoleIDParameter = webAdminRoleID.HasValue ?
                new ObjectParameter("WebAdminRoleID", webAdminRoleID) :
                new ObjectParameter("WebAdminRoleID", typeof(byte));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var selManagerIDParameter = selManagerID.HasValue ?
                new ObjectParameter("SelManagerID", selManagerID) :
                new ObjectParameter("SelManagerID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZClinic_UserRole_Result>("usp_GetByAZClinic_UserRole", webAdminRoleIDParameter, managerRoleIDParameter, selManagerIDParameter, searchNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByAZDashboardAgent_User_Result> usp_GetByAZDashboardAgent_User(Nullable<int> userID, Nullable<bool> isWebAdmin)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isWebAdminParameter = isWebAdmin.HasValue ?
                new ObjectParameter("IsWebAdmin", isWebAdmin) :
                new ObjectParameter("IsWebAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByAZDashboardAgent_User_Result>("usp_GetByAZDashboardAgent_User", userIDParameter, isWebAdminParameter);
        }
    
        public virtual ObjectResult<usp_GetByClinicID_UserClinic_Result> usp_GetByClinicID_UserClinic(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByClinicID_UserClinic_Result>("usp_GetByClinicID_UserClinic", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByEmail_User_Result> usp_GetByEmail_User(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByEmail_User_Result>("usp_GetByEmail_User", emailParameter);
        }
    
        public virtual ObjectResult<usp_GetByID_UserClinic_Result> usp_GetByID_UserClinic(Nullable<int> userID, Nullable<int> clinicID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByID_UserClinic_Result>("usp_GetByID_UserClinic", userIDParameter, clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByManagerID_User_Result> usp_GetByManagerID_User(Nullable<int> selManagerID)
        {
            var selManagerIDParameter = selManagerID.HasValue ?
                new ObjectParameter("SelManagerID", selManagerID) :
                new ObjectParameter("SelManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByManagerID_User_Result>("usp_GetByManagerID_User", selManagerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_User_Result> usp_GetByPkId_User(Nullable<int> userID, Nullable<bool> isActive)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_User_Result>("usp_GetByPkId_User", userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_UserClinic_Result> usp_GetByPkId_UserClinic(Nullable<long> userClinicID, Nullable<bool> isActive)
        {
            var userClinicIDParameter = userClinicID.HasValue ?
                new ObjectParameter("UserClinicID", userClinicID) :
                new ObjectParameter("UserClinicID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_UserClinic_Result>("usp_GetByPkId_UserClinic", userClinicIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByPkId_UserRole_Result> usp_GetByPkId_UserRole(Nullable<long> userRoleID, Nullable<bool> isActive)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByPkId_UserRole_Result>("usp_GetByPkId_UserRole", userRoleIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_User_Result> usp_GetBySearch_User(Nullable<byte> selHighRoleID, Nullable<byte> managerRoleID, Nullable<int> selManagerID, string searchName, string startBy, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var selHighRoleIDParameter = selHighRoleID.HasValue ?
                new ObjectParameter("SelHighRoleID", selHighRoleID) :
                new ObjectParameter("SelHighRoleID", typeof(byte));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var selManagerIDParameter = selManagerID.HasValue ?
                new ObjectParameter("SelManagerID", selManagerID) :
                new ObjectParameter("SelManagerID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_User_Result>("usp_GetBySearch_User", selHighRoleIDParameter, managerRoleIDParameter, selManagerIDParameter, searchNameParameter, startByParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetBySearch_UserRole_Result> usp_GetBySearch_UserRole(Nullable<byte> webAdminRoleID, Nullable<byte> managerRoleID, Nullable<byte> eARoleID, Nullable<byte> qARoleID, Nullable<byte> bARoleID, Nullable<int> selManagerID, string searchName, string startBy, string orderByField, string orderByDirection, Nullable<bool> isActive)
        {
            var webAdminRoleIDParameter = webAdminRoleID.HasValue ?
                new ObjectParameter("WebAdminRoleID", webAdminRoleID) :
                new ObjectParameter("WebAdminRoleID", typeof(byte));
    
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var eARoleIDParameter = eARoleID.HasValue ?
                new ObjectParameter("EARoleID", eARoleID) :
                new ObjectParameter("EARoleID", typeof(byte));
    
            var qARoleIDParameter = qARoleID.HasValue ?
                new ObjectParameter("QARoleID", qARoleID) :
                new ObjectParameter("QARoleID", typeof(byte));
    
            var bARoleIDParameter = bARoleID.HasValue ?
                new ObjectParameter("BARoleID", bARoleID) :
                new ObjectParameter("BARoleID", typeof(byte));
    
            var selManagerIDParameter = selManagerID.HasValue ?
                new ObjectParameter("SelManagerID", selManagerID) :
                new ObjectParameter("SelManagerID", typeof(int));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBySearch_UserRole_Result>("usp_GetBySearch_UserRole", webAdminRoleIDParameter, managerRoleIDParameter, eARoleIDParameter, qARoleIDParameter, bARoleIDParameter, selManagerIDParameter, searchNameParameter, startByParameter, orderByFieldParameter, orderByDirectionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetByUserID_UserClinic_Result> usp_GetByUserID_UserClinic(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByUserID_UserClinic_Result>("usp_GetByUserID_UserClinic", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByUserID_UserRole_Result> usp_GetByUserID_UserRole(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByUserID_UserRole_Result>("usp_GetByUserID_UserRole", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetByUserName_User_Result> usp_GetByUserName_User(string userInput, Nullable<bool> isEmail)
        {
            var userInputParameter = userInput != null ?
                new ObjectParameter("UserInput", userInput) :
                new ObjectParameter("UserInput", typeof(string));
    
            var isEmailParameter = isEmail.HasValue ?
                new ObjectParameter("IsEmail", isEmail) :
                new ObjectParameter("IsEmail", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetByUserName_User_Result>("usp_GetByUserName_User", userInputParameter, isEmailParameter);
        }
    
        public virtual ObjectResult<usp_GetDashboardAgent_User_Result> usp_GetDashboardAgent_User(string startBy, Nullable<int> userID, Nullable<bool> isWebAdmin)
        {
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isWebAdminParameter = isWebAdmin.HasValue ?
                new ObjectParameter("IsWebAdmin", isWebAdmin) :
                new ObjectParameter("IsWebAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDashboardAgent_User_Result>("usp_GetDashboardAgent_User", startByParameter, userIDParameter, isWebAdminParameter);
        }
    
        public virtual ObjectResult<usp_GetIDAutoComplete_User_Result> usp_GetIDAutoComplete_User(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIDAutoComplete_User_Result>("usp_GetIDAutoComplete_User", userNameParameter);
        }
    
        public virtual ObjectResult<usp_GetManager_User_Result> usp_GetManager_User(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetManager_User_Result>("usp_GetManager_User", isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetManagerClinic_User_Result> usp_GetManagerClinic_User(Nullable<bool> isActive)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetManagerClinic_User_Result>("usp_GetManagerClinic_User", isActiveParameter);
        }
    
        public virtual ObjectResult<usp_GetNameByID_User_Result> usp_GetNameByID_User(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameByID_User_Result>("usp_GetNameByID_User", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNameBySync_User_Result> usp_GetNameBySync_User(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNameBySync_User_Result>("usp_GetNameBySync_User", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationAgent_User_Result> usp_GetNotificationAgent_User(Nullable<byte> roleID, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationAgent_User_Result>("usp_GetNotificationAgent_User", roleIDParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationAgentClinic_UserClinic_Result> usp_GetNotificationAgentClinic_UserClinic(Nullable<int> userID, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationAgentClinic_UserClinic_Result>("usp_GetNotificationAgentClinic_UserClinic", userIDParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationAgentClinicPdf_UserClinic_Result> usp_GetNotificationAgentClinicPdf_UserClinic(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationAgentClinicPdf_UserClinic_Result>("usp_GetNotificationAgentClinicPdf_UserClinic", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationAgentPdf_User_Result> usp_GetNotificationAgentPdf_User(Nullable<byte> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationAgentPdf_User_Result>("usp_GetNotificationAgentPdf_User", roleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationClinic_UserClinic_Result> usp_GetNotificationClinic_UserClinic(Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationClinic_UserClinic_Result>("usp_GetNotificationClinic_UserClinic", currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationClinicPdf_UserClinic_Result> usp_GetNotificationClinicPdf_UserClinic()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationClinicPdf_UserClinic_Result>("usp_GetNotificationClinicPdf_UserClinic");
        }
    
        public virtual ObjectResult<usp_GetNotificationCountAgent_User_Result> usp_GetNotificationCountAgent_User(Nullable<byte> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationCountAgent_User_Result>("usp_GetNotificationCountAgent_User", roleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationCountAgentClinic_UserClinic_Result> usp_GetNotificationCountAgentClinic_UserClinic(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationCountAgentClinic_UserClinic_Result>("usp_GetNotificationCountAgentClinic_UserClinic", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationCountClinic_UserClinic_Result> usp_GetNotificationCountClinic_UserClinic()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationCountClinic_UserClinic_Result>("usp_GetNotificationCountClinic_UserClinic");
        }
    
        public virtual ObjectResult<usp_GetNotificationCountManager_UserClinic_Result> usp_GetNotificationCountManager_UserClinic(Nullable<byte> managerRoleID)
        {
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationCountManager_UserClinic_Result>("usp_GetNotificationCountManager_UserClinic", managerRoleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationCountMultiManager_UserClinic_Result> usp_GetNotificationCountMultiManager_UserClinic(Nullable<byte> managerRoleID)
        {
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationCountMultiManager_UserClinic_Result>("usp_GetNotificationCountMultiManager_UserClinic", managerRoleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationCountRole_UserRole_Result> usp_GetNotificationCountRole_UserRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationCountRole_UserRole_Result>("usp_GetNotificationCountRole_UserRole");
        }
    
        public virtual ObjectResult<usp_GetNotificationManager_UserClinic_Result> usp_GetNotificationManager_UserClinic(Nullable<byte> managerRoleID, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationManager_UserClinic_Result>("usp_GetNotificationManager_UserClinic", managerRoleIDParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationManagerPdf_UserClinic_Result> usp_GetNotificationManagerPdf_UserClinic(Nullable<byte> managerRoleID)
        {
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationManagerPdf_UserClinic_Result>("usp_GetNotificationManagerPdf_UserClinic", managerRoleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationMultiManager_UserClinic_Result> usp_GetNotificationMultiManager_UserClinic(Nullable<byte> managerRoleID, Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationMultiManager_UserClinic_Result>("usp_GetNotificationMultiManager_UserClinic", managerRoleIDParameter, currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationMultiManagerPdf_UserClinic_Result> usp_GetNotificationMultiManagerPdf_UserClinic(Nullable<byte> managerRoleID)
        {
            var managerRoleIDParameter = managerRoleID.HasValue ?
                new ObjectParameter("ManagerRoleID", managerRoleID) :
                new ObjectParameter("ManagerRoleID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationMultiManagerPdf_UserClinic_Result>("usp_GetNotificationMultiManagerPdf_UserClinic", managerRoleIDParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationRole_UserRole_Result> usp_GetNotificationRole_UserRole(Nullable<long> currPageNumber, Nullable<short> recordsPerPage, string orderByField, string orderByDirection)
        {
            var currPageNumberParameter = currPageNumber.HasValue ?
                new ObjectParameter("CurrPageNumber", currPageNumber) :
                new ObjectParameter("CurrPageNumber", typeof(long));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(short));
    
            var orderByFieldParameter = orderByField != null ?
                new ObjectParameter("OrderByField", orderByField) :
                new ObjectParameter("OrderByField", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationRole_UserRole_Result>("usp_GetNotificationRole_UserRole", currPageNumberParameter, recordsPerPageParameter, orderByFieldParameter, orderByDirectionParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationRolePdf_UserRole_Result> usp_GetNotificationRolePdf_UserRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationRolePdf_UserRole_Result>("usp_GetNotificationRolePdf_UserRole");
        }
    
        public virtual ObjectResult<usp_GetPassword_User_Result> usp_GetPassword_User()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPassword_User_Result>("usp_GetPassword_User");
        }
    
        public virtual ObjectResult<usp_GetPasswordAge_User_Result> usp_GetPasswordAge_User(string email, Nullable<byte> pwdAge)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var pwdAgeParameter = pwdAge.HasValue ?
                new ObjectParameter("PwdAge", pwdAge) :
                new ObjectParameter("PwdAge", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPasswordAge_User_Result>("usp_GetPasswordAge_User", emailParameter, pwdAgeParameter);
        }
    
        public virtual ObjectResult<usp_GetReportAgent_User_Result> usp_GetReportAgent_User(Nullable<int> userID, string startBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var startByParameter = startBy != null ?
                new ObjectParameter("StartBy", startBy) :
                new ObjectParameter("StartBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportAgent_User_Result>("usp_GetReportAgent_User", userIDParameter, startByParameter);
        }
    
        public virtual ObjectResult<usp_GetReportAZAgent_User_Result> usp_GetReportAZAgent_User(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReportAZAgent_User_Result>("usp_GetReportAZAgent_User", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRole_UserRole_Result> usp_GetRole_UserRole(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRole_UserRole_Result>("usp_GetRole_UserRole", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRoles_UserRole_Result> usp_GetRoles_UserRole(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRoles_UserRole_Result>("usp_GetRoles_UserRole", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTeamMembers_User_Result> usp_GetTeamMembers_User(Nullable<int> clinicID)
        {
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTeamMembers_User_Result>("usp_GetTeamMembers_User", clinicIDParameter);
        }
    
        public virtual ObjectResult<usp_GetWebAdmin_User_Result> usp_GetWebAdmin_User()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetWebAdmin_User_Result>("usp_GetWebAdmin_User");
        }
    
        public virtual ObjectResult<string> usp_GetXmlAll_User()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlAll_User");
        }
    
        public virtual ObjectResult<string> usp_GetXmlClinic_UserClinic(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlClinic_UserClinic", iDParameter);
        }
    
        public virtual ObjectResult<string> usp_GetXmlNameByID_User(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetXmlNameByID_User", userIDParameter);
        }
    
        public virtual int usp_Insert_User(string userName, string password, string email, string lastName, string middleName, string firstName, string phoneNumber, Nullable<int> managerID, string photoRelPath, Nullable<bool> alertChangePassword, string comment, Nullable<bool> isBlocked, Nullable<long> currentModificationBy, ObjectParameter userID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var alertChangePasswordParameter = alertChangePassword.HasValue ?
                new ObjectParameter("AlertChangePassword", alertChangePassword) :
                new ObjectParameter("AlertChangePassword", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isBlockedParameter = isBlocked.HasValue ?
                new ObjectParameter("IsBlocked", isBlocked) :
                new ObjectParameter("IsBlocked", typeof(bool));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_User", userNameParameter, passwordParameter, emailParameter, lastNameParameter, middleNameParameter, firstNameParameter, phoneNumberParameter, managerIDParameter, photoRelPathParameter, alertChangePasswordParameter, commentParameter, isBlockedParameter, currentModificationByParameter, userID);
        }
    
        public virtual int usp_Insert_UserClinic(Nullable<int> userID, Nullable<int> clinicID, string comment, Nullable<long> currentModificationBy, ObjectParameter userClinicID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_UserClinic", userIDParameter, clinicIDParameter, commentParameter, currentModificationByParameter, userClinicID);
        }
    
        public virtual int usp_Insert_UserRole(Nullable<int> userID, Nullable<byte> roleID, string comment, Nullable<long> currentModificationBy, ObjectParameter userRoleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Insert_UserRole", userIDParameter, roleIDParameter, commentParameter, currentModificationByParameter, userRoleID);
        }
    
        public virtual int usp_IsExists_User(string userName, string password, string email, string lastName, string middleName, string firstName, string phoneNumber, Nullable<int> managerID, string photoRelPath, Nullable<bool> alertChangePassword, string comment, Nullable<bool> isBlocked, ObjectParameter userID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var alertChangePasswordParameter = alertChangePassword.HasValue ?
                new ObjectParameter("AlertChangePassword", alertChangePassword) :
                new ObjectParameter("AlertChangePassword", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isBlockedParameter = isBlocked.HasValue ?
                new ObjectParameter("IsBlocked", isBlocked) :
                new ObjectParameter("IsBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_User", userNameParameter, passwordParameter, emailParameter, lastNameParameter, middleNameParameter, firstNameParameter, phoneNumberParameter, managerIDParameter, photoRelPathParameter, alertChangePasswordParameter, commentParameter, isBlockedParameter, userID);
        }
    
        public virtual int usp_IsExists_UserClinic(Nullable<int> userID, Nullable<int> clinicID, string comment, ObjectParameter userClinicID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_UserClinic", userIDParameter, clinicIDParameter, commentParameter, userClinicID);
        }
    
        public virtual int usp_IsExists_UserRole(Nullable<int> userID, Nullable<byte> roleID, string comment, ObjectParameter userRoleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IsExists_UserRole", userIDParameter, roleIDParameter, commentParameter, userRoleID);
        }
    
        public virtual int usp_Update_User(string userName, string password, string email, string lastName, string middleName, string firstName, string phoneNumber, Nullable<int> managerID, string photoRelPath, Nullable<bool> alertChangePassword, string comment, Nullable<bool> isBlocked, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter userID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var photoRelPathParameter = photoRelPath != null ?
                new ObjectParameter("PhotoRelPath", photoRelPath) :
                new ObjectParameter("PhotoRelPath", typeof(string));
    
            var alertChangePasswordParameter = alertChangePassword.HasValue ?
                new ObjectParameter("AlertChangePassword", alertChangePassword) :
                new ObjectParameter("AlertChangePassword", typeof(bool));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isBlockedParameter = isBlocked.HasValue ?
                new ObjectParameter("IsBlocked", isBlocked) :
                new ObjectParameter("IsBlocked", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_User", userNameParameter, passwordParameter, emailParameter, lastNameParameter, middleNameParameter, firstNameParameter, phoneNumberParameter, managerIDParameter, photoRelPathParameter, alertChangePasswordParameter, commentParameter, isBlockedParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, userID);
        }
    
        public virtual int usp_Update_UserClinic(Nullable<int> userID, Nullable<int> clinicID, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter userClinicID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var clinicIDParameter = clinicID.HasValue ?
                new ObjectParameter("ClinicID", clinicID) :
                new ObjectParameter("ClinicID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_UserClinic", userIDParameter, clinicIDParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, userClinicID);
        }
    
        public virtual int usp_Update_UserRole(Nullable<int> userID, Nullable<byte> roleID, string comment, Nullable<bool> isActive, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<long> currentModificationBy, ObjectParameter userRoleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(byte));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var currentModificationByParameter = currentModificationBy.HasValue ?
                new ObjectParameter("CurrentModificationBy", currentModificationBy) :
                new ObjectParameter("CurrentModificationBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_UserRole", userIDParameter, roleIDParameter, commentParameter, isActiveParameter, lastModifiedByParameter, lastModifiedOnParameter, currentModificationByParameter, userRoleID);
        }
    }
}
