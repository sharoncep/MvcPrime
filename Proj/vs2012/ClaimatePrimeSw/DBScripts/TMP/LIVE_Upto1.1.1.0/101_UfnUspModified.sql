
/****** Object:  StoredProcedure [User].[usp_GetByUserName_User]    Script Date: 03/25/2013 14:07:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByUserName_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByUserName_User]
GO

/****** Object:  StoredProcedure [User].[usp_GetByUserName_User]    Script Date: 03/25/2013 14:07:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select a record from the table based on user name

CREATE PROCEDURE [User].[usp_GetByUserName_User] 
	@UserInput  NVARCHAR(256)
	, @IsEmail	BIT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[User].[User].*
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		@UserInput = CASE WHEN @IsEmail = 0 THEN [User].[User].[UserName] ELSE [User].[User].[Email] END
	AND 
		[User].[User].[IsBlocked] = 0
	AND
		[User].[User].[IsActive] = 1;
			
	-- EXEC [User].[usp_GetByUserName_User] 'wasai', 0
	-- EXEC [User].[usp_GetByUserName_User] 'srs@gmail.com', 1
END


GO


------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetRoles_UserRole]    Script Date: 04/11/2013 09:59:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetRoles_UserRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetRoles_UserRole]
GO

/****** Object:  StoredProcedure [User].[usp_GetRoles_UserRole]    Script Date: 04/11/2013 09:59:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [User].[usp_GetRoles_UserRole] 
	@UserID BIGINT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[AccessPrivilege].[Role].[RoleID],
		[AccessPrivilege].[Role].[RoleName]
	FROM
		[User].[UserRole] WITH (NOLOCK)
	INNER JOIN
		[AccessPrivilege].[Role]  WITH (NOLOCK)
	ON 
		[User].[UserRole].[RoleID] = [AccessPrivilege].[Role].[RoleID]
	WHERE
		[User].[UserRole].[UserID] = @UserID
	AND
		[User].[UserRole].[IsActive] = 1
	AND
		[AccessPrivilege].[Role].[IsActive] = 1
	ORDER BY
		[AccessPrivilege].[Role].[RoleID]
	ASC;
		

	-- EXEC [User].[usp_GetRoles_UserRole] 18, NULL
	-- EXEC [User].[usp_GetRoles_UserRole] 1, 1
	-- EXEC [User].[usp_GetRoles_UserRole] 1, 0
END





GO

-------------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetRole_UserRole]    Script Date: 02/25/2013 17:04:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetRole_UserRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetRole_UserRole]
GO


/****** Object:  StoredProcedure [User].[usp_GetRole_UserRole]    Script Date: 02/25/2013 17:04:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [User].[usp_GetRole_UserRole] 
	@UserID BIGINT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT TOP 1
		[AccessPrivilege].[Role].[RoleID],
		[AccessPrivilege].[Role].[RoleName]
	FROM
		[User].[UserRole]  WITH (NOLOCK)
	INNER JOIN
		[AccessPrivilege].[Role]  WITH (NOLOCK)
	ON 
		[User].[UserRole].[RoleID] = [AccessPrivilege].[Role].[RoleID]
	WHERE
		[User].[UserRole].[UserID] = @UserID
	AND
		[User].[UserRole].[IsActive] = 1
	AND
		[AccessPrivilege].[Role].[IsActive] = 1
	ORDER BY
		[AccessPrivilege].[Role].[RoleID]
	ASC;
		

	-- EXEC [User].[usp_GetRole_UserRole] 1, NULL
	-- EXEC [User].[usp_GetRole_UserRole] 1, 1
	-- EXEC [User].[usp_GetRole_UserRole] 1, 0
END


GO


----------------------------------------------------------------------

/****** Object:  StoredProcedure [AccessPrivilege].[usp_GetByPage_PageRole]    Script Date: 02/25/2013 19:54:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AccessPrivilege].[usp_GetByPage_PageRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [AccessPrivilege].[usp_GetByPage_PageRole]
GO


/****** Object:  StoredProcedure [AccessPrivilege].[usp_GetByPage_PageRole]    Script Date: 02/25/2013 19:54:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






-- Select the particular record

CREATE PROCEDURE [AccessPrivilege].[usp_GetByPage_PageRole] 
	  @RoleID TINYINT
	, @ControllerName NVARCHAR(150)
AS
BEGIN
	SET NOCOUNT ON;
	
SELECT
		 [AccessPrivilege].[Page].[PageID] 
		, [AccessPrivilege].[Page].[SessionName]
		, [AccessPrivilege].[Page].[ControllerName]
		, [AccessPrivilege].[PageRole].[PageRoleID]
		, [AccessPrivilege].[PageRole].[CreatePermission]
		, [AccessPrivilege].[PageRole].[UpdatePermission]
		, [AccessPrivilege].[PageRole].[ReadPermission]
		, [AccessPrivilege].[PageRole].[DeletePermission]
	FROM
		[AccessPrivilege].[Page]  WITH (NOLOCK)
	INNER JOIN
		[AccessPrivilege].[PageRole]  WITH (NOLOCK)
	ON 
		[AccessPrivilege].[Page].[PageID]  = [AccessPrivilege].[PageRole].[PageID]
	WHERE
		[AccessPrivilege].[PageRole].[RoleID] = @RoleID
	AND
		[AccessPrivilege].[Page].[ControllerName] = @ControllerName
	AND
		[AccessPrivilege].[Page].[IsActive] = 1
	AND
		[AccessPrivilege].[PageRole].[IsActive] = 1

	-- EXEC [AccessPrivilege].[usp_GetByPage_PageRole] 1, 'ClinicView'
	
END


GO

----------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_Clinic]    Script Date: 06/26/2013 20:26:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByAZ_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByAZ_Clinic]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_Clinic]    Script Date: 06/26/2013 20:26:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Billing].[usp_GetByAZ_Clinic] 

	@UserID		INT
	, @IsActive BIT = NULL	

AS
BEGIN
	
	SET NOCOUNT ON;
    
    DECLARE @TBL_ALL TABLE
    (
		[ClinicName] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
   
    INSERT INTO
		@TBL_ALL
	 SELECT
		[Billing].[Clinic].[ClinicName]
	FROM
		[User].[UserClinic]  WITH (NOLOCK)
	INNER JOIN 
		[Billing].[Clinic] WITH (NOLOCK)
	ON
		[Billing].[Clinic].[ClinicID]=[User].[UserClinic].[ClinicID]
	AND
		[User].[UserClinic].[UserID] = @UserID
	AND
		[User].[UserClinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[UserClinic].[IsActive] ELSE @IsActive END
	AND
	    [Billing].[Clinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Clinic].[IsActive] ELSE @IsActive END	
	ORDER BY
		[ClinicName]
	ASC;
	    
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ClinicName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Billing].[usp_GetByAZ_Clinic] 1 , 1
END


GO



-----------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Clinic]    Script Date: 06/26/2013 20:27:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearch_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearch_Clinic]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Clinic]    Script Date: 06/26/2013 20:27:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Billing].[usp_GetBySearch_Clinic]
	@UserID		INT
	, @StartBy NVARCHAR(1) = NULL
	, @IsActive BIT = NULL	
AS
BEGIN-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
    
    SELECT
		[Billing].[Clinic].[ClinicCode]	
		, [Billing].[Clinic].[ClinicName]
		, [Billing].[Clinic].[ClinicID]
		, [Billing].[Clinic].[IsActive]
	FROM
		[User].[UserClinic]  WITH (NOLOCK)
	INNER JOIN 
		[Billing].[Clinic] WITH (NOLOCK)
	ON
		[Billing].[Clinic].[ClinicID]=[User].[UserClinic].[ClinicID] 
	
	AND 
		[Billing].[Clinic].[ClinicName]
	LIKE 
		@StartBy + '%'
	AND
		[User].[UserClinic].[UserID] = @UserID
	AND
		[User].[UserClinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[UserClinic].[IsActive] ELSE @IsActive END
	AND
	    [Billing].[Clinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Clinic].[IsActive] ELSE @IsActive END	
	ORDER BY
		[ClinicName]
	ASC;
		
	
	-- EXEC [Billing].[usp_GetBySearch_Clinic] @UserID = 103 , @RoleID = 5, @StartBy='W'
END



GO



-------------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByUserID_Clinic]    Script Date: 04/22/2013 15:47:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByUserID_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByUserID_Clinic]
GO



/****** Object:  StoredProcedure [Billing].[usp_GetByUserID_Clinic]    Script Date: 04/22/2013 15:47:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select all records from the table

Create PROCEDURE [Billing].[usp_GetByUserID_Clinic] 
	@IsActive	BIT = NULL,
	@UserID  BIGINT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[User].[UserClinic].*,[Billing].[Clinic].[ClinicName]
	FROM
		[User].[UserClinic]  WITH (NOLOCK)
	INNER JOIN 
		[Billing].[Clinic] WITH (NOLOCK)
	ON
		[Billing].[Clinic].[ClinicID]=[User].[UserClinic].[ClinicID]
	AND
		[User].[UserClinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[UserClinic].[IsActive] ELSE @IsActive END
	AND
		[User].[UserClinic].[UserID] = @UserID
			
	-- EXEC [Billing].[usp_GetByUserID_Clinic] NULL
	-- EXEC [Billing].[usp_GetByUserID_Clinic] @UserID=1
	-- EXEC [Billing].[usp_GetByUserID_Clinic] 0
END


GO



-------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetByEmail_User]    Script Date: 03/20/2013 22:19:16 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByEmail_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByEmail_User]
GO

/****** Object:  StoredProcedure [User].[usp_GetByEmail_User]    Script Date: 03/20/2013 22:19:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [User].[usp_GetByEmail_User]
	@Email varchar(200)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[User].[User].*
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		[User].[Email] = @Email
	AND
		[User].[User].[IsActive] = 1;
			
	-- EXEC [User].[usp_GetAll_User] NULL
	-- EXEC [User].[usp_GetAll_User] 1
	-- EXEC [User].[usp_GetAll_User] 0
END


GO



-------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetAll_User]    Script Date: 06/14/2013 17:46:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetAll_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetAll_User]
GO


/****** Object:  StoredProcedure [User].[usp_GetAll_User]    Script Date: 06/14/2013 17:46:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [User].[usp_GetAll_User] 
	@IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[User].[User].*
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END;
			
	-- EXEC [User].[usp_GetAll_User] NULL
	-- EXEC [User].[usp_GetAll_User] 1
	-- EXEC [User].[usp_GetAll_User] 0
END

GO



-------------------------------------------------------------------------


/****** Object:  StoredProcedure [Audit].[usp_GetTrialBalance_LogInTrial]    Script Date: 05/21/2013 16:39:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetTrialBalance_LogInTrial]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetTrialBalance_LogInTrial]
GO

/****** Object:  StoredProcedure [Audit].[usp_GetTrialBalance_LogInTrial]    Script Date: 05/21/2013 16:39:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select a record from the table based on user name

CREATE PROCEDURE [Audit].[usp_GetTrialBalance_LogInTrial] 
	@Email NVARCHAR(128)
	, @TrialMaxCount TINYINT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [HAS_BALANCE] BIT NOT NULL
	);

	DECLARE @MAX_TRIAL_COUNT INT;
	SELECT @MAX_TRIAL_COUNT = @TrialMaxCount;
		
	DECLARE @TBL_TMP TABLE ([ID] BIGINT NOT NULL, [IsSuccess] BIT NOT NULL);

	INSERT INTO 
		@TBL_TMP 
	SELECT TOP (@MAX_TRIAL_COUNT) 
			[Audit].[LogInTrial].[LogInTrialID]
			, [Audit].[LogInTrial].[IsSuccess] 
	FROM 
		[Audit].[LogInTrial]  WITH (NOLOCK)
	WHERE 
		[Audit].[LogInTrial].[TrialUserName] = @Email
	ORDER BY 
		[Audit].[LogInTrial].[LogInTrialID] 
	DESC;

	WHILE ((SELECT COUNT ([T].[ID]) FROM @TBL_TMP T) < @MAX_TRIAL_COUNT)
	BEGIN
		INSERT INTO 
			@TBL_TMP 
		SELECT
			0 AS [ID]
			, 1 AS [IsSuccess]
	END
		
	IF ((SELECT COUNT ([T].[ID]) FROM @TBL_TMP T WHERE [T].[IsSuccess] = 1) = 0)
	BEGIN
		INSERT INTO
			@TBL_RES
		SELECT CAST('0' AS BIT) AS [HAS_BALANCE];
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_RES
		SELECT CAST('1' AS BIT) AS [HAS_BALANCE];
	END
	
	SELECT * FROM @TBL_RES;
	
	-- EXEC [Audit].[usp_GetTrialBalance_LogInTrial] 'sharon.joseph@in.arivameddata.com'	
END





GO



--------------------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_LogInLogOut]    Script Date: 03/13/2013 09:41:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetRecent_LogInLogOut]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetRecent_LogInLogOut]
GO

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_LogInLogOut]    Script Date: 03/13/2013 09:41:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select all records from the table

CREATE PROCEDURE [Audit].[usp_GetRecent_LogInLogOut]
	@UserID INT
AS
BEGIN
	SET NOCOUNT ON;
SELECT 
	TOP 10 
       [LogInOn]
      ,[LogOutOn]
      ,[ClientHostIPAddress]      
FROM
	[Audit].[LogInLogOut] WITH (NOLOCK)
WHERE 
	[Audit].[LogInLogOut].[UserID] = @UserID
AND 
	[Audit].[LogInLogOut].[LogOutOn] IS NOT NULL
ORDER BY
	[Audit].[LogInLogOut].[LogInOn]
DESC;
    
    -- EXEC [Audit].[usp_GetRecent_LogInLogOut] '1'
END






GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_LogInTrial]    Script Date: 03/21/2013 19:33:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetRecent_LogInTrial]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetRecent_LogInTrial]
GO

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_LogInTrial]    Script Date: 03/21/2013 19:33:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select all records from the table

CREATE PROCEDURE [Audit].[usp_GetRecent_LogInTrial]
	@UserName NVARCHAR(128) 
AS
BEGIN
	SET NOCOUNT ON;
SELECT 
	TOP 5
	   [TrialOn]
      ,[ClientHostIPAddress]
FROM
	[Audit].[LogInTrial] WITH (NOLOCK)
WHERE 
	[Audit].[LogInTrial].[TrialUserName] = @UserName
AND 
	[Audit].[LogInTrial].[IsSuccess] = 0
ORDER BY
	[Audit].[LogInTrial].[TrialOn]
DESC;
    
    -- EXEC [Audit].[usp_GetRecent_LogInTrial] 'sharon.joseph@in.arivameddata.com'
END

GO
-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_City]    Script Date: 03/27/2013 21:35:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetAutoComplete_City]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetAutoComplete_City]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_City]    Script Date: 03/27/2013 21:35:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [MasterData].[usp_GetAutoComplete_City] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([MasterData].[City].[CityName] + ' [' + [MasterData].[City].[ZipCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[City] WITH (NOLOCK)
		WHERE
			[MasterData].[City].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([MasterData].[City].[CityName] + ' [' + [MasterData].[City].[ZipCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[City] WITH (NOLOCK)
		WHERE
			([MasterData].[City].[CityName] + ' [' + [MasterData].[City].[ZipCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[MasterData].[City].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
			
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[City].[CityName] + ' [' + [MasterData].[City].[ZipCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[City] WITH (NOLOCK)
			WHERE
				[MasterData].[City].[ZipCode] LIKE @stats ESCAPE '\'
			AND
				[MasterData].[City].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[City].[CityName] + ' [' + [MasterData].[City].[ZipCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[City] WITH (NOLOCK)
			WHERE
				([MasterData].[City].[CityName] + ' [' + [MasterData].[City].[ZipCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[MasterData].[City].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;
		
	-- EXEC [MasterData].[usp_GetAutoComplete_City]
	-- EXEC [MasterData].[usp_GetAutoComplete_City] 'a'
	-- EXEC [MasterData].[usp_GetAutoComplete_City] 'Abbeville [31001-0000'
	-- EXEC [MasterData].[usp_GetAutoComplete_City] '31'
	-- EXEC [MasterData].[usp_GetAutoComplete_City] '[31'
END
GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_Country]    Script Date: 03/27/2013 21:37:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetAutoComplete_Country]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetAutoComplete_Country]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_Country]    Script Date: 03/27/2013 21:37:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [MasterData].[usp_GetAutoComplete_Country] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([MasterData].[Country].[CountryName] + ' [' +[MasterData].[Country].[CountryCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[Country] WITH (NOLOCK)
		WHERE
			[MasterData].[Country].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([MasterData].[Country].[CountryName] + ' [' +[MasterData].[Country].[CountryCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[Country] WITH (NOLOCK)
		WHERE
			([MasterData].[Country].[CountryName] + ' [' +[MasterData].[Country].[CountryCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[MasterData].[Country].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[Country].[CountryName] + ' [' +[MasterData].[Country].[CountryCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[Country] WITH (NOLOCK)
			WHERE
				[MasterData].[Country].[CountryCode]  LIKE @stats ESCAPE '\'
			AND
				[MasterData].[Country].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
			([MasterData].[Country].[CountryName] + ' [' +[MasterData].[Country].[CountryCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[Country] WITH (NOLOCK)
			WHERE
				([MasterData].[Country].[CountryName] + ' [' +[MasterData].[Country].[CountryCode] + ']')  LIKE @stats ESCAPE '\'
			AND
				[MasterData].[Country].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	-- EXEC [MasterData].[usp_GetAutoComplete_Country]  ' '
	-- EXEC [MasterData].[usp_GetAutoComplete_Country]  'i'
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_County]    Script Date: 03/27/2013 21:38:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetAutoComplete_County]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetAutoComplete_County]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_County]    Script Date: 03/27/2013 21:38:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [MasterData].[usp_GetAutoComplete_County] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([MasterData].[County].[CountyName] + ' [' +[MasterData].[County].[CountyCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[County] WITH (NOLOCK)
		WHERE
			[MasterData].[County].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([MasterData].[County].[CountyName] + ' [' +[MasterData].[County].[CountyCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[County] WITH (NOLOCK)
		WHERE
			([MasterData].[County].[CountyName] + ' [' +[MasterData].[County].[CountyCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[MasterData].[County].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
		([MasterData].[County].[CountyName] + ' [' +[MasterData].[County].[CountyCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[County] WITH (NOLOCK)
		WHERE
			[MasterData].[County].[CountyCode] LIKE @stats ESCAPE '\'
		AND
			[MasterData].[County].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
			([MasterData].[County].[CountyName] + ' [' +[MasterData].[County].[CountyCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[County] WITH (NOLOCK)
		WHERE
			([MasterData].[County].[CountyName] + ' [' +[MasterData].[County].[CountyCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[MasterData].[County].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		END
	END
SELECT * FROM @TBL_ANS;	
	-- EXEC [MasterData].[usp_GetAutoComplete_County]  ' '
	-- EXEC [MasterData].[usp_GetAutoComplete_County]  'I'
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetAutoComplete_Insurance]    Script Date: 03/27/2013 21:34:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetAutoComplete_Insurance]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetAutoComplete_Insurance]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetAutoComplete_Insurance]    Script Date: 03/27/2013 21:34:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Insurance].[usp_GetAutoComplete_Insurance] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Insurance].[Insurance].[InsuranceName] + ' [' +[Insurance].[Insurance].[InsuranceCode] + ']') AS [NAME_CODE]
		FROM
			[Insurance].[Insurance] WITH (NOLOCK)
		WHERE
			[Insurance].[Insurance].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 	
			([Insurance].[Insurance].[InsuranceName] + ' [' +[Insurance].[Insurance].[InsuranceCode] + ']') AS [NAME_CODE]
		FROM
			[Insurance].[Insurance] WITH (NOLOCK)
		WHERE
			([Insurance].[Insurance].[InsuranceName] + ' [' +[Insurance].[Insurance].[InsuranceCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Insurance].[Insurance].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;	
			
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 	
				([Insurance].[Insurance].[InsuranceName] + ' [' +[Insurance].[Insurance].[InsuranceCode] + ']') AS [NAME_CODE]
			FROM
				[Insurance].[Insurance] WITH (NOLOCK)
			WHERE
				[Insurance].[Insurance].[InsuranceCode] LIKE @stats ESCAPE '\'
			AND
				[Insurance].[Insurance].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;	
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Insurance].[Insurance].[InsuranceName] + ' [' +[Insurance].[Insurance].[InsuranceCode] + ']') AS [NAME_CODE]
			FROM
				[Insurance].[Insurance] WITH (NOLOCK)
			WHERE
				([Insurance].[Insurance].[InsuranceName] + ' [' +[Insurance].[Insurance].[InsuranceCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Insurance].[Insurance].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			END
	END
		
	SELECT * FROM @TBL_ANS;
			
	-- EXEC [Insurance].[usp_GetAutoComplete_Insurance] ' '
	-- EXEC [Insurance].[usp_GetAutoComplete_Insurance] 'I'
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_Provider]    Script Date: 07/03/2013 15:28:05 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetAutoComplete_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetAutoComplete_Provider]
GO



/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_Provider]    Script Date: 07/03/2013 15:28:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Billing].[usp_GetAutoComplete_Provider] 
	@stats	NVARCHAR (150) = NULL,
	@cliniccode int
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(400) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Billing].[Provider].[LastName] + ' ' +[Billing].[Provider].[FirstName]+ ' [' +[Billing].[Provider].[ProviderCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[Provider] WITH (NOLOCK)
		WHERE
			[Billing].[Provider].[ClinicID] = @cliniccode
		AND
			[Billing].[Provider].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 		
			([Billing].[Provider].[LastName]+ ' ' +[Billing].[Provider].[FirstName]+ ' [' +[Billing].[Provider].[ProviderCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[Provider] WITH (NOLOCK)
		WHERE
			([Billing].[Provider].[LastName] +[Billing].[Provider].[FirstName]+ ' [' +[Billing].[Provider].[ProviderCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Billing].[Provider].[ClinicID] = @cliniccode
		AND
			[Billing].[Provider].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[Provider].[LastName] + ' ' +[Billing].[Provider].[FirstName]+ ' [' +[Billing].[Provider].[ProviderCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[Provider] WITH (NOLOCK)
			WHERE
				[Billing].[Provider].[ProviderCode] LIKE @stats ESCAPE '\'
			AND
				[Billing].[Provider].[ClinicID] = @cliniccode
			AND
				[Billing].[Provider].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName]+ ' [' +[Billing].[Provider].[ProviderCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[Provider] WITH (NOLOCK)
			WHERE
				([Billing].[Provider].[LastName] +[Billing].[Provider].[FirstName]+ ' [' +[Billing].[Provider].[ProviderCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Billing].[Provider].[ClinicID] = @cliniccode
			AND
				[Billing].[Provider].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;		
	
	-- EXEC [Billing].[usp_GetAutoComplete_Provider] 'M',2
	-- EXEC [Billing].[usp_GetAutoComplete_Provider] ' ', 2
	-- EXEC [Billing].[usp_GetAutoComplete_Provider] 'A', 2
END





GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_State]    Script Date: 03/27/2013 21:39:25 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetAutoComplete_State]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetAutoComplete_State]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_State]    Script Date: 03/27/2013 21:39:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [MasterData].[usp_GetAutoComplete_State] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[State] WITH (NOLOCK)
		WHERE
			[MasterData].[State].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[State] WITH (NOLOCK)
		WHERE
			([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[MasterData].[State].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[State] WITH (NOLOCK)
			WHERE
				([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[MasterData].[State].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[State] WITH (NOLOCK)
			WHERE
				[MasterData].[State].[StateCode] LIKE @stats ESCAPE '\'
			AND
				[MasterData].[State].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[State] WITH (NOLOCK)
			WHERE
				([MasterData].[State].[StateName] + ' [' +[MasterData].[State].[StateCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[MasterData].[State].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;
			
			
	-- EXEC [MasterData].[usp_GetAutoComplete_State] ' '
	-- EXEC [MasterData].[usp_GetAutoComplete_State] 'I'
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_City]    Script Date: 03/26/2013 11:28:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetByAZ_City]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetByAZ_City]
GO


/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_City]    Script Date: 03/26/2013 11:28:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [MasterData].[usp_GetByAZ_City] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[CityName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[MasterData].[City].[CityName]
	FROM
		[MasterData].[City] WITH (NOLOCK)
	WHERE
	(
		[MasterData].[City].[CityName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[City].[ZipCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[MasterData].[City].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[City].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[CityName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [MasterData].[usp_GetByAZ_City] 
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_Patient]    Script Date: 05/08/2013 14:17:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByAZ_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByAZ_Patient]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_Patient]    Script Date: 05/08/2013 14:17:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Patient].[usp_GetByAZ_Patient]
	@ClinicID BIGINT
	, @PatientName  NVARCHAR(350) = NULL
	, @IsActive	BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @PatientName IS NULL
	BEGIN
		SET @PatientName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[LastName] [nvarchar](450) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	
	SELECT
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))
	FROM
		[Patient].[Patient] WITH (NOLOCK)
	WHERE
	(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @PatientName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @PatientName + '%' 
		)
	AND
		[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[LastName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Patient].[usp_GetByAZ_Patient] @ClinicID = 2, @PatientName = NULL, @IsActive = NULL
	-- EXEC [Patient].[usp_GetByAZ_Patient] @ClinicID = 2, @PatientName = 'iy', @IsActive = NULL
END


GO



-------------------------------------------------------------------------

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_County]    Script Date: 03/21/2013 11:55:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetIDAutoComplete_County]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetIDAutoComplete_County]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_County]    Script Date: 03/21/2013 11:55:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetIDAutoComplete_County] 
	@CountyCode	NVARCHAR(6)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [COUNTY_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[MasterData].[County].[CountyID]
	FROM
		[MasterData].[County] WITH (NOLOCK)
	WHERE
		@CountyCode = [MasterData].[County].[CountyCode]
	AND
		[MasterData].[County].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [MasterData].[usp_GetIDAutoComplete_County] '46-055'
	-- EXEC [MasterData].[usp_GetIDAutoComplete_County] 1
	-- EXEC [MasterData].[usp_GetIDAutoComplete_County] 1
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Configuration].[usp_GetByField_Password]    Script Date: 03/04/2013 12:47:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Configuration].[usp_GetByField_Password]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Configuration].[usp_GetByField_Password]
GO

/****** Object:  StoredProcedure [Configuration].[usp_GetByField_Password]    Script Date: 03/04/2013 12:47:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [Configuration].[usp_GetByField_Password] 
	@FieldName	VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		[COLUMN_NAME] [NVARCHAR](150) NOT NULL
		, [COLUMN_VALUE] [INT] NOT NULL
	);
	
	INSERT INTO 
		@TBL_ANS 
		([COLUMN_NAME], [COLUMN_VALUE])
	VALUES 
		('MinLength', ISNULL((SELECT [MinLength] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0)),
		('MaxLength', ISNULL((SELECT [MaxLength] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0)),
		('UpperClaimMinCount', ISNULL((SELECT [UpperCaseMinCount] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0)),
		('NumberMinCount', ISNULL((SELECT [NumberMinCount] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0)),
		('SplCharCount', ISNULL((SELECT [SplCharCount] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0)),
		('ExpiryDayMaxCount', ISNULL((SELECT [ExpiryDayMaxCount] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0)),
		('TrialMaxCount', ISNULL((SELECT [TrialMaxCount] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0)),
		('HistoryReuseStatus', ISNULL((SELECT [HistoryReuseStatus] FROM [Configuration].[Password] WITH (NOLOCK) WHERE [PasswordID] = 1 AND [IsActive] = 1), 0));
	
	SELECT
		[COLUMN_VALUE]
	FROM 
		@TBL_ANS
	WHERE
		[COLUMN_NAME] = @FieldName;

	--DECLARE @QRRY NVARCHAR(3999);
	--SELECT @QRRY = 'SELECT [' + @FieldName + '] FROM [Configuration].[Password]';
	--SELECT @QRRY;

	-- EXEC [Configuration].[usp_GetByField_Password] 'MaxLength'
	
END

GO



-------------------------------------------------------------------------

-------------------------------------------------------------------------

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_City]    Script Date: 03/26/2013 11:29:34 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetBySearch_City]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetBySearch_City]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_City]    Script Date: 03/26/2013 11:29:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [MasterData].[usp_GetBySearch_City]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[MasterData].[City].[CityID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'CityName' AND @OrderByDirection = 'A' THEN [MasterData].[City].[CityName] END ASC,
				CASE WHEN @orderByField = 'CityName' AND @orderByDirection = 'D' THEN [MasterData].[City].[CityName] END DESC,
				
				CASE WHEN @OrderByField = 'ZipCode' AND @OrderByDirection = 'A' THEN [MasterData].[City].[ZipCode] END ASC,
				CASE WHEN @orderByField = 'ZipCode' AND @orderByDirection = 'D' THEN [MasterData].[City].[ZipCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [MasterData].[City].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [MasterData].[City].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[MasterData].[City] WITH (NOLOCK)
	WHERE
		[MasterData].[City].[CityName] LIKE @StartBy + '%' 
	AND
	(
		[MasterData].[City].[CityName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[City].[ZipCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[MasterData].[City].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[City].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[City].[CityID], [City].[ZipCode], [City].[CityName], [City].[IsActive]
	FROM
		[City] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [City].[CityID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [MasterData].[usp_GetBySearch_City] @SearchName  = '45'
	-- EXEC [MasterData].[usp_GetBySearch_City] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_Patient]    Script Date: 05/13/2013 16:29:34 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetBySearch_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetBySearch_Patient]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_Patient]    Script Date: 05/13/2013 16:29:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Patient].[usp_GetBySearch_Patient]
	@ClinicID INT
	, @SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[Patient].[PatientID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
				
				CASE WHEN @OrderByField = 'MedicareID' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[MedicareID] END ASC,
				CASE WHEN @orderByField = 'MedicareID' AND @orderByDirection = 'D' THEN [Patient].[Patient].[MedicareID] END DESC,
				
				CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[Patient].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[Patient] WITH (NOLOCK)
	WHERE
	
	(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
	
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @SearchName + '%' 
		)
	AND
		[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		, [Patient].[PatientID]
		, [Patient].[ChartNumber]
		, [Patient].[MedicareID]
		, [Patient].[IsActive] 
	FROM
		[Patient] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Patient].[PatientID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Patient].[usp_GetBySearch_Patient] @ClinicID=2
	-- EXEC [Patient].[usp_GetBySearch_Patient] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-------------------------------------------------------------------------


-------------------------------------------------------------------------

-------------------------------------------------------------------------


/****** Object:  StoredProcedure [Insurance].[usp_GetByRelationshipName_Relationship]    Script Date: 03/04/2013 14:37:12 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetByRelationshipName_Relationship]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetByRelationshipName_Relationship]
GO



/****** Object:  StoredProcedure [Insurance].[usp_GetByRelationshipName_Relationship]    Script Date: 03/04/2013 14:37:12 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [Insurance].[usp_GetByRelationshipName_Relationship] 
	@RelationshipCode	nvarchar(9)
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Insurance].[Relationship].*
	FROM
		[Insurance].[Relationship] WITH (NOLOCK)
	WHERE
		@RelationshipCode = [Insurance].[Relationship].[RelationshipCode]
	AND
		[Insurance].[Relationship].[IsActive] = 1;

	-- EXEC [Insurance].[usp_GetByRelationshipName_Relationship] 1, NULL
	-- EXEC [Insurance].[usp_GetByRelationshipName_Relationship] 1, 1
	-- EXEC [Insurance].[usp_GetByRelationshipName_Relationship] 1, 0
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetAutoComplete_Relationship]    Script Date: 03/27/2013 21:34:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetAutoComplete_Relationship]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetAutoComplete_Relationship]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetAutoComplete_Relationship]    Script Date: 03/27/2013 21:34:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [Insurance].[usp_GetAutoComplete_Relationship] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Insurance].[Relationship].[RelationshipName] + ' [' +[Insurance].[Relationship].[RelationshipCode] + ']') AS [NAME_CODE]
		FROM
			[Insurance].[Relationship] WITH (NOLOCK)
		WHERE
			[Insurance].[Relationship].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 	
			([Insurance].[Relationship].[RelationshipName] + ' [' +[Insurance].[Relationship].[RelationshipCode] + ']') AS [NAME_CODE]
		FROM
			[Insurance].[Relationship] WITH (NOLOCK)
		WHERE
			([Insurance].[Relationship].[RelationshipName] + ' [' +[Insurance].[Relationship].[RelationshipCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Insurance].[Relationship].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
			
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Insurance].[Relationship].[RelationshipName] + ' [' +[Insurance].[Relationship].[RelationshipCode] + ']') AS [NAME_CODE]
			FROM
				[Insurance].[Relationship] WITH (NOLOCK)
			WHERE
				[Insurance].[Relationship].[RelationshipCode] LIKE @stats ESCAPE '\'
			AND
				[Insurance].[Relationship].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Insurance].[Relationship].[RelationshipName] + ' [' +[Insurance].[Relationship].[RelationshipCode] + ']') AS [NAME_CODE]
			FROM
				[Insurance].[Relationship] WITH (NOLOCK)
			WHERE
				([Insurance].[Relationship].[RelationshipName] + ' [' +[Insurance].[Relationship].[RelationshipCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Insurance].[Relationship].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
			
	-- EXEC [Insurance].[usp_GetAutoComplete_Relationship] @stats = ' '
	-- EXEC [Insurance].[usp_GetAutoComplete_Relationship] @stats = 'I'
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_County]    Script Date: 03/26/2013 11:28:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetBySearch_County]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetBySearch_County]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_County]    Script Date: 03/26/2013 11:28:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [MasterData].[usp_GetBySearch_County]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[MasterData].[County].[CountyID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'CountyName' AND @OrderByDirection = 'A' THEN [MasterData].[County].[CountyName] END ASC,
				CASE WHEN @orderByField = 'CountyName' AND @orderByDirection = 'D' THEN [MasterData].[County].[CountyName] END DESC,
						
				CASE WHEN @OrderByField = 'CountyCode' AND @OrderByDirection = 'A' THEN [MasterData].[County].[CountyCode] END ASC,
				CASE WHEN @orderByField = 'CountyCode' AND @orderByDirection = 'D' THEN [MasterData].[County].[CountyCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [MasterData].[County].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [MasterData].[County].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[MasterData].[County] WITH (NOLOCK)
	WHERE
		[MasterData].[County].[CountyName] LIKE @StartBy + '%' 
	AND
	(
		[MasterData].[County].[CountyName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[County].[CountyCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[MasterData].[County].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[County].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[County].[CountyID], [County].[CountyCode], [County].[CountyName], [County].[IsActive]
	FROM
		[County] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [County].[CountyID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [MasterData].[usp_GetBySearch_County] @SearchName  = '36'
	-- EXEC [MasterData].[usp_GetBySearch_County] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_County]    Script Date: 03/26/2013 11:27:28 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetByAZ_County]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetByAZ_County]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_County]    Script Date: 03/26/2013 11:27:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [MasterData].[usp_GetByAZ_County] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[CountyName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[MasterData].[County].[CountyName]
	FROM
		[MasterData].[County] WITH (NOLOCK)
	WHERE
	(
		[MasterData].[County].[CountyName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[County].[CountyCode] LIKE '%' + @SearchName + '%' 		
	)
	AND
		[MasterData].[County].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[County].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[CountyName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [MasterData].[usp_GetByAZ_County] 
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_PatientVisit]    Script Date: 07/05/2013 15:21:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetBySearch_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetBySearch_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_PatientVisit]    Script Date: 07/05/2013 15:21:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Patient].[usp_GetBySearch_PatientVisit]
	@StatusFrom TINYINT
	, @StatusTo TINYINT
	, @ClinicID INT
	, @PatientID BIGINT = NULL
	, @SearchName NVARCHAR(150) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, ROW_NUMBER() OVER (
			ORDER BY
			
				CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
						
				CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
								
				CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
				CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
				CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientVisit].[PatientID] = [Patient].[Patient].[PatientID]
	WHERE
		[Patient].[PatientID] = CASE WHEN @PatientID IS NULL THEN [PatientVisit].[PatientID] ELSE @PatientID END
	AND
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
		OR
			[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
		)
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;	
	
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		, [Patient].[Patient].[ChartNumber]
		, [Patient].[PatientVisit].[DOS]
		, [Patient].[PatientVisit].[PatientVisitComplexity]
		, [Patient].[PatientVisit].[TargetBAUserID]
		, [Patient].[PatientVisit].[TargetQAUserID]
		, [Patient].[PatientVisit].[TargetEAUserID]
		, [Patient].[PatientVisit].[IsActive]
		, CAST((CASE WHEN (([Patient].[PatientVisit].[ClaimStatusID] BETWEEN @StatusFrom AND @StatusTo)) THEN '1' ELSE '0' END) AS BIT) AS [CAN_UN_BLOCK]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[Patient].[PatientID]=[Patient].[PatientVisit].[PatientID]
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] =[Patient].[PatientVisit].[PatientVisitID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] @StatusFrom = '1', @StatusTo = '9' , @UserID = '101', @ClinicID = '1'
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] @StatusFrom = '1', @StatusTo = '9' , @UserID = '101', @ClinicID = '1', @SearchName  = '23197'
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] @StatusFrom = '1', @StatusTo = '9' , @UserID = '101', @ClinicID = '1', @SearchName  = 'RITBE000'
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] @StatusFrom = '1', @StatusTo = '9' , @UserID = '101', @ClinicID = '1', @SearchName  = '', @StartBy = 'A', @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_PatientVisit]    Script Date: 07/05/2013 15:23:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByAZ_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByAZ_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_PatientVisit]    Script Date: 07/05/2013 15:23:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Patient].[usp_GetByAZ_PatientVisit] 
	 @ClinicID INT
	, @SearchName NVARCHAR(350) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @PatientID BIGINT = NULL
	, @IsActive	BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ChartNumber] [nvarchar](350) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	
	SELECT
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientID]=[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientID] = CASE WHEN @PatientID IS NULL THEN [PatientVisit].[PatientID] ELSE @PatientID END
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '') ))) ) LIKE '%' + @SearchName + '%' 
		OR
			[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
		)
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END
	ORDER BY
		[Patient].[PatientVisit].[LastModifiedBy]
	DESC;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ChartNumber] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Patient].[usp_GetByAZ_PatientVisit] @ClinicID= 2
	-- EXEC [Patient].[usp_GetByAZ_PatientVisit] @ClinicID= 2, @SearchName='RAT', @PatientID = NULL
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetAutoComplete_Patient]    Script Date: 03/27/2013 21:39:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAutoComplete_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAutoComplete_Patient]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetAutoComplete_Patient]    Script Date: 03/27/2013 21:39:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select all records from the table

CREATE PROCEDURE [Patient].[usp_GetAutoComplete_Patient] 
	@ClinicID int
	, @stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
		FROM
			[Patient].[Patient] WITH (NOLOCK)
		WHERE
			[Patient].[Patient].[ClinicID] = @ClinicID
		AND
			[Patient].[Patient].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 	
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
		FROM
			[Patient].[Patient] WITH (NOLOCK)
		WHERE
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE @stats ESCAPE '\'
		AND
			[Patient].[Patient].[ClinicID] = @ClinicID
		AND
			[Patient].[Patient].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
			FROM
				[Patient].[Patient] WITH (NOLOCK)
			WHERE
				[Patient].[Patient].[ChartNumber] LIKE @stats ESCAPE '\'
			AND
				[Patient].[Patient].[ClinicID] = @ClinicID
			AND
				[Patient].[Patient].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 		
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
			FROM
				[Patient].[Patient] WITH (NOLOCK)
			WHERE
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE @stats ESCAPE '\'
			AND
				[Patient].[Patient].[ClinicID] = @ClinicID
			AND
				[Patient].[Patient].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;	
	-- EXEC [Patient].[usp_GetAutoComplete_Patient] @ClinicID = '2', @stats = 'XAVC'
	-- EXEC [Patient].[usp_GetAutoComplete_Patient] @ClinicID = '2', @stats = ' '
END





GO



-------------------------------------------------------------------------


-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_FacilityType]    Script Date: 03/27/2013 21:32:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetAutoComplete_FacilityType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetAutoComplete_FacilityType]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_FacilityType]    Script Date: 03/27/2013 21:32:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Billing].[usp_GetAutoComplete_FacilityType] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[FacilityType] WITH (NOLOCK)
		WHERE
			[Billing].[FacilityType].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[FacilityType] WITH (NOLOCK)
		WHERE
			([Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Billing].[FacilityType].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[FacilityType] WITH (NOLOCK)
			WHERE
				[Billing].[FacilityType].[FacilityTypeCode] LIKE @stats ESCAPE '\'
			AND
				[Billing].[FacilityType].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[FacilityType] WITH (NOLOCK)
			WHERE
				([Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Billing].[FacilityType].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Billing].[usp_GetAutoComplete_FacilityType] 'I'
	---- EXEC [Billing].[usp_GetAutoComplete_FacilityType] '00'
	
	
	
END





GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_IllnessIndicator]    Script Date: 03/27/2013 21:33:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetAutoComplete_IllnessIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetAutoComplete_IllnessIndicator]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_IllnessIndicator]    Script Date: 03/27/2013 21:33:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Diagnosis].[usp_GetAutoComplete_IllnessIndicator] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Diagnosis].[IllnessIndicator].[IllnessIndicatorName] + ' [' +[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] + ']') AS [NAME_CODE]
		FROM
			[Diagnosis].[IllnessIndicator] WITH (NOLOCK)
		WHERE
			[Diagnosis].[IllnessIndicator].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Diagnosis].[IllnessIndicator].[IllnessIndicatorName] + ' [' +[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] + ']') AS [NAME_CODE]
		FROM
			[Diagnosis].[IllnessIndicator] WITH (NOLOCK)
		WHERE
			([Diagnosis].[IllnessIndicator].[IllnessIndicatorName] + ' [' +[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Diagnosis].[IllnessIndicator].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Diagnosis].[IllnessIndicator].[IllnessIndicatorName] + ' [' +[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[IllnessIndicator] WITH (NOLOCK)
			WHERE
				[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[IllnessIndicator].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
			([Diagnosis].[IllnessIndicator].[IllnessIndicatorName] + ' [' +[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[IllnessIndicator] WITH (NOLOCK)
			WHERE
				([Diagnosis].[IllnessIndicator].[IllnessIndicatorName] + ' [' +[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[IllnessIndicator].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
			
			
			
	---- EXEC [Diagnosis].[usp_GetAutoComplete_IllnessIndicator] ' '
	---- EXEC [Diagnosis].[usp_GetAutoComplete_IllnessIndicator] '00'
	
	
	
END




GO



-------------------------------------------------------------------------

-------------------------------------------------------------------------


-------------------------------------------------------------------------


-------------------------------------------------------------------------

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetPasswordAge_User]    Script Date: 05/16/2013 08:49:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetPasswordAge_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetPasswordAge_User]
GO



/****** Object:  StoredProcedure [User].[usp_GetPasswordAge_User]    Script Date: 05/16/2013 08:49:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select a record from the table based on user name

CREATE PROCEDURE [User].[usp_GetPasswordAge_User] 
	@Email NVARCHAR(256)
	, @PwdAge TINYINT	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @UserID INT;
	DECLARE @TBL_ANS TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [IS_AGED] BIT NOT NULL
	);
	
	SELECT @UserID = [User].[User].[UserID] FROM [User].[User] WITH (NOLOCK) WHERE [User].[User].[Email] = @Email
	
	IF @PwdAge = 0
		BEGIN
			INSERT INTO @TBL_ANS SELECT CAST('0' AS BIT) AS [IS_AGED];
		END	
	ELSE
		DECLARE @pwdDate DATETIME
		
		SELECT 
			@pwdDate = MAX([Audit].[UserPassword].[CreatedOn]) 
		FROM 
			[Audit].[UserPassword] WITH (NOLOCK)
		WHERE
			[Audit].[UserPassword].[UserID] = @UserID;
			
		IF @pwdDate IS NULL
		BEGIN
			SELECT @pwdDate = '1900-01-01';
		END
		
		IF (DATEDIFF(DAY, @pwdDate, GETDATE()) >= @PwdAge)
		BEGIN
			INSERT INTO @TBL_ANS SELECT CAST('1' AS BIT) AS [IS_AGED];
		END
		ELSE
		BEGIN
			INSERT INTO @TBL_ANS SELECT CAST('0' AS BIT) AS [IS_AGED];
		END
		
		SELECT * FROM @TBL_ANS;
		
	-- EXEC [User].[usp_GetPasswordAge_User] @Email = 'sharon.joseph@in.arivameddata.com', @PwdAge = 5
END

GO



-------------------------------------------------------------------------

-------------------------------------------------------------------------

-------------------------------------------------------------------------

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Clinic]    Script Date: 03/21/2013 11:40:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIDAutoComplete_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIDAutoComplete_Clinic]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Clinic]    Script Date: 03/21/2013 11:40:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetIDAutoComplete_Clinic] 
	@ClinicCode	nvarchar(5)
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [CLINIC_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Billing].[Clinic].[ClinicID]
	FROM
		[Billing].[Clinic] WITH (NOLOCK)
	WHERE
		@ClinicCode = [Billing].[Clinic].[ClinicCode]
	AND
		[Billing].[Clinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Clinic].[IsActive] ELSE @IsActive END;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetIDAutoComplete_Clinic] 1, NULL
	-- EXEC [Billing].[usp_GetIDAutoComplete_Clinic] 1, 1
	-- EXEC [Billing].[usp_GetIDAutoComplete_Clinic] 1, 0
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_UserRoleSelect]    Script Date: 03/21/2013 11:15:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetRecent_UserRoleSelect]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetRecent_UserRoleSelect]
GO


/****** Object:  StoredProcedure [Audit].[usp_GetRecent_UserRoleSelect]    Script Date: 03/21/2013 11:15:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Audit].[usp_GetRecent_UserRoleSelect]
	@UserID INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @RoleID TINYINT;

    SELECT TOP 1
		@RoleID = [Audit].[UserRoleSelect].[RoleID]
	FROM
		[Audit].[UserRoleSelect] WITH (NOLOCK)
	WHERE
		[Audit].[UserRoleSelect].[UserID] = @UserID
	ORDER BY
		[Audit].[UserRoleSelect].[AuditOn]
	DESC;
	
	IF @RoleID IS NULL
	BEGIN
		SELECT @RoleID = 0;
	END
	
	DECLARE @TBL_ANS TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [ROLE_ID] TINYINT NOT NULL
	);
	
	INSERT INTO
		@TBL_ANS
	SELECT
		@RoleID;
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Audit].[usp_GetRecent_UserRoleSelect] 1
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_UserClinicSelect]    Script Date: 03/13/2013 10:33:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetRecent_UserClinicSelect]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetRecent_UserClinicSelect]
GO


/****** Object:  StoredProcedure [Audit].[usp_GetRecent_UserClinicSelect]    Script Date: 03/13/2013 10:33:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Audit].[usp_GetRecent_UserClinicSelect]
	@UserID INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @ClinicID INT;

    SELECT TOP 1
		@ClinicID = [Audit].[UserClinicSelect].[ClinicID]
	FROM
		[Audit].[UserClinicSelect] WITH (NOLOCK)
	WHERE
		[Audit].[UserClinicSelect].[UserID] = @UserID
	ORDER BY
		[Audit].[UserClinicSelect].[AuditOn]
	DESC;
	
	IF @ClinicID IS NULL
	BEGIN
		SELECT @ClinicID = 0;
	END
	
	DECLARE @TBL_ANS TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		,[CLINIC_ID] INT NOT NULL
	);
	
	INSERT INTO
		@TBL_ANS
	SELECT
		@ClinicID;
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Audit].[usp_GetRecent_UserClinicSelect] 1
END


GO




-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetDOSByID_PatientVisit]    Script Date: 03/21/2013 12:28:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetDOSByID_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetDOSByID_PatientVisit]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetDOSByID_PatientVisit]    Script Date: 03/21/2013 12:28:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Patient].[usp_GetDOSByID_PatientVisit] 
	@PatientVisitID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [DOS] DATE NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Patient].[PatientVisit].[DOS]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	WHERE
		@PatientVisitID = [Patient].[PatientVisit].[PatientVisitID]
	AND
		[Patient].[PatientVisit].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientVisit].[IsActive] ELSE @IsActive END;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Patient].[usp_GetByPkIdChartNumber_Patient] 8, NULL
	-- EXEC [Patient].[usp_GetByPkId_Patient] 1, 1
	-- EXEC [Patient].[usp_GetByPkId_Patient] 1, 0
END


GO

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_PatientHospitalization]    Script Date: 06/10/2013 10:47:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetBySearch_PatientHospitalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetBySearch_PatientHospitalization]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_PatientHospitalization]    Script Date: 06/10/2013 10:47:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Patient].[usp_GetBySearch_PatientHospitalization]
     @ClinicTypeID	TINYINT
    , @ClinicID	INT  
	, @ChartNumber NVARCHAR(150) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @PatientID BIGINT = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
	
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @ChartNumber IS NULL
	BEGIN
		SET @ChartNumber = '';
	END
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientHospitalization].[PatientHospitalizationID]
		, ROW_NUMBER() OVER (
			ORDER BY
			
			CASE WHEN @OrderByField = 'Name ' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,						
						
				CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
								
				CASE WHEN @OrderByField = 'FacilityDoneName' AND @OrderByDirection = 'A' THEN [Billing].[FacilityDone].[FacilityDoneName] END ASC,
				CASE WHEN @orderByField = 'FacilityDoneName' AND @orderByDirection = 'D' THEN [Billing].[FacilityDone].[FacilityDoneName] END DESC,
				
				CASE WHEN @OrderByField = 'AdmittedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientHospitalization].[AdmittedOn] END ASC,
				CASE WHEN @orderByField = 'AdmittedOn' AND @orderByDirection = 'D' THEN [Patient].[PatientHospitalization].[AdmittedOn] END DESC,				
				
				CASE WHEN @OrderByField = 'DischargedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientHospitalization].[DischargedOn] END ASC,
				CASE WHEN @orderByField = 'DischargedOn' AND @orderByDirection = 'D' THEN [Patient].[PatientHospitalization].[DischargedOn] END DESC,

				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientHospitalization].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientHospitalization].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientHospitalization] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[Patient].[PatientID] = [Patient].[PatientHospitalization].[PatientID]
	INNER JOIN
		[Billing].[FacilityDone] WITH (NOLOCK)
	ON 
		[Billing].[FacilityDone].[FacilityDoneID] = [Patient].[PatientHospitalization].[FacilityDoneHospitalID]
	INNER JOIN
		[Billing].[Clinic] WITH (NOLOCK)
	ON 
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]
	WHERE
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @ChartNumber + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @ChartNumber + '%' 
		)
    AND
		[Patient].[PatientHospitalization].[AdmittedOn] BETWEEN @DateFrom AND @DateTo
	AND
		[Patient].[Patient].[PatientID] = CASE WHEN @PatientID IS NULL THEN [Patient].[Patient].[PatientID] ELSE @PatientID END
	AND
		[Billing].[FacilityDone].[FacilityTypeID] = @ClinicTypeID
	AND
		[Billing].[Clinic].[ClinicID] = @ClinicID	
	AND
		[Patient].[PatientHospitalization].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientHospitalization].[IsActive] ELSE @IsActive END
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END
	AND
		[Billing].[FacilityDone].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[FacilityDone].[IsActive] ELSE @IsActive END;
	
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Patient].[PatientHospitalization].[PatientHospitalizationID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		, [Patient].[PatientHospitalization].[AdmittedOn]
		, [Patient].[PatientHospitalization].[DischargedOn]
		, [Billing].[FacilityDone].[FacilityDoneName]
		, [Patient].[Patient].[ChartNumber]
		, [Patient].[PatientHospitalization].[IsActive]
	FROM
		[Patient].[PatientHospitalization] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] =[Patient].[PatientHospitalization].[PatientHospitalizationID]
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[Patient].[PatientID] = [Patient].[PatientHospitalization].[PatientID]
	INNER JOIN
		[Billing].[FacilityDone] WITH (NOLOCK)
	ON 
		[Billing].[FacilityDone].[FacilityDoneID] = [Patient].[PatientHospitalization].[FacilityDoneHospitalID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	-- EXEC [Patient].[usp_GetBySearch_PatientHospitalization] @ClinicTypeID = 2
	-- EXEC [Patient].[usp_GetBySearch_PatientHospitalization] @ClinicTypeID = 2, @ChartNumber  = NULL, @StartBy = NULL, @PatientID = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetAlertByID_User]    Script Date: 03/21/2013 12:25:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetAlertByID_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetAlertByID_User]
GO


/****** Object:  StoredProcedure [User].[usp_GetAlertByID_User]    Script Date: 03/21/2013 12:25:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [User].[usp_GetAlertByID_User] 
	@UserID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [ALERT_CHANGE_PASSWORD] BIT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[User].[User].[AlertChangePassword]
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		@UserID = [User].[User].[UserID]
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [User].[usp_GetAlertById_User] 1, NULL
	-- EXEC [User].[usp_GetAlertById_User] 1, 1
	-- EXEC [User].[usp_GetAlertById_User] 1, 0
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetNameByID_IllnessIndicator]    Script Date: 03/21/2013 12:10:16 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetNameByID_IllnessIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetNameByID_IllnessIndicator]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetNameByID_IllnessIndicator]    Script Date: 03/21/2013 12:10:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Diagnosis].[usp_GetNameByID_IllnessIndicator] 
	@IllnessIndicatorID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		([Diagnosis].[IllnessIndicator].[IllnessIndicatorName] + ' [' +[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] + ']') AS [NAME_CODE]
	FROM
		[Diagnosis].[IllnessIndicator] WITH (NOLOCK)
	WHERE
		@IllnessIndicatorID = [Diagnosis].[IllnessIndicator].[IllnessIndicatorID]
	AND
		[Diagnosis].[IllnessIndicator].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[IllnessIndicator].[IsActive] ELSE @IsActive END;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Diagnosis].[usp_GetNameByID_IllnessIndicator] 8, NULL
	
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_Country]    Script Date: 04/04/2013 17:03:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetByAZ_Country]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetByAZ_Country]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_Country]    Script Date: 04/04/2013 17:03:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [MasterData].[usp_GetByAZ_Country] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[CountryName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[MasterData].[Country].[CountryName]
	FROM
		[MasterData].[Country] WITH (NOLOCK)
	WHERE
	(
		[MasterData].[Country].[CountryName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[Country].[CountryCode] LIKE '%' + @SearchName + '%' 		
	)
	AND
		[MasterData].[Country].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[Country].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[CountryName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [MasterData].[usp_GetByAZ_Country] 
END



GO


-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetFacilityDoneNameByID_Clinic]    Script Date: 03/15/2013 12:03:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetFacilityDoneNameByID_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetFacilityDoneNameByID_Clinic]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetFacilityDoneNameByID_Clinic]    Script Date: 03/15/2013 12:03:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetFacilityDoneNameByID_Clinic] 
	@ClinicID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NAME_CODE] NVARCHAR(200) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		([Billing].[Clinic].[ClinicName] + ' [' +[Billing].[Clinic].[ClinicCode] + ']') AS [NAME_CODE]
	FROM
		[Billing].[Clinic] WITH (NOLOCK)
	WHERE
		@ClinicID = [Billing].[Clinic].[ClinicID]
	AND
		[Billing].[Clinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Clinic].[IsActive] ELSE @IsActive END;

	SELECT * FROM @TBL_RES;
	
	-- EXEC [Billing].[usp_GetFacilityDoneNameByID_Clinic] 1, NULL
	
END

GO

-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_FacilityDone]    Script Date: 03/21/2013 12:15:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetNameByID_FacilityDone]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetNameByID_FacilityDone]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_FacilityDone]    Script Date: 03/21/2013 12:15:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetNameByID_FacilityDone] 
	@FacilityDoneID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;	

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		([Billing].[FacilityDone].[FacilityDoneName] + ' [' +[Billing].[FacilityDone].[FacilityDoneCode] + ']') AS [NAME_CODE]
	FROM
		[Billing].[FacilityDone] WITH (NOLOCK)
	WHERE
		@FacilityDoneID = [Billing].[FacilityDone].[FacilityDoneID]
	AND
		[Billing].[FacilityDone].[IsActive]=1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetNameByID_FacilityDone] 1, NULL
	
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_FacilityDone]    Script Date: 03/27/2013 21:32:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetAutoComplete_FacilityDone]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetAutoComplete_FacilityDone]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_FacilityDone]    Script Date: 03/27/2013 21:32:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Billing].[usp_GetAutoComplete_FacilityDone] 
	@stats	NVARCHAR (150) = NULL
	, @PosID TINYINT
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Billing].[FacilityDone].[FacilityDoneName] + ' [' +[Billing].[FacilityDone].[FacilityDoneCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[FacilityDone] WITH (NOLOCK)
		WHERE
			[Billing].[FacilityDone].[FacilityTypeID] = @PosID
		AND
			[Billing].[FacilityDone].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Billing].[FacilityDone].[FacilityDoneName] + ' [' +[Billing].[FacilityDone].[FacilityDoneCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[FacilityDone] WITH (NOLOCK)
		WHERE
			([Billing].[FacilityDone].[FacilityDoneName] + ' [' +[Billing].[FacilityDone].[FacilityDoneCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Billing].[FacilityDone].[FacilityTypeID] = @PosID
		AND
			[Billing].[FacilityDone].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
			
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[FacilityDone].[FacilityDoneName] + ' [' +[Billing].[FacilityDone].[FacilityDoneCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[FacilityDone] WITH (NOLOCK)
			WHERE
				[Billing].[FacilityDone].[FacilityDoneCode] LIKE @stats ESCAPE '\'
			AND
				[Billing].[FacilityDone].[FacilityTypeID] = @PosID
			AND
				[Billing].[FacilityDone].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[FacilityDone].[FacilityDoneName] + ' [' +[Billing].[FacilityDone].[FacilityDoneCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[FacilityDone] WITH (NOLOCK)
			WHERE
				([Billing].[FacilityDone].[FacilityDoneName] + ' [' +[Billing].[FacilityDone].[FacilityDoneCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Billing].[FacilityDone].[FacilityTypeID] = @PosID
			AND
				[Billing].[FacilityDone].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
			
				
	---- EXEC [Billing].[usp_GetAutoComplete_FacilityDone] @stats='', @PosID=3
	---- EXEC [Billing].[usp_GetAutoComplete_FacilityDone] '00'
	
	
	
END





GO


-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_FacilityDone]    Script Date: 07/06/2013 17:09:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIDAutoComplete_FacilityDone]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIDAutoComplete_FacilityDone]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_FacilityDone]    Script Date: 07/06/2013 17:09:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetIDAutoComplete_FacilityDone] 
	@FacilityDoneCode	nvarchar(10)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [FACILITY_DONE_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Billing].[FacilityDone].[FacilityDoneID]
	FROM
		[Billing].[FacilityDone] WITH (NOLOCK)
	WHERE
		@FacilityDoneCode = [Billing].[FacilityDone].[FacilityDoneCode]
	AND
		[Billing].[FacilityDone].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetIDAutoComplete_FacilityDone] 'C02'
	-- EXEC [Billing].[usp_GetByPkId_FacilityDone] 1, 1
	-- EXEC [Billing].[usp_GetByPkId_FacilityDone] 1, 0
END




GO



-------------------------------------------------------------------------

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_PatientDocument]    Script Date: 05/31/2013 11:59:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetBySearch_PatientDocument]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetBySearch_PatientDocument]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetBySearch_PatientDocument]    Script Date: 05/31/2013 11:59:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Patient].[usp_GetBySearch_PatientDocument] 
	 @SearchName NVARCHAR(350) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL	
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
	
	IF @StartBy IS NULL
	BEGIN
		SELECT @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientDocument].[PatientDocumentID]
		, ROW_NUMBER() OVER (
			ORDER BY
				CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
						
				CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
								
				CASE WHEN @OrderByField = 'DocumentCategoryName' AND @OrderByDirection = 'A' THEN [MasterData].[DocumentCategory].[DocumentCategoryName] END ASC,
				CASE WHEN @orderByField = 'DocumentCategoryName' AND @orderByDirection = 'D' THEN [MasterData].[DocumentCategory].[DocumentCategoryName] END DESC,
								

				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientDocument].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientDocument].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientDocument] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientDocument].[PatientID] = [Patient].[Patient].[PatientID]		
	INNER JOIN
		[MasterData].[DocumentCategory] WITH (NOLOCK)
	ON 
		[Patient].[PatientDocument].[DocumentCategoryID] = [MasterData].[DocumentCategory].[DocumentCategoryID]	
	WHERE
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @SearchName + '%' 
		)
	AND
		[Patient].[PatientDocument].[ServiceOrFromDate] BETWEEN @DateFrom AND @DateTo
	AND
		[Patient].[PatientDocument].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientDocument].[IsActive] ELSE @IsActive END
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	

	DECLARE @TBL_RES TABLE
	(
		[PatientDocumentID] INT NOT NULL
		, [Name] NVARCHAR(500) NOT NULL
		, [DocumentCategoryName] NVARCHAR(155) NOT NULL
		, [DocumentRelPath]NVARCHAR(350)  NULL
		, [ChartNumber] NVARCHAR(20) NOT NULL
		, [IsActive] BIT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Patient].[PatientDocument].[PatientDocumentID]
		,(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		,[DocumentCategory].[DocumentCategoryName] + ' ['+ [DocumentCategory].[DocumentCategoryCode] + ']'
		,[Patient].[PatientDocument].[DocumentRelPath]
		, [Patient].[Patient].[ChartNumber]
		, [Patient].[PatientDocument].[IsActive]
	FROM
		[Patient].[PatientDocument] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] =[Patient].[PatientDocument].[PatientDocumentID]
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientDocument].[PatientID] = [Patient].[Patient].[PatientID]
	INNER JOIN
		[MasterData].[DocumentCategory] WITH (NOLOCK)
	ON 
		[Patient].[PatientDocument].[DocumentCategoryID] = [MasterData].[DocumentCategory].[DocumentCategoryID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	SELECT * FROM @TBL_RES;
	
	-- EXEC [Patient].[usp_GetBySearch_PatientDocument] @StartBy=' '
	-- EXEC [Patient].[usp_GetBySearch_PatientDocument] @ClinicTypeID = 2, @SearchName  = NULL, @StartBy = NULL, @PatientID = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetBySearch_ClaimProcess]    Script Date: 07/05/2013 15:14:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetBySearch_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetBySearch_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetBySearch_ClaimProcess]    Script Date: 07/05/2013 15:14:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Claim].[usp_GetBySearch_ClaimProcess]
	  @ClinicID INT
	, @StatusIDs NVARCHAR(100)
	, @AssignedTo INT = NULL
	, @SearchName NVARCHAR(150) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, ROW_NUMBER() OVER (
			ORDER BY
			
				CASE WHEN @OrderByField = 'PatName' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'PatName' AND @orderByDirection = 'D' THEN [Patient].[Patient].[LastName] END DESC,
							
				CASE WHEN @OrderByField = 'PatChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'PatChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
								
				CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
				CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,

				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]	
	WHERE
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE '%' + @SearchName + '%' 
		OR
			[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
		)
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND	
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		(
			[Patient].[PatientVisit].[AssignedTo] = @AssignedTo 
		OR
			@AssignedTo IS NULL
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	DECLARE @TBL_ANS TABLE
	(
		 [PatientVisitID] BIGINT NOT NULL
		, [PatName] NVARCHAR(500) NOT NULL
		, [PatChartNumber] NVARCHAR(20) NOT NULL
		, [DOS] DATE NOT NULL
		, [PatientVisitComplexity] TINYINT NOT NULL
		, [AssignToMe] BIT NOT NULL
	);
	
	INSERT INTO
		@TBL_ANS
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PatName]
		, [Patient].[Patient].[ChartNumber] AS [PatChartNumber] 
		, [Patient].[PatientVisit].[DOS]
		, [Patient].[PatientVisit].[PatientVisitComplexity]
		, CAST('1' AS BIT) AS [AssignToMe]
	FROM
		@SEARCH_TMP
	INNER JOIN
		[Patient].[PatientVisit] WITH (NOLOCK)
	ON 
		[PK_ID] = [Patient].[PatientVisit].[PatientVisitID]
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Claim].[usp_GetBySearch_ClaimProcess] @ClinicID = 1, @StatusIDs = '3,5', @AssignedTo= 101
	-- EXEC [Claim].[usp_GetBySearch_ClaimProcess] @ClinicID = 1, @StatusIDs = '8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25', @CurrPageNumber = 1, @RecordsPerPage = 10, @OrderByField = 'PatientVisitID', @OrderByDirection = 'A'	-- CREATED
	-- EXEC [Claim].[usp_GetBySearch_ClaimProcess] @ClinicID = 1, @StatusIDs = '3'
END


GO



-------------------------------------------------------------------------

-------------------------------------------------------------------------

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetCount_PatientVisit]    Script Date: 05/03/2013 19:22:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetCount_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetCount_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetCount_PatientVisit]    Script Date: 05/03/2013 19:22:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Patient].[usp_GetCount_PatientVisit]
	@ClinicID int
	, @StatusIDs NVARCHAR(100)
	, @AssignedTo INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [CLAIM_COUNT] INT NOT NULL
	);

	INSERT INTO
		@TBL_ANS
	SELECT
		COUNT ([Patient].[PatientVisit].[PatientVisitID]) AS [CLAIM_COUNT]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]	
	WHERE
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
	AND
		(
			[Patient].[PatientVisit].[AssignedTo] = @AssignedTo 
		OR
			@AssignedTo IS NULL
		)
	
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT * FROM @TBL_ANS;
		
	-- EXEC [Patient].[usp_GetCount_PatientVisit] @ClinicID = 1, @StatusIDs = '1, 2'	-- UNASSIGNED
	-- EXEC [Patient].[usp_GetCount_PatientVisit] @ClinicID = 1, @StatusIDs = '8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25'	-- CREATED
	-- EXEC [Patient].[usp_GetCount_PatientVisit] @ClinicID = 1, @StatusIDs = '3', @AssignedTo = 101
	-- EXEC [Patient].[usp_GetCount_PatientVisit] @ClinicID = 1, @StatusIDs = '3', @AssignedTo = 101
END






GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetUnAssigned_PatientVisit]    Script Date: 06/25/2013 11:34:05 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetUnAssigned_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetUnAssigned_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetUnAssigned_PatientVisit]    Script Date: 06/25/2013 11:34:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Patient].[usp_GetUnAssigned_PatientVisit]
	  @ClinicID INT
	, @StatusIDs NVARCHAR(100)
	, @SearchName NVARCHAR(150) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @AssignedTo INT = NULL
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'	
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, ROW_NUMBER() OVER (
			ORDER BY
			
				CASE WHEN @OrderByField = 'PatName' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'PatName' AND @orderByDirection = 'D' THEN [Patient].[Patient].[LastName] END DESC,
							
				CASE WHEN @OrderByField = 'PatChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'PatChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
								
				CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
				CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,

				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]	
	WHERE
		
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
		OR
			[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
		)
	AND
		(
			[Patient].[PatientVisit].[AssignedTo] = @AssignedTo
		OR
			@AssignedTo IS NULL
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	DECLARE @TBL_ANS TABLE
	(
		 [PatientVisitID] BIGINT NOT NULL
		, [PatName] NVARCHAR(500) NOT NULL
		, [PatChartNumber] NVARCHAR(20) NOT NULL
		, [DOS] DATE NOT NULL
		, [PatientVisitComplexity] TINYINT NOT NULL
		, [AssignToMe] BIT NOT NULL
	);
	
	INSERT INTO
		@TBL_ANS
	SELECT
		 [Patient].[PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PatName]
		, [Patient].[Patient].[ChartNumber] AS [PatChartNumber] 
		, [Patient].[PatientVisit].[DOS]
		, [Patient].[PatientVisit].[PatientVisitComplexity]
		, CAST('1' AS BIT) AS [AssignToMe]
	FROM
		@SEARCH_TMP
	INNER JOIN
		[Patient].[PatientVisit] WITH (NOLOCK)
	ON
		[PK_ID] = [Patient].[PatientVisit].[PatientVisitID]
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]
	ORDER BY
		[ID]
	ASC;
	
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Patient].[usp_GetUnAssigned_PatientVisit] @ClinicID = 1, @SearchName='RITBE000', @StatusIDs = '1, 2', @DateFrom = '3/1/2000 12:00:00 AM' , @DateTo = '3/2/2014 12:00:00 AM'
END







GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByHospitalizationId_PatientVisit]    Script Date: 03/20/2013 08:04:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByHospitalizationId_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByHospitalizationId_PatientVisit]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetByHospitalizationId_PatientVisit]    Script Date: 03/20/2013 08:04:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Patient].[usp_GetByHospitalizationId_PatientVisit]
	@PatientHospitalizationID BIGINT
	, @AdmittedOn DATE
	, @DischargedOn	DATE = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @DischargedOn IS NULL
	BEGIN
		SELECT @DischargedOn = DATEADD(DAY, 1, GETDATE());
	END
	
	DECLARE @TBL_VST TABLE
	(
		[PAT_VISIT_ID] BIGINT NULL
		, [DOS] DATE NULL
	);

	INSERT INTO
		@TBL_VST
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, [Patient].[PatientVisit].[DOS]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	WHERE
		[Patient].[PatientVisit].[PatientHospitalizationID] = @PatientHospitalizationID
	AND
		[Patient].[PatientVisit].[IsActive] = 1;
		
	DELETE FROM @TBL_VST WHERE [PAT_VISIT_ID] IS NULL OR [DOS] IS NULL;
	
	DECLARE @TBL_ANS TABLE
	(
		[PATIENT_VISIT_ID] BIGINT NOT NULL
		, [HAS_DOS_ERROR] BIT NOT NULL
	);
	
	IF EXISTS(SELECT * FROM @TBL_VST)
	BEGIN
		IF EXISTS(SELECT * FROM @TBL_VST WHERE [DOS] BETWEEN @AdmittedOn AND @DischargedOn)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[PAT_VISIT_ID] AS [PATIENT_VISIT_ID]
				, '0' AS [HAS_DOS_ERROR]
			FROM
				@TBL_VST;
		END
		ELSE
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[PAT_VISIT_ID] AS [PATIENT_VISIT_ID]
				, '1' AS [HAS_DOS_ERROR]
			FROM
				@TBL_VST;
		END
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT
			'0' AS [PATIENT_VISIT_ID]
			, '0' AS [HAS_DOS_ERROR];
	END
	
	SELECT * FROM @TBL_ANS;

	-- EXEC [Patient].[usp_GetByHospitalizationId_PatientVisit] 6, '2013-Feb-14'
	-- EXEC [Patient].[usp_GetByPkId_PatientVisit] 1, 1
	-- EXEC [Patient].[usp_GetByPkId_PatientVisit] 1, 0
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetHospital_PatientHospitalization]    Script Date: 03/22/2013 09:21:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetHospital_PatientHospitalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetHospital_PatientHospitalization]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetHospital_PatientHospitalization]    Script Date: 03/22/2013 09:21:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Patient].[usp_GetHospital_PatientHospitalization]
	@PatientID	BIGINT
	, @DOS DATETIME
	, @IsActive	BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


SELECT
	[Patient].[PatientHospitalization].[PatientHospitalizationID], [Billing].[FacilityDone].[FacilityDoneName] + ' ['+[Billing].[FacilityDone].[FacilityDoneCode]+']' AS [NAME_CODE]
FROM
	[Patient].[PatientHospitalization] WITH (NOLOCK)
INNER JOIN
	[Patient].[PatientVisit] WITH (NOLOCK)
ON
	[Patient].[PatientHospitalization].[PatientID] = [Patient].[PatientVisit].[PatientID]
INNER JOIN
	[Billing].[FacilityDone] WITH (NOLOCK)
ON	
	[Billing].[FacilityDone].[FacilityDoneID] = [Patient].[PatientHospitalization].[FacilityDoneHospitalID]
WHERE

	[Patient].[PatientVisit].[PatientID] = @PatientID
AND
	[Patient].[PatientVisit].[DOS] = @DOS
AND
(
	(
		DATEDIFF(DAY, [Patient].[PatientHospitalization].[AdmittedOn], [Patient].[PatientVisit].[DOS]) > -1
		AND
		[Patient].[PatientHospitalization].[DischargedOn] IS NULL
	)
	OR
	(
		[Patient].[PatientVisit].[DOS] 
		BETWEEN 
		[Patient].[PatientHospitalization].[AdmittedOn] AND  [Patient].[PatientHospitalization].[DischargedOn]
	)
)


--[Patient].[usp_GetHospital_PatientHospitalization] @PatientID = 2, @DOS = '2013-03-20'

END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByHospitalizationId_PatientVisit]    Script Date: 03/20/2013 08:07:01 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByHospitalizationId_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByHospitalizationId_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByHospitalizationId_PatientVisit]    Script Date: 03/20/2013 08:07:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Patient].[usp_GetByHospitalizationId_PatientVisit]
	@PatientHospitalizationID BIGINT
	, @AdmittedOn DATE
	, @DischargedOn	DATE = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @DischargedOn IS NULL
	BEGIN
		SELECT @DischargedOn = DATEADD(DAY, 1, GETDATE());
	END
	
	DECLARE @TBL_VST TABLE
	(
		[PAT_VISIT_ID] BIGINT NULL
		, [DOS] DATE NULL
	);

	INSERT INTO
		@TBL_VST
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, [Patient].[PatientVisit].[DOS]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	WHERE
		[Patient].[PatientVisit].[PatientHospitalizationID] = @PatientHospitalizationID
	AND
		[Patient].[PatientVisit].[IsActive] = 1;
		
	DELETE FROM @TBL_VST WHERE [PAT_VISIT_ID] IS NULL OR [DOS] IS NULL;
	
	DECLARE @TBL_ANS TABLE
	(
		[PATIENT_VISIT_ID] BIGINT NOT NULL
		, [HAS_DOS_ERROR] BIT NOT NULL
	);
	
	IF EXISTS(SELECT * FROM @TBL_VST)
	BEGIN
		IF EXISTS(SELECT * FROM @TBL_VST WHERE [DOS] BETWEEN @AdmittedOn AND @DischargedOn)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[PAT_VISIT_ID] AS [PATIENT_VISIT_ID]
				, '0' AS [HAS_DOS_ERROR]
			FROM
				@TBL_VST;
		END
		ELSE
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[PAT_VISIT_ID] AS [PATIENT_VISIT_ID]
				, '1' AS [HAS_DOS_ERROR]
			FROM
				@TBL_VST;
		END
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT
			'0' AS [PATIENT_VISIT_ID]
			, '0' AS [HAS_DOS_ERROR];
	END
	
	SELECT * FROM @TBL_ANS;

	-- EXEC [Patient].[usp_GetByHospitalizationId_PatientVisit] 6, '2013-Feb-14'
	-- EXEC [Patient].[usp_GetByPkId_PatientVisit] 1, 1
	-- EXEC [Patient].[usp_GetByPkId_PatientVisit] 1, 0
END

GO



-------------------------------------------------------------------------

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_DocumentCategory]    Script Date: 03/20/2013 09:54:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetBySearch_DocumentCategory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetBySearch_DocumentCategory]
GO



/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_DocumentCategory]    Script Date: 03/20/2013 09:54:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [MasterData].[usp_GetBySearch_DocumentCategory]	
	@OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[MasterData].[DocumentCategory].[DocumentCategoryID]
		, ROW_NUMBER() OVER (
			ORDER BY						
				CASE WHEN @OrderByField = 'DocumentCategoryCode' AND @OrderByDirection = 'A' THEN [MasterData].[DocumentCategory].[DocumentCategoryCode] END ASC,
				CASE WHEN @orderByField = 'DocumentCategoryCode' AND @orderByDirection = 'D' THEN [MasterData].[DocumentCategory].[DocumentCategoryCode] END DESC,
				
				CASE WHEN @OrderByField = 'DocumentCategoryName' AND @OrderByDirection = 'A' THEN [MasterData].[DocumentCategory].[DocumentCategoryName] END ASC,
				CASE WHEN @orderByField = 'DocumentCategoryName' AND @orderByDirection = 'D' THEN [MasterData].[DocumentCategory].[DocumentCategoryName] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [MasterData].[DocumentCategory].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [MasterData].[DocumentCategory].[LastModifiedOn] END DESC			
			) AS ROW_NUM
	FROM
		[MasterData].[DocumentCategory] WITH (NOLOCK)
	WHERE
		[MasterData].[DocumentCategory].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[DocumentCategory].[IsActive] ELSE @IsActive END;
		
	DECLARE @TBL_RES TABLE
	(
		[DocumentCategoryID] INT NOT NULL 
		, [DocumentCategoryCode] NVARCHAR(2) NOT NULL
		, [DocumentCategoryName] NVARCHAR(150) NOT NULL 
		, [IsActive] BIT NOT NULL 
	);

	INSERT INTO
		@TBL_RES
	SELECT		
		[DocumentCategory].[DocumentCategoryID]
		, [DocumentCategory].[DocumentCategoryCode]
		, [DocumentCategory].[DocumentCategoryName]
		, [DocumentCategory].[IsActive]
	FROM
		[DocumentCategory] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [DocumentCategory].[DocumentCategoryID]
	ORDER BY
		[ID]
	ASC;
	
	
	SELECT * FROM @TBL_RES;

	-- EXEC [MasterData].[usp_GetBySearch_DocumentCategory]
	-- EXEC [MasterData].[usp_GetBySearch_DocumentCategory] @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_PatientDocument]    Script Date: 05/31/2013 11:58:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByAZ_PatientDocument]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByAZ_PatientDocument]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_PatientDocument]    Script Date: 05/31/2013 11:58:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Patient].[usp_GetByAZ_PatientDocument] 
	 @SearchName NVARCHAR(350) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @IsActive	BIT = NULL	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ChartNumber] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL	
	SELECT			
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))		
	FROM
		[Patient].[PatientDocument] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientDocument].[PatientID] = [Patient].[Patient].[PatientID]
	WHERE
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @SearchName + '%' 
		)
	AND
		[Patient].[PatientDocument].[ServiceOrFromDate] BETWEEN @DateFrom AND @DateTo
	AND
		[Patient].[PatientDocument].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientDocument].[IsActive] ELSE @IsActive END
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ChartNumber] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Patient].[usp_GetByAZ_PatientDocument] @PatientID = 8, @ChartNumber = NULL, @IsActive = NULL
	-- EXEC [Patient].[usp_GetByAZ_Patient] @ClinicID = 2, @ChartNumber = 'iy', @IsActive = NULL
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_PatientHospitalization]    Script Date: 06/10/2013 10:14:01 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByAZ_PatientHospitalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByAZ_PatientHospitalization]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByAZ_PatientHospitalization]    Script Date: 06/10/2013 10:14:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Patient].[usp_GetByAZ_PatientHospitalization] 
	 @ClinicTypeID INT
	 ,@ClinicID INT
	 , @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @IsActive	BIT = NULL
	,@ChartNumber nvarchar(350) = NULL
	, @PatientID BIGINT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    IF @ChartNumber IS NULL
    BEGIN
		SELECT @ChartNumber = '';
	END
		IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ChartNumber] [nvarchar](350) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	
	SELECT
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))
	FROM
		[Patient].[PatientHospitalization] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[Patient].[PatientID] = [Patient].[PatientHospitalization].[PatientID]
	INNER JOIN
		[Billing].[Clinic] WITH (NOLOCK)
	ON 
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]	
	INNER JOIN
		[Billing].[FacilityDone] WITH (NOLOCK)
	ON 
		[Billing].[FacilityDone].[FacilityDoneID] = [Patient].[PatientHospitalization].[FacilityDoneHospitalID]
	WHERE
		[Billing].[FacilityDone].[FacilityTypeID] = @ClinicTypeID	
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @ChartNumber + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @ChartNumber + '%' 
		)
	AND
		[Patient].[PatientHospitalization].[AdmittedOn] BETWEEN @DateFrom AND @DateTo	
	AND
		[Patient].[Patient].[PatientID] = CASE WHEN @PatientID IS NULL THEN [Patient].[Patient].[PatientID] ELSE @PatientID END
	AND
		[Billing].[FacilityDone].[FacilityTypeID] = @ClinicTypeID
AND
		[Billing].[Clinic].[ClinicID] = @ClinicID	
	AND
		[Patient].[PatientHospitalization].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientHospitalization].[IsActive] ELSE @IsActive END
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;
				
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ChartNumber] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Patient].[usp_GetByAZ_PatientHospitalization]  @ClinicTypeID= 2
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_Country]    Script Date: 03/21/2013 11:54:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetIDAutoComplete_Country]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetIDAutoComplete_Country]
GO


/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_Country]    Script Date: 03/21/2013 11:54:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetIDAutoComplete_Country] 
	@CountryCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [COUNTRY_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[MasterData].[Country].[CountryID]
	FROM
		[MasterData].[Country] WITH (NOLOCK)
	WHERE
		@CountryCode = [MasterData].[Country].[CountryCode]
	AND
		[MasterData].[Country].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [MasterData].[usp_GetByPkId_Country] 1, NULL
	-- EXEC [MasterData].[usp_GetByPkId_Country] 1, 1
	-- EXEC [MasterData].[usp_GetByPkId_Country] 1, 0
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetIDAutoComplete_Insurance]    Script Date: 03/21/2013 11:50:12 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetIDAutoComplete_Insurance]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetIDAutoComplete_Insurance]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetIDAutoComplete_Insurance]    Script Date: 03/21/2013 11:50:12 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Insurance].[usp_GetIDAutoComplete_Insurance] 
	@InsuranceCode	nvarchar(9)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [INSURANCE_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Insurance].[Insurance].[InsuranceID]
	FROM
		[Insurance].[Insurance] WITH (NOLOCK)
	WHERE
		@InsuranceCode = [Insurance].[Insurance].[InsuranceCode]
	AND
		[Insurance].[Insurance].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Insurance].[usp_GetByPkId_Insurance] 1, NULL
	-- EXEC [Insurance].[usp_GetByPkId_Insurance] 1, 1
	-- EXEC [Insurance].[usp_GetByPkId_Insurance] 1, 0
END


GO


-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Provider]    Script Date: 03/21/2013 11:42:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIDAutoComplete_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIDAutoComplete_Provider]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Provider]    Script Date: 03/21/2013 11:42:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetIDAutoComplete_Provider] 
	@ProviderCode	nvarchar(9)
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [PROVIDER_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Billing].[Provider].[ProviderID]
	FROM
		[Billing].[Provider] WITH (NOLOCK)
	WHERE
		@ProviderCode = [Billing].[Provider].[ProviderCode]
	AND
		[Billing].[Provider].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetByPkId_Provider] 1, NULL
	-- EXEC [Billing].[usp_GetByPkId_Provider] 1, 1
	-- EXEC [Billing].[usp_GetByPkId_Provider] 1, 0
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_State]    Script Date: 03/21/2013 11:56:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetIDAutoComplete_State]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetIDAutoComplete_State]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_State]    Script Date: 03/21/2013 11:56:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetIDAutoComplete_State] 
	@StateCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [STATE_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[MasterData].[State].[StateID]
	FROM
		[MasterData].[State] WITH (NOLOCK)
	WHERE
		@StateCode = [MasterData].[State].[StateCode]
	AND
		[MasterData].[State].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [MasterData].[usp_GetByPkId_State] 1, NULL
	-- EXEC [MasterData].[usp_GetByPkId_State] 1, 1
	-- EXEC [MasterData].[usp_GetByPkId_State] 1, 0
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_FacilityType]    Script Date: 03/21/2013 11:41:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIDAutoComplete_FacilityType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIDAutoComplete_FacilityType]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_FacilityType]    Script Date: 03/21/2013 11:41:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Billing].[usp_GetIDAutoComplete_FacilityType] 
	@FacilityTypeCode	NVARCHAR(2)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [FacilityTypeID] TINYINT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Billing].[FacilityType].[FacilityTypeID]
	FROM
		[Billing].[FacilityType] WITH (NOLOCK)
	WHERE
		@FacilityTypeCode = [Billing].[FacilityType].[FacilityTypeCode]
	AND
		[Billing].[FacilityType].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetIDAutoComplete_FacilityType] '00'
	
END




GO



-------------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetByUserID_UserPassword]    Script Date: 03/21/2013 10:57:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetByUserID_UserPassword]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetByUserID_UserPassword]
GO

/****** Object:  StoredProcedure [Audit].[usp_GetByUserID_UserPassword]    Script Date: 03/21/2013 10:57:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Audit].[usp_GetByUserID_UserPassword] 
	@UserID INT
	,@RecCnt INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [ALL_CAPS_PASSWORD] NVARCHAR(200) NOT NULL
	);
	
	INSERT INTO
		@TBL_RES
	SELECT TOP (@RecCnt)
		[Audit].[UserPassword].[AllCapsPassword]
	FROM 
		[Audit].[UserPassword] WITH (NOLOCK)
	WHERE 
		[Audit].[UserPassword].[UserID] = @UserID
	ORDER BY
		[Audit].[UserPassword].[UserPasswordID]
	DESC;
	
	SELECT * FROM @TBL_RES;
	
	-- EXEC [Audit].[usp_GetByUserID_UserPassword] @UserID = 8, @RecCnt = 2
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_Provider]    Script Date: 03/20/2013 22:14:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetNameByID_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetNameByID_Provider]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_Provider]    Script Date: 03/20/2013 22:14:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetNameByID_Provider] 
	@ProviderID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ProviderName] NVARCHAR(350) NOT NULL 
		, [ProviderCode] NVARCHAR(9) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [ProviderName], [Billing].[Provider].[ProviderCode]
	FROM
		[Billing].[Provider] WITH (NOLOCK)
	WHERE
		@ProviderID = [Billing].[Provider].[ProviderID]
	AND
		[Billing].[Provider].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Provider].[IsActive] ELSE @IsActive END;

		SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetNameByID_Provider] 1, NULL
	-- EXEC [Billing].[usp_GetNameByID_Provider] 1, 1
	-- EXEC [Billing].[usp_GetNameByID_Provider] 1, 0
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetDocumentCategoryByID_DocumentCategory]    Script Date: 03/27/2013 15:20:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetDocumentCategoryByID_DocumentCategory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetDocumentCategoryByID_DocumentCategory]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetDocumentCategoryByID_DocumentCategory]    Script Date: 03/27/2013 15:20:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetDocumentCategoryByID_DocumentCategory] 
	@DocumentCategoryID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[DocumentCategoryCode] NVARCHAR(2) NOT NULL 
		, [DocumentCategoryName] NVARCHAR(150) NOT NULL
	);

	INSERT INTO
		@TBL_RES
		
	SELECT
		[MasterData].[DocumentCategory].[DocumentCategoryCode],[MasterData].[DocumentCategory].[DocumentCategoryName]
	FROM
		[MasterData].[DocumentCategory] WITH (NOLOCK)
	WHERE
		@DocumentCategoryID = [MasterData].[DocumentCategory].[DocumentCategoryID]
	AND
		[MasterData].[DocumentCategory].[IsActive]=1
		
	SELECT * FROM @TBL_RES;

	-- EXEC [MasterData].[usp_GetDocumentCategoryByID_DocumentCategory] 1, NULL
	-- EXEC [MasterData].[usp_GetDocumentCategoryByID_DocumentCategory] 1, 1
	-- EXEC [MasterData].[usp_GetDocumentCategoryByID_DocumentCategory] 1, 0
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutocomplete_DocumentCategory]    Script Date: 05/24/2013 10:23:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetIDAutocomplete_DocumentCategory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetIDAutocomplete_DocumentCategory]
GO



/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutocomplete_DocumentCategory]    Script Date: 05/24/2013 10:23:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetIDAutocomplete_DocumentCategory] 
	@DocumentCategoryCode	nvarchar(5)
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[MasterData].[DocumentCategory].[DocumentCategoryID]
		,[MasterData].[DocumentCategory].[DocumentCategoryCode]
		,[MasterData].[DocumentCategory].[IsInPatientRelated]
	FROM
		[MasterData].[DocumentCategory] WITH (NOLOCK)
	WHERE
		@DocumentCategoryCode = [MasterData].[DocumentCategory].[DocumentCategoryCode]
	AND
		[MasterData].[DocumentCategory].[IsActive]=1

	-- EXEC [MasterData].[usp_GetIDAutocomplete_DocumentCategory] '01', NULL
	-- EXEC [MasterData].[usp_GetIDAutocomplete_DocumentCategory] 1, 1
	-- EXEC [MasterData].[usp_GetIDAutocomplete_DocumentCategory] 1, 0
END





GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetByPkIdRelationshipName_Relationship]    Script Date: 03/20/2013 12:12:41 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetByPkIdRelationshipName_Relationship]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetByPkIdRelationshipName_Relationship]
GO


/****** Object:  StoredProcedure [Insurance].[usp_GetByPkIdRelationshipName_Relationship]    Script Date: 03/20/2013 12:12:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [Insurance].[usp_GetByPkIdRelationshipName_Relationship] 
	@RelationshipID	TINYINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[RelationshipName] NVARCHAR(150) NOT NULL 
		, [RelationshipCode] NVARCHAR(2) NOT NULL
	);

	INSERT INTO
		@TBL_RES
		
	SELECT
		[Insurance].[Relationship].[RelationshipName],[Insurance].[Relationship].[RelationshipCode]
	FROM
		[Insurance].[Relationship] WITH (NOLOCK)
	WHERE
		@RelationshipID = [Insurance].[Relationship].[RelationshipID]
	AND
		[Insurance].[Relationship].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Insurance].[Relationship].[IsActive] ELSE @IsActive END;
		
	SELECT * FROM @TBL_RES;
	
	-- EXEC [Insurance].[usp_GetByPkIdRelationshipName_Relationship] 1, NULL
	-- EXEC [Insurance].[usp_GetByPkIdRelationshipName_Relationship] 1, 1
	-- EXEC [Insurance].[usp_GetByPkIdRelationshipName_Relationship] 1, 0
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetByPkIdStateName_State]    Script Date: 03/20/2013 12:15:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetByPkIdStateName_State]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetByPkIdStateName_State]
GO


/****** Object:  StoredProcedure [MasterData].[usp_GetByPkIdStateName_State]    Script Date: 03/20/2013 12:15:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetByPkIdStateName_State] 
	@StateID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[StateName] NVARCHAR(150) NOT NULL 
		, [StateCode] NVARCHAR(2) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[MasterData].[State].[StateName],[MasterData].[State].[StateCode]
	FROM
		[MasterData].[State] WITH (NOLOCK)
	WHERE
		@StateID = [MasterData].[State].[StateID]
	AND
		[MasterData].[State].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[State].[IsActive] ELSE @IsActive END;

	SELECT * FROM @TBL_RES;
	
	-- EXEC [MasterData].[usp_GetByPkIdStateName_State] 1, NULL
	-- EXEC [MasterData].[usp_GetByPkIdStateName_State] 1, 1
	-- EXEC [MasterData].[usp_GetByPkIdStateName_State] 1, 0
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_FacilityType]    Script Date: 03/21/2013 12:40:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetNameByID_FacilityType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetNameByID_FacilityType]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_FacilityType]    Script Date: 03/21/2013 12:40:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetNameByID_FacilityType] 
	@FacilityTypeID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		([Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']') AS [NAME_CODE]
	FROM
		[Billing].[FacilityType] WITH (NOLOCK)
	WHERE
		@FacilityTypeID = [Billing].[FacilityType].[FacilityTypeID]
	AND
		[Billing].[FacilityType].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[FacilityType].[IsActive] ELSE @IsActive END;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetNameByID_FacilityType]  1, NULL
	
END




GO

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetNameByID_City]    Script Date: 03/23/2013 15:15:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetNameByID_City]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetNameByID_City]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetNameByID_City]    Script Date: 03/23/2013 15:15:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetNameByID_City] 
	@CityID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[CityName] NVARCHAR(150) NOT NULL 
		, [ZipCode] NVARCHAR(10) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[MasterData].[City].[CityName],[MasterData].[City].[ZipCode]
	FROM
		[MasterData].[City] WITH (NOLOCK)
	WHERE
		@CityID = [MasterData].[City].[CityID]
	AND
		[MasterData].[City].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[City].[IsActive] ELSE @IsActive END;
		
	SELECT * FROM @TBL_RES;
	
	-- EXEC [MasterData].[usp_GetByPkIdCityName_City] 1, NULL
	-- EXEC [MasterData].[usp_GetByPkIdCityName_City] 1, 1
	-- EXEC [MasterData].[usp_GetByPkIdCityName_City] 1, 0
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetNameById_Country]    Script Date: 03/23/2013 15:20:32 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetNameById_Country]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetNameById_Country]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetNameById_Country]    Script Date: 03/23/2013 15:20:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetNameById_Country] 
	@CountryID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[MasterData].[Country].[CountryName],[MasterData].[Country].[CountryCode]
	FROM
		[MasterData].[Country] WITH (NOLOCK)
	WHERE
		@CountryID = [MasterData].[Country].[CountryID]
	AND
		[MasterData].[Country].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[Country].[IsActive] ELSE @IsActive END;

	-- EXEC [MasterData].[usp_GetNameById_Country] 1, NULL
	-- EXEC [MasterData].[usp_GetNameById_Country] 1, 1
	-- EXEC [MasterData].[usp_GetNameById_Country] 1, 0
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetByPkIdCountyName_County]    Script Date: 03/20/2013 12:46:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetByPkIdCountyName_County]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetByPkIdCountyName_County]
GO


/****** Object:  StoredProcedure [MasterData].[usp_GetByPkIdCountyName_County]    Script Date: 03/20/2013 12:46:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [MasterData].[usp_GetByPkIdCountyName_County] 
	@CountyID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @TBL_RES TABLE
	(
		[CountyName] NVARCHAR(150) NOT NULL 
		, [CountyCode] NVARCHAR(6) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[MasterData].[County].[CountyName],[MasterData].[County].[CountyCode]
	FROM
		[MasterData].[County] WITH (NOLOCK)
	WHERE
		@CountyID = [MasterData].[County].[CountyID]
	AND
		[MasterData].[County].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[County].[IsActive] ELSE @IsActive END;
		
	SELECT * FROM @TBL_RES;
	-- EXEC [MasterData].[usp_GetByPkIdCountyName_County] 1, NULL
	-- EXEC [MasterData].[usp_GetByPkIdCountyName_County] 1, 1
	-- EXEC [MasterData].[usp_GetByPkIdCountyName_County] 1, 0
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetByPkIdInsuranceName_Insurance]    Script Date: 03/20/2013 12:51:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetByPkIdInsuranceName_Insurance]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetByPkIdInsuranceName_Insurance]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetByPkIdInsuranceName_Insurance]    Script Date: 03/20/2013 12:51:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [Insurance].[usp_GetByPkIdInsuranceName_Insurance] 
	@InsuranceID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[InsuranceName] NVARCHAR(150) NOT NULL 
		, [InsuranceCode] NVARCHAR(9) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Insurance].[Insurance].[InsuranceName],[Insurance].[Insurance].[InsuranceCode]
	FROM
		[Insurance].[Insurance] WITH (NOLOCK)
	WHERE
		@InsuranceID = [Insurance].[Insurance].[InsuranceID]
	AND
		[Insurance].[Insurance].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Insurance].[Insurance].[IsActive] ELSE @IsActive END;
		
	SELECT * FROM @TBL_RES;
	
	-- EXEC [Insurance].[usp_GetByPkIdInsuranceName_Insurance] 1, NULL
	-- EXEC [Insurance].[usp_GetByPkIdInsuranceName_Insurance] 1, 1
	-- EXEC [Insurance].[usp_GetByPkIdInsuranceName_Insurance] 1, 0
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetPassword_User]    Script Date: 03/20/2013 14:38:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetPassword_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetPassword_User]
GO

/****** Object:  StoredProcedure [User].[usp_GetPassword_User]    Script Date: 03/20/2013 14:38:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [User].[usp_GetPassword_User] 	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NEW_PWD] NVARCHAR(10) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT [dbo].ufn_GetPassword();
	
	SELECT * FROM @TBL_RES;
		
	-- [User].[usp_GetPassword_User]
END

GO

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetCount_Clinic]    Script Date: 05/24/2013 08:21:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetCount_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetCount_Clinic]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetCount_Clinic]    Script Date: 05/24/2013 08:21:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Billing].[usp_GetCount_Clinic]
	@UserID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [CLINIC_COUNT] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		COUNT ([Billing].[Clinic].[ClinicID]) AS [ClinicCount]
	FROM
		[User].[UserClinic]  WITH (NOLOCK)
	INNER JOIN 
		[Billing].[Clinic] WITH (NOLOCK)
	ON
		[Billing].[Clinic].[ClinicID]=[User].[UserClinic].[ClinicID] 
	WHERE
		[User].[UserClinic].[UserID] = @UserID
	AND
		[User].[UserClinic].[IsActive] = 1
	AND
		[Billing].[Clinic].[IsActive] = 1
	
	SELECT * FROM @TBL_RES;
	
	-- EXEC [Billing].[usp_GetCount_Clinic] @UserID = 101
END





GO



-------------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetByAZ_User]    Script Date: 06/26/2013 11:14:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByAZ_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByAZ_User]
GO


/****** Object:  StoredProcedure [User].[usp_GetByAZ_User]    Script Date: 06/26/2013 11:14:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [User].[usp_GetByAZ_User]
	  @SelHighRoleID TINYINT
	, @ManagerRoleID TINYINT
	, @SelManagerID INT = NULL
	, @SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	DECLARE @USER_TMP TABLE
	(
		[USER_ID] INT NOT NULL
	);
	IF @SelHighRoleID <= @ManagerRoleID
	BEGIN
		SELECT @SelManagerID = NULL;
	
		INSERT INTO
			@USER_TMP
		SELECT 
			[User].[UserRole].[UserID]
		FROM 
			[User].[UserRole] WITH (NOLOCK)
		WHERE
			[User].[UserRole].[RoleID] = @SelHighRoleID
		AND
			[User].[UserRole].[IsActive] = 1;
		
		DELETE FROM
			@USER_TMP
		WHERE
			[USER_ID] IN
			(
				SELECT 
					[User].[UserRole].[UserID]
				FROM 
					[User].[UserRole] WITH (NOLOCK)
				WHERE
					[User].[UserRole].[RoleID] < @SelHighRoleID
				AND
					[User].[UserRole].[IsActive] = 1
			)
		OR
			[USER_ID] IN
			(
				SELECT 
					[User].[User].[UserID]
				FROM 
					[User].[User] WITH (NOLOCK)
				WHERE
					[User].[User].[ManagerID] IS NOT NULL
				AND
					[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
			);
	END
		
	ELSE
	BEGIN	
		INSERT INTO
			@USER_TMP
		SELECT 
			[User].[UserRole].[UserID]
		FROM 
			[User].[UserRole] WITH (NOLOCK)
		WHERE
			[User].[UserRole].[RoleID] >= @SelHighRoleID
		AND
			[User].[UserRole].[IsActive] = 1;
		
		DELETE FROM
			@USER_TMP
		WHERE
			[USER_ID] IN
			(
				SELECT 
					[User].[UserRole].[UserID]
				FROM 
					[User].[UserRole] WITH (NOLOCK)
				WHERE
					[User].[UserRole].[RoleID] < @SelHighRoleID
				AND
					[User].[UserRole].[IsActive] = 1
			)
		OR
			[USER_ID] IN
			(
				SELECT 
					[User].[User].[UserID]
				FROM 
					[User].[User] WITH (NOLOCK)
				WHERE
					[User].[User].[ManagerID] IS NULL
				AND
					[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
			);
			
		IF @SelManagerID IS NOT NULL
		BEGIN
			DELETE FROM
				@USER_TMP
			WHERE
				[USER_ID] IN
				(
					SELECT 
						[User].[User].[UserID]
					FROM 
						[User].[User] WITH (NOLOCK)
					WHERE
						[User].[User].[ManagerID] <> @SelManagerID
					AND
						[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
				);
		END
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[SearchName] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		(LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], ''))))
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
	(
			[User].[User].[Email] LIKE '%' + @SearchName + '%'	    
	    OR	    
			(LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) LIKE '%' + @SearchName + '%'
	)
	AND
		(([User].[User].[ManagerID] IS NULL AND @SelManagerID IS NULL) OR ([User].[User].[ManagerID] = CASE WHEN @SelManagerID IS NULL THEN [User].[User].[ManagerID] ELSE @SelManagerID END))
	AND
		[User].[User].[UserID] IN
		(
			SELECT 
				[USER_ID]
			FROM 
				@USER_TMP
		) 
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[SearchName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
    -- EXEC [User].[usp_GetByAZ_User] @SelHighRoleID = 3, @ManagerRoleID = 2
    -- EXEC [User].[usp_GetByAZ_User] @SelHighRoleID = 3, @ManagerRoleID = 2, @SelManagerID = 48
    -- EXEC [User].[usp_GetByAZ_User] @SelHighRoleID = 2, @ManagerRoleID = 2
    -- EXEC [User].[usp_GetByAZ_User] @SelHighRoleID = 2, @ManagerRoleID = 2, @SelManagerID = 48
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetBySearch_User]    Script Date: 06/26/2013 10:47:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetBySearch_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetBySearch_User]
GO


/****** Object:  StoredProcedure [User].[usp_GetBySearch_User]    Script Date: 06/26/2013 10:47:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [User].[usp_GetBySearch_User]
	  @SelHighRoleID TINYINT
	, @ManagerRoleID TINYINT
	, @SelManagerID INT = NULL
	, @SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @USER_TMP TABLE
	(
		[USER_ID] INT NOT NULL
	);
		
	IF @SelHighRoleID <= @ManagerRoleID
	BEGIN
		SELECT @SelManagerID = NULL;
	
		INSERT INTO
			@USER_TMP
		SELECT 
			[User].[UserRole].[UserID]
		FROM 
			[User].[UserRole] WITH (NOLOCK)
		WHERE
			[User].[UserRole].[RoleID] = @SelHighRoleID
		AND
			[User].[UserRole].[IsActive] = 1;
		
		DELETE FROM
			@USER_TMP
		WHERE
			[USER_ID] IN
			(
				SELECT 
					[User].[UserRole].[UserID]
				FROM 
					[User].[UserRole] WITH (NOLOCK)
				WHERE
					[User].[UserRole].[RoleID] < @SelHighRoleID
				AND
					[User].[UserRole].[IsActive] = 1
			)
		OR
			[USER_ID] IN
			(
				SELECT 
					[User].[User].[UserID]
				FROM 
					[User].[User] WITH (NOLOCK)
				WHERE
					[User].[User].[ManagerID] IS NOT NULL
				AND
					[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
			);
	END
	ELSE
	BEGIN	
		INSERT INTO
			@USER_TMP
		SELECT 
			[User].[UserRole].[UserID]
		FROM 
			[User].[UserRole] WITH (NOLOCK)
		WHERE
			[User].[UserRole].[RoleID] >= @SelHighRoleID
		AND
			[User].[UserRole].[IsActive] = 1;
		
		DELETE FROM
			@USER_TMP
		WHERE
			[USER_ID] IN
			(
				SELECT 
					[User].[UserRole].[UserID]
				FROM 
					[User].[UserRole] WITH (NOLOCK)
				WHERE
					[User].[UserRole].[RoleID] < @SelHighRoleID
				AND
					[User].[UserRole].[IsActive] = 1
			)
		OR
			[USER_ID] IN
			(
				SELECT 
					[User].[User].[UserID]
				FROM 
					[User].[User] WITH (NOLOCK)
				WHERE
					[User].[User].[ManagerID] IS NULL
				AND
					[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
			);
			
		IF @SelManagerID IS NOT NULL
		BEGIN
			DELETE FROM
				@USER_TMP
			WHERE
				[USER_ID] IN
				(
					SELECT 
						[User].[User].[UserID]
					FROM 
						[User].[User] WITH (NOLOCK)
					WHERE
						[User].[User].[ManagerID] <> @SelManagerID
					AND
						[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
				);
		END
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[User].[User].[UserID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) END DESC,

				CASE WHEN @OrderByField = 'Email' AND @OrderByDirection = 'A' THEN [User].[User].[Email] END ASC,
				CASE WHEN @orderByField = 'Email' AND @orderByDirection = 'D' THEN [User].[User].[Email] END DESC,				
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [User].[User].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [User].[User].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		(LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) LIKE @StartBy + '%'
	AND
	(
			[User].[User].[Email] LIKE '%' + @SearchName + '%'	    
	    OR	    
			(LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) LIKE '%' + @SearchName + '%'
	)
	AND
		[User].[User].[UserID] IN
		(
			SELECT 
				[USER_ID]
			FROM 
				@USER_TMP
		) 
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT		
		[User].[UserID]
		, (LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) AS [Name]
		, [User].[Email]
		, [User].[IsActive]
		, [User].[User].[ManagerID]
	FROM
		[User] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [User].[UserID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [User].[usp_GetBySearch_User] @SelHighRoleID = 3, @ManagerRoleID = 2
	-- EXEC [User].[usp_GetBySearch_User] @SelHighRoleID = 3, @ManagerRoleID = 2, @SelManagerID = 48
	-- EXEC [User].[usp_GetBySearch_User] @SelHighRoleID = 2, @ManagerRoleID = 2
	-- EXEC [User].[usp_GetBySearch_User] @SelHighRoleID = 2, @ManagerRoleID = 2, @SelManagerID = 48
	
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetBySearch_UserRole]    Script Date: 03/22/2013 10:17:25 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetBySearch_UserRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetBySearch_UserRole]
GO

/****** Object:  StoredProcedure [User].[usp_GetBySearch_UserRole]    Script Date: 03/22/2013 10:17:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [User].[usp_GetBySearch_UserRole]
	@WebAdminRoleID TINYINT = 1
	, @ManagerRoleID TINYINT = 2
	, @EARoleID TINYINT = 3
	, @QARoleID TINYINT = 4
	, @BARoleID TINYINT = 5
	, @SelManagerID INT = 2
	, @SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @TBL_ANS TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [USER_ID] [INT] NOT NULL PRIMARY KEY
		, [USER_DISP_NAME] [NVARCHAR](500) NOT NULL
		, [USER_EMAIL] [NVARCHAR](256) NOT NULL
		, [USER_IS_ACTIVE] [BIT] NOT NULL
		--
		, [USER_ROLE_ID_EA] [BIGINT] NOT NULL DEFAULT(0)
		, [USER_ROLE_IS_ACTIVE_EA] [BIT] NOT NULL DEFAULT(0)
		--
		, [USER_ROLE_ID_QA] [BIGINT] NOT NULL DEFAULT(0)
		, [USER_ROLE_IS_ACTIVE_QA] [BIT] NOT NULL DEFAULT(0)
		--
		, [USER_ROLE_ID_BA] [BIGINT] NOT NULL DEFAULT(0)
		, [USER_ROLE_IS_ACTIVE_BA] [BIT] NOT NULL DEFAULT(0)
	);
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
		INSERT INTO
			@SEARCH_TMP
			(
				[PK_ID]
				, [ROW_NUM]
			)
		SELECT
			[User].[User].[UserID]
			, ROW_NUMBER() OVER (
				ORDER BY
							
					CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) END ASC,
					CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) END DESC,
					
					CASE WHEN @OrderByField = 'Email' AND @OrderByDirection = 'A' THEN [User].[User].[Email] END ASC,
					CASE WHEN @orderByField = 'Email' AND @orderByDirection = 'D' THEN [User].[User].[Email] END DESC,
					
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [User].[User].[LastModifiedOn] END ASC,
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [User].[User].[LastModifiedOn] END DESC
					
				) AS ROW_NUM
		FROM
			[User].[User] WITH (NOLOCK)
		WHERE
			[User].[User].[LastName] LIKE @StartBy + '%'
		AND
		(
			[User].[User].[LastName] LIKE '%' + @SearchName + '%'
		OR
			[User].[User].[FirstName] LIKE '%' + @SearchName + '%'
		OR
			(
				[User].[User].[MiddleName] IS NOT NULL
			AND
				[User].[User].[MiddleName] LIKE '%' + @SearchName + '%'
			)
		OR
			[User].[User].[Email] LIKE '%' + @SearchName + '%'
		)
		AND
			[User].[User].[UserID] NOT IN
			(
				SELECT
					[User].[UserRole].[UserID]
				FROM
					[User].[UserRole] WITH (NOLOCK)
				WHERE
					[User].[UserRole].[RoleID] IN (@WebAdminRoleID, @ManagerRoleID)
				AND
					[User].[UserRole].[IsActive] = 1
			)
			AND
			[User].[User].[ManagerID] = @SelManagerID
		AND
			[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END;
	
	
	INSERT INTO
		@TBL_ANS
		(
			[USER_ID]
			, [USER_DISP_NAME]
			, [USER_EMAIL]
			, [USER_IS_ACTIVE]
		)
	SELECT
		[T].[PK_ID] AS [USER_ID]
		, (LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) AS [USER_DISP_NAME]
		, [User].[User].[Email] AS [USER_EMAIL]
		, [User].[User].[IsActive] AS [USER_IS_ACTIVE]
	FROM
		@SEARCH_TMP T
	INNER JOIN
		[User].[User] WITH (NOLOCK)
	ON
		[User].[User].[UserID] = [T].[PK_ID]
	ORDER BY
		[T].[ID]
	ASC;
	
	--
	UPDATE
		[T]
	SET
		[T].[USER_ROLE_ID_EA] = [U].[UserRoleID]
		, [T].[USER_ROLE_IS_ACTIVE_EA] = [U].[IsActive]
	FROM
		@TBL_ANS T
	INNER JOIN
		[User].[UserRole] U  WITH (NOLOCK)
	ON
		[U].[UserID] = [T].[USER_ID]
	WHERE
		[U].[RoleID] = @EARoleID;
	
	--
	UPDATE
		[T]
	SET
		[T].[USER_ROLE_ID_QA] = [U].[UserRoleID]
		, [T].[USER_ROLE_IS_ACTIVE_QA] = [U].[IsActive]
	FROM
		@TBL_ANS T
	INNER JOIN
		[User].[UserRole] U WITH (NOLOCK)
	ON
		[U].[UserID] = [T].[USER_ID]
	WHERE
		[U].[RoleID] = @QARoleID;
	
	--
	UPDATE
		[T]
	SET
		[T].[USER_ROLE_ID_BA] = [U].[UserRoleID]
		, [T].[USER_ROLE_IS_ACTIVE_BA] = [U].[IsActive]
	FROM
		@TBL_ANS T
	INNER JOIN
		[User].[UserRole] U WITH (NOLOCK)
	ON
		[U].[UserID] = [T].[USER_ID]
	WHERE
		[U].[RoleID] = @BARoleID;
	
	SELECT * FROM @TBL_ANS ORDER BY 1 ASC;
	
	-- EXEC [User].[usp_GetBySearch_UserRole] @SelManagerID = 15
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetDate_Patient]    Script Date: 07/06/2013 21:10:05 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetDate_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetDate_Patient]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetDate_Patient]    Script Date: 07/06/2013 21:10:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Patient].[usp_GetDate_Patient]
	@ClinicID INT
	, @StatusIDs NVARCHAR(100)
AS	-- CREATED FOR SAI FOR CASE AGENT
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		[DOS_FROM] DATE NOT NULL
		, [DOS_TO] DATE NOT NULL
	);

	INSERT INTO
		@TBL_ANS
	SELECT
		ISNULL(MAX([Patient].[PatientVisit].[DOS]), GETDATE()) AS [DOS_FROM]
		, GETDATE() AS [DOS_TO]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]	
	WHERE
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
	AND
		[Patient].[Patient].[IsActive] = 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1;
		
	IF EXISTS (SELECT * FROM @TBL_ANS)
	BEGIN
		UPDATE
			@TBL_ANS
		SET
			[DOS_TO] = DATEADD(DAY, 3, [DOS_FROM]);
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT
			DATEADD(DAY, -3, GETDATE()) AS [DOS_FROM]
			, GETDATE() AS [DOS_TO];
	END
		
	SELECT * FROM @TBL_ANS;
		
	-- EXEC [Patient].[usp_GetDate_Patient] @ClinicID = 2, @StatusIDs = '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28' 
END


GO





GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetNameByID_Patient]    Script Date: 03/21/2013 14:38:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetNameByID_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetNameByID_Patient]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetNameByID_Patient]    Script Date: 03/21/2013 14:38:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Patient].[usp_GetNameByID_Patient] 
	@PatientID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[PatientID] INT NOT NULL 
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Patient].[Patient].[PatientID]
		, ((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
	FROM
		[Patient].[Patient] WITH (NOLOCK)
	WHERE
		@PatientID = [Patient].[Patient].[PatientID]
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;

	SELECT * FROM @TBL_RES;
	-- EXEC [Patient].[usp_GetByPkIdChartNumber_Patient] 8, NULL
	-- EXEC [Patient].[usp_GetByPkId_Patient] 1, 1
	-- EXEC [Patient].[usp_GetByPkId_Patient] 1, 0
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetNameByPatientVisitID_Patient]    Script Date: 03/26/2013 18:18:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetNameByPatientVisitID_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetNameByPatientVisitID_Patient]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetNameByPatientVisitID_Patient]    Script Date: 03/26/2013 18:18:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select the particular record

CREATE PROCEDURE [Patient].[usp_GetNameByPatientVisitID_Patient] 
	@PatientVisitID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[PatientID] INT NOT NULL 
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Patient].[PatientVisit].[PatientID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '') + ' [' + [Patient].[Patient].[ChartNumber] + ']'))) AS [NAME_CODE]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		@PatientVisitID = [Patient].[PatientVisit].[PatientVisitID]
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END
	AND
		[Patient].[PatientVisit].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientVisit].[IsActive] ELSE @IsActive END;

	SELECT * FROM @TBL_RES;
	
	-- EXEC [Patient].[usp_GetNameByPatientVisitID_Patient] 81, NULL

END




GO



-------------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetIDAutoComplete_Patient]    Script Date: 03/21/2013 15:36:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetIDAutoComplete_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetIDAutoComplete_Patient]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetIDAutoComplete_Patient]    Script Date: 03/21/2013 15:36:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Patient].[usp_GetIDAutoComplete_Patient] 

	@ChartNumber nvarchar(20)
	, @IsActive	BIT = NULL
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [PatientID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Patient].[Patient].[PatientID]
	FROM
		[Patient].[Patient] WITH (NOLOCK)
	WHERE
		@ChartNumber = [Patient].[Patient].[ChartNumber]
	AND
			[Patient].[Patient].[IsActive]=1
	
	SELECT * FROM @TBL_RES;
	-- EXEC [Patient].[usp_GetIDAutoComplete_Patient] coo1, 1
	-- EXEC [Patient].[usp_GetIDAutoComplete_Patient] 1, 1
	-- EXEC [Patient].[usp_GetIDAutoComplete_Patient] 1, 0
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_City]    Script Date: 03/21/2013 11:57:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetIDAutoComplete_City]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetIDAutoComplete_City]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetIDAutoComplete_City]    Script Date: 03/21/2013 11:57:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [MasterData].[usp_GetIDAutoComplete_City] 
	@ZipCode	NVARCHAR(10)
AS
BEGIN
	SET NOCOUNT ON;
	
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [CityID] INT NOT NULL
	);
	INSERT INTO
		@TBL_RES
	SELECT
		[MasterData].[City].[CityID]
	FROM
		[MasterData].[City] WITH (NOLOCK)
	WHERE
		@ZipCode = [MasterData].[City].[ZipCode]
	AND
		[MasterData].[City].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;
	
	-- EXEC [MasterData].[usp_GetIDAutoComplete_City] 1
	-- EXEC [MasterData].[usp_GetIDAutoComplete_City] 1, 1
	-- EXEC [MasterData].[usp_GetIDAutoComplete_City] 1, 0
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetByAZ_UserRole]    Script Date: 03/22/2013 11:06:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByAZ_UserRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByAZ_UserRole]
GO

/****** Object:  StoredProcedure [User].[usp_GetByAZ_UserRole]    Script Date: 03/22/2013 11:06:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [User].[usp_GetByAZ_UserRole]
	@WebAdminRoleID TINYINT = 1
	, @ManagerRoleID TINYINT = 2
	, @SelManagerID INT = 2
	, @SearchName NVARCHAR(450) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[SearchName] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[User].[User].[LastName]
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
	(
		[User].[User].[LastName] LIKE '%' + @SearchName + '%'
	OR
		[User].[User].[FirstName] LIKE '%' + @SearchName + '%'
	OR
		(
			[User].[User].[MiddleName] IS NOT NULL
		AND
			[User].[User].[MiddleName] LIKE '%' + @SearchName + '%'
		)
	OR
		[User].[User].[Email] LIKE '%' + @SearchName + '%'
	)
	AND
		[User].[User].[UserID] NOT IN
		(
			SELECT
				[User].[UserRole].[UserID]
			FROM
				[User].[UserRole] WITH (NOLOCK)
			WHERE
				[User].[UserRole].[RoleID] IN (@WebAdminRoleID, @ManagerRoleID)
			AND
				[User].[UserRole].[IsActive] = 1
		)
	AND
		[User].[User].[ManagerID] = @SelManagerID
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[SearchName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- [User].[usp_GetByAZ_UserRole] @SelManagerID = 15
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_LockUnLock]    Script Date: 03/21/2013 20:05:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetRecent_LockUnLock]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetRecent_LockUnLock]
GO

/****** Object:  StoredProcedure [Audit].[usp_GetRecent_LockUnLock]    Script Date: 03/21/2013 20:05:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select all records from the table

CREATE PROCEDURE [Audit].[usp_GetRecent_LockUnLock]
	@UserID INT
AS
BEGIN
	SET NOCOUNT ON;
SELECT 
	TOP 5
	   [LockOn]
      ,[UnLockOn]
FROM
	[Audit].[LockUnLock] WITH (NOLOCK)
WHERE 
	[Audit].[LockUnLock].[UserID] = @UserID
AND 
	[Audit].[LockUnLock].[UnLockOn] IS NOT NULL
ORDER BY
	[Audit].[LockUnLock].[UnLockOn] 
DESC;
    
    -- EXEC [Audit].[usp_GetRecent_LockUnLock] '6'
END


GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator]    Script Date: 03/21/2013 20:39:41 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator]    Script Date: 03/21/2013 20:39:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator] 
	@IllnessIndicatorCode	NVARCHAR(2)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorID], [Diagnosis].[IllnessIndicator].[IllnessIndicatorCode]
	FROM
		[Diagnosis].[IllnessIndicator] WITH (NOLOCK)
	WHERE
		@IllnessIndicatorCode = [Diagnosis].[IllnessIndicator].[IllnessIndicatorCode]
	AND
		[Diagnosis].[IllnessIndicator].[IsActive] = 1;

	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator] '00'
	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator] 1, 1
	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_IllnessIndicator] 1, 0
END


GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetAutocomplete_User]    Script Date: 05/28/2013 15:55:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetAutocomplete_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetAutocomplete_User]
GO



/****** Object:  StoredProcedure [User].[usp_GetAutocomplete_User]    Script Date: 05/28/2013 15:55:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [User].[usp_GetAutocomplete_User] 
	@stats	NVARCHAR (150) = NULL
	, @RoleID TINYINT
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([User].[User].[LastName] +[User].[User].[FirstName] + ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
		FROM
			[User].[User] WITH (NOLOCK)
		INNER JOIN 
			[User].[UserRole] WITH (NOLOCK)
		ON
			[User].[User].[UserID] = [User].[UserRole].[UserID]
		WHERE
			[User].[UserRole].[RoleID] = @RoleID
		AND
			[User].[User].[UserID] IN
			(
				SELECT
					[User].[UserClinic].[UserID]
				FROM
					[User].[UserClinic] WITH (NOLOCK)
				WHERE
					[User].[UserClinic].[IsActive] = 1
			)
		AND
			[User].[User].[IsActive] = 1
		AND
			[User].[UserRole].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
		FROM
			[User].[User] WITH (NOLOCK)
		INNER JOIN 
			[User].[UserRole] WITH (NOLOCK)
		ON
			[User].[User].[UserID] = [User].[UserRole].[UserID]
		WHERE
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') LIKE @stats ESCAPE '\'
		AND
			[User].[UserRole].[RoleID] = @RoleID
		AND
			[User].[User].[UserID] IN
			(
				SELECT
					[User].[UserClinic].[UserID]
				FROM
					[User].[UserClinic] WITH (NOLOCK)
				WHERE
					[User].[UserClinic].[IsActive] = 1
			)
		AND
			[User].[User].[IsActive] = 1
		AND
			[User].[UserRole].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
			FROM
				[User].[User] WITH (NOLOCK)
			INNER JOIN 
				[User].[UserRole] WITH (NOLOCK)
			ON
				[User].[User].[UserID] = [User].[UserRole].[UserID]
			WHERE
				[User].[User].[UserName] LIKE @stats ESCAPE '\'
			AND
				[User].[UserRole].[RoleID] = @RoleID
			AND
				[User].[User].[UserID] IN
				(
					SELECT
						[User].[UserClinic].[UserID]
					FROM
						[User].[UserClinic] WITH (NOLOCK)
					WHERE
						[User].[UserClinic].[IsActive] = 1
				)
			AND
				[User].[User].[IsActive] = 1
			AND
				[User].[UserRole].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 	
				([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
			FROM
				[User].[User] WITH (NOLOCK)
			INNER JOIN 
				[User].[UserRole] WITH (NOLOCK)
			ON
				[User].[User].[UserID] = [User].[UserRole].[UserID]
			WHERE
				([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') LIKE @stats ESCAPE '\'
			AND
				[User].[UserRole].[RoleID] = @RoleID
			AND
				[User].[User].[UserID] IN
				(
					SELECT
						[User].[UserClinic].[UserID]
					FROM
						[User].[UserClinic] WITH (NOLOCK)
					WHERE
						[User].[UserClinic].[IsActive] = 1
				)
			AND
				[User].[User].[IsActive] = 1
			AND
				[User].[UserRole].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;	
	
	-- EXEC [User].[usp_GetAutoComplete_User] @stats = 'R', @RoleID = 2
	-- EXEC [User].[usp_GetAutoComplete_User] @stats = '', @RoleID = 2
END

GO

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetIDAutoComplete_User]    Script Date: 03/22/2013 15:53:21 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetIDAutoComplete_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetIDAutoComplete_User]
GO
/****** Object:  StoredProcedure [User].[usp_GetIDAutoComplete_User]    Script Date: 03/22/2013 15:53:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [User].[usp_GetIDAutoComplete_User] 
	@UserName	nvarchar(15)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [User_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[User].[User].[UserID]
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		@UserName = [User].[User].[UserName]
	AND
		[User].[User].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [User].[usp_GetIDAutoComplete_User] 1, NULL
	-- EXEC [User].[usp_GetByPkId_User] 1, 1
	-- EXEC [User].[usp_GetByPkId_User] 1, 0
END



GO



-------------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetManager_User]    Script Date: 05/14/2013 10:33:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetManager_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetManager_User]
GO


/****** Object:  StoredProcedure [User].[usp_GetManager_User]    Script Date: 05/14/2013 10:33:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [User].[usp_GetManager_User] 
	@IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;



DECLARE @TBL_ALL TABLE
    (
		[UserID] INT
    );
    
    	
    
    INSERT INTO @TBL_ALL
    
    

SELECT
		
 [User].[User].[UserID]
	FROM
		[User].[User] WITH (NOLOCK)	
	INNER JOIN
		[User].[UserRole] WITH (NOLOCK)
	ON
		[User].[User].[UserID] = [User].[UserRole].[UserID]
	WHERE
		[User].[UserRole].[RoleID] = 2
	 ORDER BY 
		[User].[User].[UserID] DESC
	 	
	DECLARE @TBL_NEW TABLE
    (
		[Manager] INT
    );
	 	
	 	INSERT INTO @TBL_NEW
	 	
	 	SELECT 
	 		ManagerID 
	 	FROM 
	 		[User].[User]  WITH (NOLOCK)
	 	INNER JOIN 
	 		@TBL_ALL 
	 	ON
	 		[USER].[ManagerID] = [@TBL_ALL].[UserID]
	 	
	SELECT TOP 1	
		[User].[User].[UserID]
		,([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE] 
	FROM 
		[User].[User]  WITH (NOLOCK)
	INNER JOIN
		@TBL_NEW
	ON
		[User].[User].[UserID] = [@TBL_NEW].[Manager]
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
	ORDER BY 
		[User].[User].[UserID] 
	DESC;
	 	

			
	-- EXEC [User].[usp_GetManager_User] NULL
	-- EXEC [User].[usp_GetManager_User] 1
	-- EXEC [User].[usp_GetManager_User] 0
END



GO



-----------------------------------------------------------------------

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_Insert_ClaimProcess]    Script Date: 05/14/2013 08:28:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_Insert_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_Insert_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_Insert_ClaimProcess]    Script Date: 05/14/2013 08:28:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_Insert_ClaimProcess]
AS
BEGIN
	SELECT 1;
	-- THESE CONTENTS ARE MOVED TO [Patient].[usp_Update_PatientVisit]
END





GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetByAZ_ClaimProcess]    Script Date: 06/25/2013 11:24:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByAZ_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByAZ_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetByAZ_ClaimProcess]    Script Date: 06/25/2013 11:24:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Claim].[usp_GetByAZ_ClaimProcess] 
	 @ClinicID INT
	, @StatusIDs NVARCHAR(100)
	, @AssignedTo INT = NULL
	, @SearchName NVARCHAR(350) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ChartNumber] [nvarchar](350) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	
	SELECT
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))
	FROM
		[Patient].[Patient]
	INNER JOIN
		[Patient].[PatientVisit]
	ON 
		[Patient].[PatientID]=[PatientVisit].[PatientID]
	WHERE
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @SearchName + '%' 
		OR
			[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
		)
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND	
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		(
			[Patient].[PatientVisit].[AssignedTo] = @AssignedTo 
		OR
			@AssignedTo IS NULL
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;

		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ChartNumber] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Claim].[usp_GetByAZ_ClaimProcess] @ClinicID = 1, @StatusIDs = '8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25', @SearchName = ''	-- CREATED
	
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByManagerID_Clinic]    Script Date: 05/10/2013 17:25:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByManagerID_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByManagerID_Clinic]
GO



/****** Object:  StoredProcedure [Billing].[usp_GetByManagerID_Clinic]    Script Date: 05/10/2013 17:25:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetByManagerID_Clinic]
	@ManagerID	int 
	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT *
		
	FROM
		 [Billing].[Clinic]
	--WHERE
	
	-- [Billing].[Clinic].[ManagerID] = @ManagerID
	

	
	-- EXEC [Billing].[usp_GetByManagerID_Clinic] @ManagerID = 15
END



GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetByID_UserClinic]    Script Date: 03/23/2013 16:11:29 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByID_UserClinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByID_UserClinic]
GO

/****** Object:  StoredProcedure [User].[usp_GetByID_UserClinic]    Script Date: 03/23/2013 16:11:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select all records from the table

CREATE PROCEDURE [User].[usp_GetByID_UserClinic] 
	@UserID INT
	, @ClinicID INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[User].[UserClinic].[UserClinicID]
		, [User].[UserClinic].[IsActive]
	FROM
		[User].[UserClinic]
		
	WHERE
		[User].[UserClinic].[UserID] =@UserID
	AND
		[User].[UserClinic].[ClinicID] = @ClinicID;
			
	-- EXEC [User].[usp_GetByID_UserClinic] @ClinicID = 2, @UserID = 16
	
END


GO



-------------------------------------------------------------------------

--/****** Object:  StoredProcedure [User].[usp_Insert_UserClinic]    Script Date: 03/26/2013 11:40:12 ******/
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_Insert_UserClinic]') AND type in (N'P', N'PC'))
--DROP PROCEDURE [User].[usp_Insert_UserClinic]
--GO

--/****** Object:  StoredProcedure [User].[usp_Insert_UserClinic]    Script Date: 03/26/2013 11:40:12 ******/
--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO


---- Inserts the record into the table without repeatation

--CREATE PROCEDURE [User].[usp_Insert_UserClinic]
--	@UserID INT
--	, @ClinicID INT
--	, @Comment NVARCHAR(4000) = NULL
--	, @CurrentModificationBy BIGINT
--	, @UserClinicID BIGINT OUTPUT
--AS
--BEGIN
--	SET NOCOUNT ON;
	
--	BEGIN TRY
--		DECLARE @CurrentModificationOn DATETIME;
--		SELECT @CurrentModificationOn = GETDATE();
		
--		SELECT @UserClinicID = [User].[ufn_IsExists_UserClinic] (@UserID, @ClinicID, @Comment, 0);
		
--		IF @UserClinicID = 0
--		BEGIN
--			INSERT INTO [User].[UserClinic]
--			(
--				[UserID]
--				, [ClinicID]
--				, [Comment]
--				, [CreatedBy]
--				, [CreatedOn]
--				, [LastModifiedBy]
--				, [LastModifiedOn]
--				, [IsActive]
--			)
--			VALUES
--			(
--				@UserID
--				, @ClinicID
--				, @Comment
--				, @CurrentModificationBy
--				, @CurrentModificationOn
--				, @CurrentModificationBy
--				, @CurrentModificationOn
--				, 1
--			);
			
--			SELECT @UserClinicID = MAX([User].[UserClinic].[UserClinicID]) FROM [User].[UserClinic];
--		END
--		ELSE
--		BEGIN			
--			SELECT @UserClinicID = -1;
--		END		
--	END TRY
--	BEGIN CATCH
--		-- ERROR CATCHING - STARTS
--		BEGIN TRY
--			EXEC [Audit].[usp_Insert_ErrorLog];
--			SELECT @UserClinicID = (MAX([Audit].[ErrorLog].[ErrorLogID]) * -1) FROM [Audit].[ErrorLog];
--		END TRY
--		BEGIN CATCH
--			RAISERROR('Error in [Audit].[usp_Insert_ErrorLog]', -1, -1);
--		END CATCH
--		-- ERROR CATCHING - ENDS
--	END CATCH	
--END

--GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_DocumentCategory]    Script Date: 03/27/2013 21:38:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetAutoComplete_DocumentCategory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetAutoComplete_DocumentCategory]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetAutoComplete_DocumentCategory]    Script Date: 03/27/2013 21:38:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select all records from the table

CREATE PROCEDURE [MasterData].[usp_GetAutoComplete_DocumentCategory] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([MasterData].[DocumentCategory].[DocumentCategoryName] + ' [' +[MasterData].[DocumentCategory].[DocumentCategoryCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[DocumentCategory]
		WHERE
			[MasterData].[DocumentCategory].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([MasterData].[DocumentCategory].[DocumentCategoryName] + ' [' +[MasterData].[DocumentCategory].[DocumentCategoryCode] + ']') AS [NAME_CODE]
		FROM
			[MasterData].[DocumentCategory]
		WHERE
			([MasterData].[DocumentCategory].[DocumentCategoryName] + ' [' +[MasterData].[DocumentCategory].[DocumentCategoryCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[MasterData].[DocumentCategory].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[DocumentCategory].[DocumentCategoryName] + ' [' +[MasterData].[DocumentCategory].[DocumentCategoryCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[DocumentCategory]
			WHERE
				[MasterData].[DocumentCategory].[DocumentCategoryCode] LIKE @stats ESCAPE '\'
			AND
				[MasterData].[DocumentCategory].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([MasterData].[DocumentCategory].[DocumentCategoryName] + ' [' +[MasterData].[DocumentCategory].[DocumentCategoryCode] + ']') AS [NAME_CODE]
			FROM
				[MasterData].[DocumentCategory]
			WHERE
				([MasterData].[DocumentCategory].[DocumentCategoryName] + ' [' +[MasterData].[DocumentCategory].[DocumentCategoryCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[MasterData].[DocumentCategory].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [MasterData].[usp_GetAutoComplete_DocumentCategory] ' '
	-- EXEC [MasterData].[usp_GetAutoComplete_DocumentCategory] 'I'
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]    Script Date: 06/27/2013 12:29:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByPatientVisit_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]    Script Date: 06/27/2013 12:29:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]
	@PatientVisitID	BIGINT 
	, @DescType NVARCHAR(15) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	
	DECLARE @PRIMARY_DIAGNOSIS_ID BIGINT;
				
	DECLARE @DIAGNOSIS_ID BIGINT;
	DECLARE @CLAIM_NUMBER BIGINT;
	
	SELECT 
		@PRIMARY_DIAGNOSIS_ID = [Claim].[ClaimDiagnosis].[DiagnosisID]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Claim].[ClaimDiagnosis]
	ON
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
	WHERE
		[Patient].[PatientVisit].[PrimaryClaimDiagnosisID] IS NOT NULL
	AND
		[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
	AND 
		[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
	IF @PRIMARY_DIAGNOSIS_ID IS NOT NULL AND @PRIMARY_DIAGNOSIS_ID > 0
	BEGIN
		DECLARE @DIAG_COUNT INT;
		
		SELECT 
			@DIAG_COUNT = COUNT([Claim].[ClaimDiagnosis].[DiagnosisID]) 
		FROM 
			[Claim].[ClaimDiagnosis] 
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND
			 [Claim].[ClaimDiagnosis].[DiagnosisID] <> @PRIMARY_DIAGNOSIS_ID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
		IF @DIAG_COUNT = 0
		BEGIN
			SELECT @PRIMARY_DIAGNOSIS_ID = 0;
		END
	END
		
	DECLARE @TBL_DIAG TABLE
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [DIAGNOSIS_ID] BIGINT NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
	);
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [CLAIM_DIAGNOSIS_ID] BIGINT NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
		, [NAME_CODE] NVARCHAR(400) NOT NULL
	);
	
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc'))
	BEGIN
		SELECT @DescType = 'ShortDesc';
	END
		
	IF @PRIMARY_DIAGNOSIS_ID IS NULL OR @PRIMARY_DIAGNOSIS_ID = 0
	BEGIN
		INSERT INTO
			@TBL_DIAG
		SELECT
			[Claim].[ClaimDiagnosis].[DiagnosisID]
			, [Claim].[ClaimDiagnosis].[ClaimNumber] 
		FROM 
			[Claim].[ClaimDiagnosis]
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1
		ORDER BY
			[Claim].[ClaimDiagnosis].[ClaimNumber]
		ASC
			, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
		ASC;
	END
	ELSE
	BEGIN
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[Claim].[ClaimDiagnosis].[DiagnosisID]
				, [Claim].[ClaimDiagnosis].[ClaimNumber] 
			FROM 
				[Claim].[ClaimDiagnosis]
			WHERE 
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] != @PRIMARY_DIAGNOSIS_ID
			AND 
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
		DECLARE @CLAIM_NUMBER_PREV BIGINT;
		
		SELECT @CLAIM_NUMBER_PREV = -1;
				
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @CLAIM_NUMBER_PREV != @CLAIM_NUMBER
			BEGIN
				INSERT INTO
					@TBL_DIAG
				SELECT
					@PRIMARY_DIAGNOSIS_ID
					, @CLAIM_NUMBER;
					
				SELECT @CLAIM_NUMBER_PREV = @CLAIM_NUMBER;
			END
			
			INSERT INTO
				@TBL_DIAG
			SELECT
				@DIAGNOSIS_ID
				, @CLAIM_NUMBER;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
    
    IF @DescType = 'ShortDesc'		-- ShortDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'MediumDesc'		-- MediumDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'LongDesc'		-- LongDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'CustomDesc'		-- CustomDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;
	
	-- EXEC [Claim].[usp_GetByPatientVisit_ClaimDiagnosis] @PatientVisitID = 4339
END











GO



-------------------------------------------------------------------------

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [AccessPrivilege].[usp_GetBySearch_Role]    Script Date: 05/22/2013 16:21:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AccessPrivilege].[usp_GetBySearch_Role]') AND type in (N'P', N'PC'))
DROP PROCEDURE [AccessPrivilege].[usp_GetBySearch_Role]
GO


/****** Object:  StoredProcedure [AccessPrivilege].[usp_GetBySearch_Role]    Script Date: 05/22/2013 16:21:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [AccessPrivilege].[usp_GetBySearch_Role]
@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[AccessPrivilege].[Role].[RoleID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'RoleName' AND @OrderByDirection = 'A' THEN [AccessPrivilege].[Role].[RoleName] END ASC,
				CASE WHEN @orderByField = 'RoleName' AND @orderByDirection = 'D' THEN [AccessPrivilege].[Role].[RoleName] END DESC,
				
			    CASE WHEN @OrderByField = 'RoleCode' AND @OrderByDirection = 'A' THEN [AccessPrivilege].[Role].[RoleCode] END ASC,
				CASE WHEN @orderByField = 'RoleCode' AND @orderByDirection = 'D' THEN [AccessPrivilege].[Role].[RoleCode] END DESC,
				
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [AccessPrivilege].[Role].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [AccessPrivilege].[Role].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[AccessPrivilege].[Role]
	WHERE
		[AccessPrivilege].[Role].[RoleName] LIKE @StartBy + '%' 
	AND
		[AccessPrivilege].[Role].[RoleName] LIKE '%' + @SearchName + '%' 
	AND
		[AccessPrivilege].[Role].[IsActive] = CASE WHEN @IsActive IS NULL THEN [AccessPrivilege].[Role].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Role].[RoleID], [Role].[RoleName],[Role].[RoleCode],[Role].[IsActive]
	FROM
		[Role] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Role].[RoleID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[Role].[RoleID]
	
	
	-- EXEC [AccessPrivilege].[usp_GetBySearch_Role] @SearchName  = '45'
	-- EXEC [AccessPrivilege].[usp_GetBySearch_Role] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]    Script Date: 05/14/2013 12:41:01 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByPatientVisit_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]    Script Date: 05/14/2013 12:41:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Claim].[usp_GetByPatientVisit_ClaimDiagnosis]
	@PatientVisitID	BIGINT 
	, @DescType NVARCHAR(15) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;	
	
	DECLARE @PRIMARY_DIAGNOSIS_ID BIGINT;
				
	DECLARE @DIAGNOSIS_ID BIGINT;
	DECLARE @CLAIM_NUMBER BIGINT;
	
	SELECT 
		@PRIMARY_DIAGNOSIS_ID = [Claim].[ClaimDiagnosis].[DiagnosisID]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Claim].[ClaimDiagnosis]
	ON
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
	WHERE
		[Patient].[PatientVisit].[PrimaryClaimDiagnosisID] IS NOT NULL
	AND
		[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
	AND 
		[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
	IF @PRIMARY_DIAGNOSIS_ID IS NOT NULL AND @PRIMARY_DIAGNOSIS_ID > 0
	BEGIN
		DECLARE @DIAG_COUNT INT;
		
		SELECT 
			@DIAG_COUNT = COUNT([Claim].[ClaimDiagnosis].[DiagnosisID]) 
		FROM 
			[Claim].[ClaimDiagnosis] 
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND
			 [Claim].[ClaimDiagnosis].[DiagnosisID] <> @PRIMARY_DIAGNOSIS_ID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
		IF @DIAG_COUNT = 0
		BEGIN
			SELECT @PRIMARY_DIAGNOSIS_ID = 0;
		END
	END
		
	DECLARE @TBL_DIAG TABLE
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [DIAGNOSIS_ID] BIGINT NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
	);
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [CLAIM_DIAGNOSIS_ID] BIGINT NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
		, [NAME_CODE] NVARCHAR(400) NOT NULL
	);
	
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc'))
	BEGIN
		SELECT @DescType = 'ShortDesc';
	END
		
	IF @PRIMARY_DIAGNOSIS_ID IS NULL OR @PRIMARY_DIAGNOSIS_ID = 0
	BEGIN
		INSERT INTO
			@TBL_DIAG
		SELECT
			[Claim].[ClaimDiagnosis].[DiagnosisID]
			, [Claim].[ClaimDiagnosis].[ClaimNumber] 
		FROM 
			[Claim].[ClaimDiagnosis]
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1
		ORDER BY
			[Claim].[ClaimDiagnosis].[ClaimNumber]
		ASC
			, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
		ASC;
	END
	ELSE
	BEGIN
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[Claim].[ClaimDiagnosis].[DiagnosisID]
				, [Claim].[ClaimDiagnosis].[ClaimNumber] 
			FROM 
				[Claim].[ClaimDiagnosis]
			WHERE 
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] != @PRIMARY_DIAGNOSIS_ID
			AND 
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
		DECLARE @CLAIM_NUMBER_PREV BIGINT;
		
		SELECT @CLAIM_NUMBER_PREV = -1;
				
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @CLAIM_NUMBER_PREV != @CLAIM_NUMBER
			BEGIN
				INSERT INTO
					@TBL_DIAG
				SELECT
					@PRIMARY_DIAGNOSIS_ID
					, @CLAIM_NUMBER;
					
				SELECT @CLAIM_NUMBER_PREV = @CLAIM_NUMBER;
			END
			
			INSERT INTO
				@TBL_DIAG
			SELECT
				@DIAGNOSIS_ID
				, @CLAIM_NUMBER;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
    
    IF @DescType = 'ShortDesc'		-- ShortDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'MediumDesc'		-- MediumDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'LongDesc'		-- LongDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'CustomDesc'		-- CustomDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [CLAIM_DIAGNOSIS_ID]
				, @CLAIM_NUMBER AS [CLAIM_NUMBER]
				, (ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ' + ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;
	
	-- EXEC [Claim].[usp_GetByPatientVisit_ClaimDiagnosis] @PatientVisitID = 4339
END










GO



-------------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetByEDIReceiverID_EDIReceiver]    Script Date: 04/22/2013 15:26:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetByEDIReceiverID_EDIReceiver]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetByEDIReceiverID_EDIReceiver]
GO


/****** Object:  StoredProcedure [EDI].[usp_GetByEDIReceiverID_EDIReceiver]    Script Date: 04/22/2013 15:26:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [EDI].[usp_GetByEDIReceiverID_EDIReceiver]
	@InsuranceID	BIGINT 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		[EDI].[EDIReceiver].[EDIReceiverID]
		, [EDI].[EDIReceiver].[EDIReceiverName] + ' [' + CAST([EDI].[EDIReceiver].[EDIReceiverCode] AS NVARCHAR) + ']' AS [NAME_CODE]
	FROM
		[EDI].[EDIReceiver]
	INNER JOIN
		[Insurance].[Insurance]
	ON
		[EDI].[EDIReceiver].[EDIReceiverID] = [Insurance].[Insurance].[EDIReceiverID]
	WHERE
		 [Insurance].[Insurance].[InsuranceID] = @InsuranceID
	
	-- EXEC [Insurance].[usp_GetByEDIReceiverID_EDIReceiver] @InsuranceID = 1
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetByInsuranceTypeID_InsuranceType]    Script Date: 04/04/2013 09:47:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetByInsuranceTypeID_InsuranceType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetByInsuranceTypeID_InsuranceType]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetByInsuranceTypeID_InsuranceType]    Script Date: 04/04/2013 09:47:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Insurance].[usp_GetByInsuranceTypeID_InsuranceType]
	@InsuranceID	BIGINT 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		[Insurance].[InsuranceType].[InsuranceTypeID] ,[Insurance].[InsuranceType].[InsuranceTypeName] + ' [' + [Insurance].[InsuranceType].[InsuranceTypeCode] + ']' as [NAME_CODE]
	FROM
		[Insurance].[InsuranceType]
	INNER JOIN
		[Insurance].[Insurance]
	ON
		[Insurance].[InsuranceType].[InsuranceTypeID] = [Insurance].[Insurance].[InsuranceTypeID]
	WHERE
		 [Insurance].[Insurance].[InsuranceID] = @InsuranceID
	
	-- EXEC [Insurance].[usp_GetByInsuranceTypeID_InsuranceType] @InsuranceID = 1
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetByPatientID_Insurance]    Script Date: 04/04/2013 09:47:28 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetByPatientID_Insurance]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetByPatientID_Insurance]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetByPatientID_Insurance]    Script Date: 04/04/2013 09:47:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Insurance].[usp_GetByPatientID_Insurance]
	@PatientID	BIGINT 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		[Insurance].[Insurance].*
	FROM
		[Insurance].[Insurance]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Insurance].[Insurance].[InsuranceID] = [Patient].[Patient].[InsuranceID]
	WHERE
		 [Patient].[Patient].[PatientID] = @PatientID
	
	-- EXEC [Insurance].[usp_GetByPatientID_Insurance] @PatientID = 4
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetByPrintPinID_PrintPin]    Script Date: 04/22/2013 15:29:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetByPrintPinID_PrintPin]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetByPrintPinID_PrintPin]
GO


/****** Object:  StoredProcedure [EDI].[usp_GetByPrintPinID_PrintPin]    Script Date: 04/22/2013 15:29:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [EDI].[usp_GetByPrintPinID_PrintPin]
	@InsuranceID	BIGINT 
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		[EDI].[PrintPin].[PrintPinID], [EDI].[PrintPin].[PrintPinName] + ' [' + [EDI].[PrintPin].[PrintPinCode] + ']' as [NAME_CODE]
	FROM
		[EDI].[PrintPin]
	INNER JOIN
		[Insurance].[Insurance]
	ON
		[EDI].[PrintPin].[PrintPinID] = [Insurance].[Insurance].[PrintPinID]
	WHERE
		 [Insurance].[Insurance].[InsuranceID] = @InsuranceID
	
	-- EXEC [EDI].[usp_GetByPrintPinID_PrintPin] @InsuranceID = 1
END





GO



-------------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetByPrintSignID_PrintSign]    Script Date: 04/22/2013 15:31:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetByPrintSignID_PrintSign]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetByPrintSignID_PrintSign]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetByPrintSignID_PrintSign]    Script Date: 04/22/2013 15:31:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [EDI].[usp_GetByPrintSignID_PrintSign]
	@InsuranceID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    DECLARE @TBL_ANS TABLE 
    (
		 [NAME_CODE_PAT] NVARCHAR(165) NOT NULL
		, [NAME_CODE_INSURED] NVARCHAR(165)  NULL
		, [NAME_CODE_PROVIDER] NVARCHAR(165)  NULL
	);
	DECLARE @PatientPrintSignID	NVARCHAR(165) 
	,@InsuredPrintSignID	NVARCHAR(165) 
	,@PhysicianPrintSignID NVARCHAR(165) 
	
    BEGIN
		--PAT PRINT
		SELECT @PatientPrintSignID =
			[EDI].[PrintSign].[PrintSignName] --+ ' [' + [EDI].[PrintSign].[PrintSignCode] + ']' 
		FROM
			[EDI].[PrintSign]
		INNER JOIN
			[Insurance].[Insurance] 
		ON
			[EDI].[PrintSign].[PrintSignID] = [Insurance].[Insurance].[PatientPrintSignID]
		WHERE
			 [Insurance].[Insurance] .[InsuranceID] = @InsuranceID
			 
		--INSU PRINT
		SELECT @InsuredPrintSignID =
			[EDI].[PrintSign].[PrintSignName] --+ ' [' + [EDI].[PrintSign].[PrintSignCode] + ']' 
		FROM
			[EDI].[PrintSign]
		INNER JOIN
			[Insurance].[Insurance] 
		ON
			[EDI].[PrintSign].[PrintSignID] = [Insurance].[Insurance].[InsuredPrintSignID]
		WHERE
			 [Insurance].[Insurance] .[InsuranceID] = @InsuranceID	 
		
		--PHY PRINT
		SELECT @PhysicianPrintSignID =
			[EDI].[PrintSign].[PrintSignName] --+ ' [' + [EDI].[PrintSign].[PrintSignCode] + ']' 
		FROM
			[EDI].[PrintSign]
		INNER JOIN
			[Insurance].[Insurance] 
		ON
			[EDI].[PrintSign].[PrintSignID] = [Insurance].[Insurance].[PhysicianPrintSignID]
		WHERE
			 [Insurance].[Insurance] .[InsuranceID] = @InsuranceID	
	END
    
    BEGIN
		INSERT INTO
			@TBL_ANS
			VALUES 
			(
				@PatientPrintSignID	 
				,@InsuredPrintSignID	 
				,@PhysicianPrintSignID  
			)
	END
	
	SELECT * FROM @TBL_ANS
	
	-- EXEC [EDI].[usp_GetByPrintSignID_PrintSign] @InsuranceID = 1
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByPatientID_Provider]    Script Date: 04/04/2013 09:48:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByPatientID_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByPatientID_Provider]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetByPatientID_Provider]    Script Date: 04/04/2013 09:48:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetByPatientID_Provider]
	@PatientID	BIGINT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		[Billing].[Provider].*
	FROM
		[Billing].[Provider]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
	WHERE
		 [Patient].[Patient].[PatientID] = @PatientID
	
	-- EXEC [Billing].[usp_GetByPatientID_Provider] @PatientID = 4
END




GO


-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_Specialty]    Script Date: 04/04/2013 09:49:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetNameByID_Specialty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetNameByID_Specialty]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_Specialty]    Script Date: 04/04/2013 09:49:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetNameByID_Specialty] 
	@SpecialtyID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;	

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		([Billing].[Specialty].[SpecialtyName] + ' [' +[Billing].[Specialty].[SpecialtyCode] + ']') AS [NAME_CODE]
	FROM
		[Billing].[Specialty]
	WHERE
		@SpecialtyID = [Billing].[Specialty].[SpecialtyID]
	AND
		[Billing].[Specialty].[IsActive]=1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetNameByID_Specialty] 1, NULL
	
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByClinicID_IPA]    Script Date: 04/04/2013 09:49:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByClinicID_IPA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByClinicID_IPA]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetByClinicID_IPA]    Script Date: 04/04/2013 09:49:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetByClinicID_IPA]
	@ClinicID	BIGINT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		[Billing].[IPA].*
	FROM
		[Billing].[IPA]
	INNER JOIN
		[Billing].[Clinic]
	ON
		[Billing].[IPA].[IPAID] = [Billing].[Clinic].[IPAID]
	WHERE
		 [Billing].[Clinic].[ClinicID] = @ClinicID
	
	-- EXEC [Billing].[usp_GetByClinicID_IPA] @ClinicID = 2
END




GO


-------------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_EntityTypeQualifier]    Script Date: 04/04/2013 09:50:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetNameByID_EntityTypeQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetNameByID_EntityTypeQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_EntityTypeQualifier]    Script Date: 04/04/2013 09:50:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Transaction].[usp_GetNameByID_EntityTypeQualifier] 
	@EntityTypeQualifierID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierID]
		,[Transaction].[EntityTypeQualifier].[EntityTypeQualifierName]+ ' [' + [Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] + ']' AS [NAME_CODE]	
	FROM
		[Transaction].[EntityTypeQualifier]
	WHERE
		@EntityTypeQualifierID = [Transaction].[EntityTypeQualifier].[EntityTypeQualifierID]
	AND
		[Transaction].[EntityTypeQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[EntityTypeQualifier].[IsActive] ELSE @IsActive END;

	-- EXEC [Transaction].[usp_GetNameByID_EntityTypeQualifier] 1, NULL
	-- EXEC [Transaction].[usp_GetNameByID_EntityTypeQualifier] 1, 1
	-- EXEC [Transaction].[usp_GetNameByID_EntityTypeQualifier] 1, 0
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_EntityTypeQualifier]    Script Date: 04/04/2013 10:33:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_EntityTypeQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_EntityTypeQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_EntityTypeQualifier]    Script Date: 04/04/2013 10:33:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Transaction].[usp_GetBySearch_EntityTypeQualifier]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'EntityTypeQualifierName' AND @OrderByDirection = 'A' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] END ASC,
				CASE WHEN @orderByField = 'EntityTypeQualifierName' AND @orderByDirection = 'D' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] END DESC,
				
				CASE WHEN @OrderByField = 'ZipCode' AND @OrderByDirection = 'A' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] END ASC,
				CASE WHEN @orderByField = 'ZipCode' AND @orderByDirection = 'D' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[EntityTypeQualifier].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[EntityTypeQualifier].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[EntityTypeQualifier]
	WHERE
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[EntityTypeQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[EntityTypeQualifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[EntityTypeQualifier].[EntityTypeQualifierID], [EntityTypeQualifier].[EntityTypeQualifierCode], [EntityTypeQualifier].[EntityTypeQualifierName], [EntityTypeQualifier].[IsActive]
	FROM
		[EntityTypeQualifier] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [EntityTypeQualifier].[EntityTypeQualifierID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_EntityTypeQualifier] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_EntityTypeQualifier] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END



GO


-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetByAZ_EntityTypeQualifier]    Script Date: 04/04/2013 10:33:58 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetByAZ_EntityTypeQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetByAZ_EntityTypeQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetByAZ_EntityTypeQualifier]    Script Date: 04/04/2013 10:33:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Transaction].[usp_GetByAZ_EntityTypeQualifier] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[EntityTypeQualifierName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierName]
	FROM
		[Transaction].[EntityTypeQualifier]
	WHERE
	(
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Transaction].[EntityTypeQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[EntityTypeQualifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[EntityTypeQualifierName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Transaction].[usp_GetByAZ_EntityTypeQualifier] 
END



GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Insurance].[usp_GetBySearch_Insurance]    Script Date: 06/17/2013 15:10:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetBySearch_Insurance]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetBySearch_Insurance]
GO


/****** Object:  StoredProcedure [Insurance].[usp_GetBySearch_Insurance]    Script Date: 06/17/2013 15:10:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Insurance].[usp_GetBySearch_Insurance]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Insurance].[Insurance].[InsuranceID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'InsuranceName' AND @OrderByDirection = 'A' THEN [Insurance].[Insurance].[InsuranceName] END ASC,
				CASE WHEN @orderByField = 'InsuranceName' AND @orderByDirection = 'D' THEN [Insurance].[Insurance].[InsuranceName] END DESC,
				
				CASE WHEN @OrderByField = 'InsuranceCode' AND @OrderByDirection = 'A' THEN [Insurance].[Insurance].[InsuranceCode] END ASC,
				CASE WHEN @orderByField = 'InsuranceCode' AND @orderByDirection = 'D' THEN [Insurance].[Insurance].[InsuranceCode] END DESC,
				
				CASE WHEN @OrderByField = 'EDIReceiver' AND @OrderByDirection = 'A' THEN (EDIReceiver.EDIReceiverName +' [' + EDIReceiver.EDIReceiverCode + ']' ) END ASC,
				CASE WHEN @orderByField = 'EDIReceiver' AND @orderByDirection = 'D' THEN (EDIReceiver.EDIReceiverName +' [' + EDIReceiver.EDIReceiverCode + ']' ) END DESC,
				
				CASE WHEN @OrderByField = 'PayerID' AND @OrderByDirection = 'A' THEN [Insurance].[Insurance].[PayerID] END ASC,
				CASE WHEN @orderByField = 'PayerID' AND @orderByDirection = 'D' THEN [Insurance].[Insurance].[PayerID] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Insurance].[Insurance].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Insurance].[Insurance].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Insurance].[Insurance]
		
		INNER JOIN
		
		[Insurance].[InsuranceType]
		
		ON
		
		[Insurance].[InsuranceType].[InsuranceTypeID] = [Insurance].[Insurance].[InsuranceTypeID]
		
		INNER JOIN
		
		[EDI].[EDIReceiver]
		
		ON
		
		[EDI].[EDIReceiver].[EDIReceiverID] = [Insurance].[Insurance].[EDIReceiverID]
		
		
		
	WHERE
		[Insurance].[Insurance].[InsuranceName] LIKE @StartBy + '%' 
	AND
	(
		[Insurance].[Insurance].[InsuranceName] LIKE '%' + @SearchName + '%' 
	OR
		[Insurance].[Insurance].[InsuranceCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Insurance].[Insurance].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Insurance].[Insurance].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Insurance].[InsuranceID], [Insurance].[InsuranceName], [Insurance].[InsuranceCode],[Insurance].[PayerID],(EDIReceiver.EDIReceiverName +' [' + EDIReceiver.EDIReceiverCode + ']' )as EDIReceiver ,[Insurance].[IsActive]
	FROM
		[Insurance] WITH (NOLOCK)
		
		INNER JOIN
		
		[Insurance].[InsuranceType]
		
		ON
		
		[Insurance].[InsuranceType].[InsuranceTypeID] = [Insurance].[Insurance].[InsuranceTypeID]
		
		INNER JOIN
		
		[EDI].[EDIReceiver]
		
		ON
		
		[EDI].[EDIReceiver].[EDIReceiverID] = [Insurance].[Insurance].[EDIReceiverID]
		
	INNER JOIN
	
		@SEARCH_TMP
	ON
		[PK_ID] = [Insurance].[InsuranceID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Insurance].[usp_GetBySearch_Insurance] @SearchName  = '45'
	-- EXEC [Insurance].[usp_GetBySearch_Insurance] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetByAZ_Insurance]    Script Date: 04/15/2013 10:17:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetByAZ_Insurance]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetByAZ_Insurance]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetByAZ_Insurance]    Script Date: 04/15/2013 10:17:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Insurance].[usp_GetByAZ_Insurance] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[InsuranceName] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Insurance].[Insurance].[InsuranceName]
	FROM
		[Insurance].[Insurance]
		
		
		INNER JOIN
		
		[Insurance].[InsuranceType]
		
		ON
		
		[Insurance].[InsuranceType].[InsuranceTypeID] = [Insurance].[Insurance].[InsuranceTypeID]
	WHERE
	(
		[Insurance].[Insurance].[InsuranceName] LIKE '%' + @SearchName + '%' 
	OR
		[Insurance].[Insurance].[InsuranceCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Insurance].[Insurance].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Insurance].[Insurance].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[InsuranceName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Insurance].[usp_GetByAZ_Insurance] 
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetAutoComplete_ClaimDiagnosis]    Script Date: 05/14/2013 14:20:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAutoComplete_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAutoComplete_ClaimDiagnosis]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetAutoComplete_ClaimDiagnosis]    Script Date: 05/14/2013 14:20:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Claim].[usp_GetAutoComplete_ClaimDiagnosis] 
	@PatientVisitID BIGINT
	, @DescType NVARCHAR(15) = NULL
	, @stats NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(400) NOT NULL);
	
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc'))
	BEGIN
		SELECT @DescType = 'ShortDesc';
	END
		
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF @DescType = 'ShortDesc'		-- ShortDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosis]
				ON
					[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
				WHERE
					[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[DiagnosisCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				AND
					[Claim].[ClaimDiagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					LEFT JOIN
						[Diagnosis].[DiagnosisGroup]
					ON
						[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
					AND
						[Diagnosis].[DiagnosisGroup].[IsActive] = 1
					INNER JOIN
						[Claim].[ClaimDiagnosis]
					ON
						[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
					WHERE
						[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
					AND
						ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					AND
						[Claim].[ClaimDiagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
			
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN
						SELECT @stats = '%' + @stats;
						
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						LEFT JOIN
							[Diagnosis].[DiagnosisGroup]
						ON
							[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
						AND
							[Diagnosis].[DiagnosisGroup].[IsActive] = 1
						INNER JOIN
							[Claim].[ClaimDiagnosis]
						ON
							[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
						WHERE
							[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
						AND
							(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						AND
							[Claim].[ClaimDiagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
					END
				END
			END
		END
	END		-- ShortDesc ENDS
	ELSE IF @DescType = 'MediumDesc'		-- MediumDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosis]
				ON
					[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
				WHERE
					[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[DiagnosisCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				AND
					[Claim].[ClaimDiagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					LEFT JOIN
						[Diagnosis].[DiagnosisGroup]
					ON
						[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
					AND
						[Diagnosis].[DiagnosisGroup].[IsActive] = 1
					INNER JOIN
						[Claim].[ClaimDiagnosis]
					ON
						[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
					WHERE
						[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
					AND
						ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					AND
						[Claim].[ClaimDiagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
			
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN
						SELECT @stats = '%' + @stats;
						
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						LEFT JOIN
							[Diagnosis].[DiagnosisGroup]
						ON
							[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
						AND
							[Diagnosis].[DiagnosisGroup].[IsActive] = 1
						INNER JOIN
							[Claim].[ClaimDiagnosis]
						ON
							[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
						WHERE
							[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
						AND
							(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						AND
							[Claim].[ClaimDiagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
					END
				END
			END
		END
	END		-- MediumDesc ENDS
	ELSE IF @DescType = 'LongDesc'		-- LongDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosis]
				ON
					[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
				WHERE
					[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[DiagnosisCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				AND
					[Claim].[ClaimDiagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					LEFT JOIN
						[Diagnosis].[DiagnosisGroup]
					ON
						[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
					AND
						[Diagnosis].[DiagnosisGroup].[IsActive] = 1
					INNER JOIN
						[Claim].[ClaimDiagnosis]
					ON
						[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
					WHERE
						[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
					AND
						ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					AND
						[Claim].[ClaimDiagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
			
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN
						SELECT @stats = '%' + @stats;
						
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						LEFT JOIN
							[Diagnosis].[DiagnosisGroup]
						ON
							[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
						AND
							[Diagnosis].[DiagnosisGroup].[IsActive] = 1
						INNER JOIN
							[Claim].[ClaimDiagnosis]
						ON
							[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
						WHERE
							[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
						AND
							(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						AND
							[Claim].[ClaimDiagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
					END
				END
			END
		END
	END		-- LongDesc ENDS
	ELSE IF @DescType = 'CustomDesc'		-- CustomDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			INNER JOIN
				[Claim].[ClaimDiagnosis]
			ON
				[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosis]
				ON
					[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
				WHERE
					[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[DiagnosisCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				AND
					[Claim].[ClaimDiagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					LEFT JOIN
						[Diagnosis].[DiagnosisGroup]
					ON
						[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
					AND
						[Diagnosis].[DiagnosisGroup].[IsActive] = 1
					INNER JOIN
						[Claim].[ClaimDiagnosis]
					ON
						[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
					WHERE
						[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
					AND
						ISNULL('DG' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] , '*NO DG CODE*') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					AND
						[Claim].[ClaimDiagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
			
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN
						SELECT @stats = '%' + @stats;
						
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						LEFT JOIN
							[Diagnosis].[DiagnosisGroup]
						ON
							[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
						AND
							[Diagnosis].[DiagnosisGroup].[IsActive] = 1
						INNER JOIN
							[Claim].[ClaimDiagnosis]
						ON
							[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
						WHERE
							[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
						AND
							(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						AND
							[Claim].[ClaimDiagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
					END
				END
			END
		END
	END		-- CustomDesc ENDS
	
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Claim].[usp_GetAutoComplete_ClaimDiagnosis] @PatientVisitID=3, @stats =' '
	-- EXEC [Claim].[usp_GetAutoComplete_ClaimDiagnosis] @PatientVisitID=1, @stats ='d'	
END

GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_CPT]    Script Date: 06/12/2013 21:19:25 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetAutoComplete_CPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetAutoComplete_CPT]
GO



/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_CPT]    Script Date: 06/12/2013 21:19:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Diagnosis].[usp_GetAutoComplete_CPT] 
	 @DescType NVARCHAR(15) = NULL
	, @stats NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(400) NOT NULL);
	
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc'))
	BEGIN
		SELECT @DescType = 'ShortDesc';
	END
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF @DescType = 'ShortDesc'		-- ShortDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN	-- Space
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN	-- user enter ky
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN	-- look in code
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					[Diagnosis].[CPT].[CPTCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
			END
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN		-- anywhere
				SELECT @stats = '%' + @stats;
				
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN		 -- anywhere other group - Medium
					SELECT @stats = '%' + @stats;
					
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
					FROM
						[Diagnosis].[CPT]
					WHERE
						(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[CPT].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN		 -- anywhere other group - Long
						SELECT @stats = '%' + @stats;
						
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
						FROM
							[Diagnosis].[CPT]
						WHERE
							(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[CPT].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN		 -- anywhere other group - Custom
							SELECT @stats = '%' + @stats;
							
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
							FROM
								[Diagnosis].[CPT]
							WHERE
								(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[CPT].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END	
	ELSE IF @DescType = 'MediumDesc'		-- MediumDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					[Diagnosis].[CPT].[CPTCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
			END
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				SELECT @stats = '%' + @stats;
				
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN
					SELECT @stats = '%' + @stats;
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
					FROM
						[Diagnosis].[CPT]
					WHERE
						(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[CPT].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
					
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN
						SELECT @stats = '%' + @stats;
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
						FROM
							[Diagnosis].[CPT]
						WHERE
							(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[CPT].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN
							SELECT @stats = '%' + @stats;
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
							FROM
								[Diagnosis].[CPT]
							WHERE
								(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[CPT].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END	
	ELSE IF @DescType = 'LongDesc'		-- LongDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					[Diagnosis].[CPT].[CPTCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
			END
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				SELECT @stats = '%' + @stats;
				
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN
					SELECT @stats = '%' + @stats;
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
					FROM
						[Diagnosis].[CPT]
					WHERE
						(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[CPT].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
					
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN
						SELECT @stats = '%' + @stats;
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
						FROM
							[Diagnosis].[CPT]
						WHERE
							(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[CPT].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
						
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN
							SELECT @stats = '%' + @stats;
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
							FROM
								[Diagnosis].[CPT]
							WHERE
								(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[CPT].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END	
	ELSE IF @DescType = 'CustomDesc'		-- CustomDesc STARTS
	BEGIN
		IF LEN(@stats) = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50 
				(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
			FROM
				[Diagnosis].[CPT]
			WHERE
				(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					[Diagnosis].[CPT].[CPTCode] LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
			END
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN
				SELECT @stats = '%' + @stats;
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
				FROM
					[Diagnosis].[CPT]
				WHERE
					(ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN
					SELECT @stats = '%' + @stats;
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
					FROM
						[Diagnosis].[CPT]
					WHERE
						(ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[CPT].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
					
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN
						SELECT @stats = '%' + @stats;
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
						FROM
							[Diagnosis].[CPT]
						WHERE
							(ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[CPT].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
						
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN
							SELECT @stats = '%' + @stats;
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']')AS [NAME_CODE] 
							FROM
								[Diagnosis].[CPT]
							WHERE
								(ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' +[Diagnosis].[CPT].[CPTCode] + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[CPT].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END	
	
	SELECT * FROM @TBL_ANS;
	-- EXEC [Diagnosis].[usp_GetAutoComplete_CPT] 
	-- EXEC [Diagnosis].[usp_GetAutoComplete_CPT] @DescType= 'MediumDesc'
	-- EXEC [Diagnosis].[usp_GetAutoComplete_CPT] @DescType= 'LongDesc'
	-- EXEC [Diagnosis].[usp_GetAutoComplete_CPT] @DescType= 'CustomDesc'
	
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_CPT]    Script Date: 04/04/2013 14:05:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetIDAutoComplete_CPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_CPT]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_CPT]    Script Date: 04/04/2013 14:05:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_CPT] 
	@CPTCode	NVARCHAR(9)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [CPTID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Diagnosis].[CPT].[CPTID]
	FROM
		[Diagnosis].[CPT]
	WHERE
		@CPTCode = [Diagnosis].[CPT].[CPTCode]
	AND
		[Diagnosis].[CPT].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_CPT] '00100'
	
END





GO


-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Provider]    Script Date: 06/11/2013 09:58:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearch_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearch_Provider]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Provider]    Script Date: 06/11/2013 09:58:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Billing].[usp_GetBySearch_Provider]
     @ClinicID int = NULL
	,@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS

IF @ClinicID IS NOT NULL

BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[Provider].[ProviderID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) END DESC,
				
				CASE WHEN @OrderByField = 'ProviderCode' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[ProviderCode] END ASC,
				CASE WHEN @orderByField = 'ProviderCode' AND @orderByDirection = 'D' THEN [Billing].[Provider].[ProviderCode] END DESC,
				
				CASE WHEN @OrderByField = 'SSN' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[SSN] END ASC,
				CASE WHEN @orderByField = 'SSN' AND @orderByDirection = 'D' THEN [Billing].[Provider].[SSN] END DESC,
				
				CASE WHEN @OrderByField = 'NPI' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[NPI] END ASC,
				CASE WHEN @orderByField = 'NPI' AND @orderByDirection = 'D' THEN [Billing].[Provider].[NPI] END DESC,
				
				CASE WHEN @OrderByField = 'SpecialtyName' AND @OrderByDirection = 'A' THEN [Billing].[Specialty].[SpecialtyName] END ASC,
				CASE WHEN @orderByField = 'SpecialtyName' AND @orderByDirection = 'D' THEN [Billing].[Specialty].[SpecialtyName] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[Provider].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Billing].[Provider]
		
		INNER JOIN
		
		[Billing].[Specialty]
		
		ON
		[Billing].[Provider].[SpecialtyID] = [Billing].[Specialty].[SpecialtyID]
		
	WHERE
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
	(
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Provider].[ProviderCode] LIKE '%' + @SearchName + '%' 
	)
	
	AND
	
	[Billing].[Provider].[ClinicID] = @ClinicID
	
	AND
		[Billing].[Provider].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Provider].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Provider].[ProviderID], [Provider].[ProviderCode], (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) as [Name],[Provider].[SSN],[Provider].[NPI],[Specialty].[SpecialtyName], [Provider].[IsActive]
	FROM
		[Provider] WITH (NOLOCK)
		INNER JOIN
		
		[Billing].[Specialty]
		
		ON
		[Billing].[Provider].[SpecialtyID] = [Billing].[Specialty].[SpecialtyID]
		
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Provider].[ProviderID]
		
		
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
		
	AND
	[Billing].[Provider].[ClinicID] = @ClinicID
		
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_Provider] @ClinicID = 2
	-- EXEC [Billing].[usp_GetBySearch_Provider] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END

ELSE

BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[Provider].[ProviderID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) END DESC,
				
				CASE WHEN @OrderByField = 'ProviderCode' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[ProviderCode] END ASC,
				CASE WHEN @orderByField = 'ProviderCode' AND @orderByDirection = 'D' THEN [Billing].[Provider].[ProviderCode] END DESC,
				
				CASE WHEN @OrderByField = 'SSN' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[SSN] END ASC,
				CASE WHEN @orderByField = 'SSN' AND @orderByDirection = 'D' THEN [Billing].[Provider].[SSN] END DESC,
				
				CASE WHEN @OrderByField = 'NPI' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[NPI] END ASC,
				CASE WHEN @orderByField = 'NPI' AND @orderByDirection = 'D' THEN [Billing].[Provider].[NPI] END DESC,
				
				CASE WHEN @OrderByField = 'SpecialtyName' AND @OrderByDirection = 'A' THEN [Billing].[Specialty].[SpecialtyName] END ASC,
				CASE WHEN @orderByField = 'SpecialtyName' AND @orderByDirection = 'D' THEN [Billing].[Specialty].[SpecialtyName] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[Provider].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[Provider].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Billing].[Provider]
		
		INNER JOIN
		
		[Billing].[Specialty]
		
		ON
		[Billing].[Provider].[SpecialtyID] = [Billing].[Specialty].[SpecialtyID]
		
	WHERE
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
	(
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Provider].[ProviderCode] LIKE '%' + @SearchName + '%' 
	)
	
	AND
		[Billing].[Provider].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Provider].[IsActive] ELSE @IsActive END;
		
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Provider].[ProviderID], [Provider].[ProviderCode], (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) as [Name],[Provider].[SSN],[Provider].[NPI],[Specialty].[SpecialtyName], [Provider].[IsActive]
	FROM
		[Provider] WITH (NOLOCK)
		INNER JOIN
		
		[Billing].[Specialty]
		
		ON
		[Billing].[Provider].[SpecialtyID] = [Billing].[Specialty].[SpecialtyID]
		
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Provider].[ProviderID]
		
		
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
		
	
		
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_Provider] @ClinicID = 2
	-- EXEC [Billing].[usp_GetBySearch_Provider] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END







GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_Provider]    Script Date: 06/11/2013 09:59:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByAZ_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByAZ_Provider]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_Provider]    Script Date: 06/11/2013 09:59:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Billing].[usp_GetByAZ_Provider]
     @ClinicID int = NULL
	,@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ProviderName] [nvarchar](400) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    IF @ClinicID IS NOT NULL
    
    BEGIN
    INSERT INTO
		@TBL_ALL
	SELECT
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], ''))))
	FROM
		[Billing].[Provider]
	WHERE
	(
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Provider].[ProviderCode] LIKE '%' + @SearchName + '%'
	)
	
	AND
	
[Billing].[Provider].[ClinicID] = @ClinicID
	 
	AND
		[Billing].[Provider].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Provider].[IsActive] ELSE @IsActive END;
	END	
	
	ELSE
	
	  BEGIN
    INSERT INTO
		@TBL_ALL
	SELECT
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], ''))))
	FROM
		[Billing].[Provider]
	WHERE
	(
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Provider].[ProviderCode] LIKE '%' + @SearchName + '%'
	)
	AND
		[Billing].[Provider].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Provider].[IsActive] ELSE @IsActive END;
	END		
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ProviderName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Billing].[usp_GetByAZ_Provider]  @ClinicID = 1
END






GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Specialty]    Script Date: 04/04/2013 16:17:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearch_Specialty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearch_Specialty]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Specialty]    Script Date: 04/04/2013 16:17:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetBySearch_Specialty]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[Specialty].[SpecialtyID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'SpecialtyName' AND @OrderByDirection = 'A' THEN [Billing].[Specialty].[SpecialtyName] END ASC,
				CASE WHEN @orderByField = 'SpecialtyName' AND @orderByDirection = 'D' THEN [Billing].[Specialty].[SpecialtyName] END DESC,
				
				CASE WHEN @OrderByField = 'SpecialtyCode' AND @OrderByDirection = 'A' THEN [Billing].[Specialty].[SpecialtyCode] END ASC,
				CASE WHEN @orderByField = 'SpecialtyCode' AND @orderByDirection = 'D' THEN [Billing].[Specialty].[SpecialtyCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[Specialty].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[Specialty].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Billing].[Specialty]
	WHERE
		[Billing].[Specialty].[SpecialtyName] LIKE @StartBy + '%' 
	AND
	(
		[Billing].[Specialty].[SpecialtyName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Specialty].[SpecialtyCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Billing].[Specialty].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Specialty].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Specialty].[SpecialtyID], [Specialty].[SpecialtyCode], [Specialty].[SpecialtyName], [Specialty].[IsActive]
	FROM
		[Specialty] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Specialty].[SpecialtyID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_Specialty] @SearchName  = '45'
	-- EXEC [Billing].[usp_GetBySearch_Specialty] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_Specialty]    Script Date: 04/04/2013 16:18:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByAZ_Specialty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByAZ_Specialty]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_Specialty]    Script Date: 04/04/2013 16:18:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetByAZ_Specialty] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[SpecialtyName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Billing].[Specialty].[SpecialtyName]
	FROM
		[Billing].[Specialty]
	WHERE
	(
		[Billing].[Specialty].[SpecialtyName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Specialty].[SpecialtyCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Billing].[Specialty].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Specialty].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[SpecialtyName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Billing].[usp_GetByAZ_Specialty] 
END



GO

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_Country]    Script Date: 04/04/2013 17:04:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetBySearch_Country]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetBySearch_Country]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_Country]    Script Date: 04/04/2013 17:04:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [MasterData].[usp_GetBySearch_Country]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[MasterData].[Country].[CountryID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'CountryName' AND @OrderByDirection = 'A' THEN [MasterData].[Country].[CountryName] END ASC,
				CASE WHEN @orderByField = 'CountryName' AND @orderByDirection = 'D' THEN [MasterData].[Country].[CountryName] END DESC,
						
				CASE WHEN @OrderByField = 'CountryCode' AND @OrderByDirection = 'A' THEN [MasterData].[Country].[CountryCode] END ASC,
				CASE WHEN @orderByField = 'CountryCode' AND @orderByDirection = 'D' THEN [MasterData].[Country].[CountryCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [MasterData].[Country].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [MasterData].[Country].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[MasterData].[Country]
	WHERE
		[MasterData].[Country].[CountryName] LIKE @StartBy + '%' 
	AND
	(
		[MasterData].[Country].[CountryName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[Country].[CountryCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[MasterData].[Country].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[Country].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Country].[CountryID], [Country].[CountryCode], [Country].[CountryName], [Country].[IsActive]
	FROM
		[Country] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Country].[CountryID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [MasterData].[usp_GetBySearch_Country] @SearchName  = '36'
	-- EXEC [MasterData].[usp_GetBySearch_Country] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_State]    Script Date: 04/04/2013 17:04:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetByAZ_State]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetByAZ_State]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetByAZ_State]    Script Date: 04/04/2013 17:04:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [MasterData].[usp_GetByAZ_State] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[StateName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[MasterData].[State].[StateName]
	FROM
		[MasterData].[State]
	WHERE
	(
		[MasterData].[State].[StateName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[State].[StateCode] LIKE '%' + @SearchName + '%' 		
	)
	AND
		[MasterData].[State].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[State].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[StateName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [MasterData].[usp_GetByAZ_State] 
END



GO

-------------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_State]    Script Date: 04/04/2013 17:05:47 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetBySearch_State]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetBySearch_State]
GO


/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_State]    Script Date: 04/04/2013 17:05:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [MasterData].[usp_GetBySearch_State]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[MasterData].[State].[StateID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'StateName' AND @OrderByDirection = 'A' THEN [MasterData].[State].[StateName] END ASC,
				CASE WHEN @orderByField = 'StateName' AND @orderByDirection = 'D' THEN [MasterData].[State].[StateName] END DESC,
						
				CASE WHEN @OrderByField = 'StateCode' AND @OrderByDirection = 'A' THEN [MasterData].[State].[StateCode] END ASC,
				CASE WHEN @orderByField = 'StateCode' AND @orderByDirection = 'D' THEN [MasterData].[State].[StateCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [MasterData].[State].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [MasterData].[State].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[MasterData].[State]
	WHERE
		[MasterData].[State].[StateName] LIKE @StartBy + '%' 
	AND
	(
		[MasterData].[State].[StateName] LIKE '%' + @SearchName + '%' 
	OR
		[MasterData].[State].[StateCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[MasterData].[State].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[State].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[State].[StateID], [State].[StateCode], [State].[StateName], [State].[IsActive]
	FROM
		[State] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [State].[StateID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [MasterData].[usp_GetBySearch_State] @SearchName  = '36'
	-- EXEC [MasterData].[usp_GetBySearch_State] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_Modifier]    Script Date: 04/04/2013 17:45:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetAutoComplete_Modifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetAutoComplete_Modifier]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_Modifier]    Script Date: 04/04/2013 17:45:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Diagnosis].[usp_GetAutoComplete_Modifier] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']') AS [NAME_CODE]
		FROM
			[Diagnosis].[Modifier]
		WHERE
			[Diagnosis].[Modifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']') AS [NAME_CODE]
		FROM
			[Diagnosis].[Modifier]
		WHERE
			([Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Modifier]
			WHERE
				[Diagnosis].[Modifier].[ModifierCode] LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Modifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Modifier]
			WHERE
				([Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Modifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Diagnosis].[usp_GetAutoComplete_Modifier] 'I'
	---- EXEC [Diagnosis].[usp_GetAutoComplete_Modifier] '47'
	
	
	
END






GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_Modifier]    Script Date: 04/04/2013 17:45:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetIDAutoComplete_Modifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_Modifier]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_Modifier]    Script Date: 04/04/2013 17:45:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_Modifier] 
	@ModifierCode	NVARCHAR(9)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [ModifierID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Diagnosis].[Modifier].[ModifierID]
	FROM
		[Diagnosis].[Modifier]
	WHERE
		@ModifierCode = [Diagnosis].[Modifier].[ModifierCode]
	AND
		[Diagnosis].[Modifier].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_Modifier] '47'
	
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetBySearch_InsuranceType]    Script Date: 04/05/2013 16:47:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetBySearch_InsuranceType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetBySearch_InsuranceType]
GO


/****** Object:  StoredProcedure [Insurance].[usp_GetBySearch_InsuranceType]    Script Date: 04/05/2013 16:47:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Insurance].[usp_GetBySearch_InsuranceType]	
	@OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Insurance].[InsuranceType].[InsuranceTypeID]
		, ROW_NUMBER() OVER (
			ORDER BY						
				CASE WHEN @OrderByField = 'InsuranceTypeCode' AND @OrderByDirection = 'A' THEN [Insurance].[InsuranceType].[InsuranceTypeCode] END ASC,
				CASE WHEN @orderByField = 'InsuranceTypeCode' AND @orderByDirection = 'D' THEN [Insurance].[InsuranceType].[InsuranceTypeCode] END DESC,
				
				CASE WHEN @OrderByField = 'InsuranceTypeName' AND @OrderByDirection = 'A' THEN [Insurance].[InsuranceType].[InsuranceTypeName] END ASC,
				CASE WHEN @orderByField = 'InsuranceTypeName' AND @orderByDirection = 'D' THEN [Insurance].[InsuranceType].[InsuranceTypeName] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Insurance].[InsuranceType].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Insurance].[InsuranceType].[LastModifiedOn] END DESC			
			) AS ROW_NUM
	FROM
		[Insurance].[InsuranceType]
	WHERE
		[Insurance].[InsuranceType].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Insurance].[InsuranceType].[IsActive] ELSE @IsActive END;
		
	DECLARE @TBL_RES TABLE
	(
		[InsuranceTypeID] INT NOT NULL 
		, [InsuranceTypeCode] NVARCHAR(2) NOT NULL
		, [InsuranceTypeName] NVARCHAR(150) NOT NULL 
		, [IsActive] BIT NOT NULL 
	);

	INSERT INTO
		@TBL_RES
	SELECT		
		[InsuranceType].[InsuranceTypeID]
		, [InsuranceType].[InsuranceTypeCode]
		, [InsuranceType].[InsuranceTypeName]
		, [InsuranceType].[IsActive]
	FROM
		[InsuranceType] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [InsuranceType].[InsuranceTypeID]
	ORDER BY
		[ID]
	ASC;
	
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Insurance].[usp_GetBySearch_InsuranceType]
	-- EXEC [Insurance].[usp_GetBySearch_InsuranceType] @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END


GO


-------------------------------------------------------------------------


/****** Object:  StoredProcedure [Billing].[usp_GetICDFormat_Clinic]    Script Date: 04/05/2013 16:51:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetICDFormat_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetICDFormat_Clinic]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetICDFormat_Clinic]    Script Date: 04/05/2013 16:51:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetICDFormat_Clinic] 
	@ClinicID	INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Billing].[Clinic].[ClinicID], [Billing].[Clinic].[ICDFormat]
	FROM
		[Billing].[Clinic]
	WHERE
		@ClinicID = [Billing].[Clinic].[ClinicID]
	AND
		[Billing].[Clinic].[IsActive] = 1;

	-- EXEC [Billing].[usp_GetICDFormat_Clinic] 1
	-- EXEC [Billing].[usp_GetICDFormat_Clinic] 1, 1
	-- EXEC [Billing].[usp_GetICDFormat_Clinic] 1, 0
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_Modifier]    Script Date: 04/08/2013 10:19:12 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetByAZ_Modifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetByAZ_Modifier]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_Modifier]    Script Date: 04/08/2013 10:19:12 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Diagnosis].[usp_GetByAZ_Modifier] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ModifierName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Diagnosis].[Modifier].[ModifierName]
	FROM
		[Diagnosis].[Modifier]
	WHERE
	(
		[Diagnosis].[Modifier].[ModifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[Modifier].[ModifierCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Diagnosis].[Modifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[Modifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ModifierName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Diagnosis].[usp_GetByAZ_Modifier] 
END




GO




-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_Modifier]    Script Date: 04/08/2013 10:19:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetBySearch_Modifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetBySearch_Modifier]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_Modifier]    Script Date: 04/08/2013 10:19:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Diagnosis].[usp_GetBySearch_Modifier]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Diagnosis].[Modifier].[ModifierID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'ModifierName' AND @OrderByDirection = 'A' THEN [Diagnosis].[Modifier].[ModifierName] END ASC,
				CASE WHEN @orderByField = 'ModifierName' AND @orderByDirection = 'D' THEN [Diagnosis].[Modifier].[ModifierName] END DESC,
				
				CASE WHEN @OrderByField = 'ModifierCode' AND @OrderByDirection = 'A' THEN [Diagnosis].[Modifier].[ModifierCode] END ASC,
				CASE WHEN @orderByField = 'ModifierCode' AND @orderByDirection = 'D' THEN [Diagnosis].[Modifier].[ModifierCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Diagnosis].[Modifier].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Diagnosis].[Modifier].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Diagnosis].[Modifier]
	WHERE
		[Diagnosis].[Modifier].[ModifierName] LIKE @StartBy + '%' 
	AND
	(
		[Diagnosis].[Modifier].[ModifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[Modifier].[ModifierCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Diagnosis].[Modifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[Modifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Modifier].[ModifierID], [Modifier].[ModifierCode], [Modifier].[ModifierName], [Modifier].[IsActive]
	FROM
		[Modifier] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Modifier].[ModifierID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Diagnosis].[usp_GetBySearch_Modifier] @SearchName  = '45'
	-- EXEC [Diagnosis].[usp_GetBySearch_Modifier] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_ClaimMedia]    Script Date: 04/08/2013 11:30:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_ClaimMedia]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_ClaimMedia]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_ClaimMedia]    Script Date: 04/08/2013 11:30:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Transaction].[usp_GetBySearch_ClaimMedia]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[ClaimMedia].[ClaimMediaID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'ClaimMediaName' AND @OrderByDirection = 'A' THEN [Transaction].[ClaimMedia].[ClaimMediaName] END ASC,
				CASE WHEN @orderByField = 'ClaimMediaName' AND @orderByDirection = 'D' THEN [Transaction].[ClaimMedia].[ClaimMediaName] END DESC,
				
				CASE WHEN @OrderByField = 'ClaimMediaCode' AND @OrderByDirection = 'A' THEN [Transaction].[ClaimMedia].[ClaimMediaCode] END ASC,
				CASE WHEN @orderByField = 'ClaimMediaCode' AND @orderByDirection = 'D' THEN [Transaction].[ClaimMedia].[ClaimMediaCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[ClaimMedia].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[ClaimMedia].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[ClaimMedia]
	WHERE
		[Transaction].[ClaimMedia].[ClaimMediaName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[ClaimMedia].[ClaimMediaName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[ClaimMedia].[ClaimMediaCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[ClaimMedia].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[ClaimMedia].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[ClaimMedia].[ClaimMediaID], [ClaimMedia].[ClaimMediaCode], [ClaimMedia].[ClaimMediaName], [ClaimMedia].[IsActive]
	FROM
		[ClaimMedia] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [ClaimMedia].[ClaimMediaID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_ClaimMedia] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_ClaimMedia] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetByAZ_ClaimMedia]    Script Date: 04/08/2013 11:30:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetByAZ_ClaimMedia]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetByAZ_ClaimMedia]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetByAZ_ClaimMedia]    Script Date: 04/08/2013 11:30:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Transaction].[usp_GetByAZ_ClaimMedia] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ClaimMediaName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Transaction].[ClaimMedia].[ClaimMediaName]
	FROM
		[Transaction].[ClaimMedia]
	WHERE
	(
		[Transaction].[ClaimMedia].[ClaimMediaName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[ClaimMedia].[ClaimMediaCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Transaction].[ClaimMedia].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[ClaimMedia].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ClaimMediaName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Transaction].[usp_GetByAZ_ClaimMedia] 
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_IllnessIndicator]    Script Date: 04/08/2013 13:45:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetBySearch_IllnessIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetBySearch_IllnessIndicator]
GO


/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_IllnessIndicator]    Script Date: 04/08/2013 13:45:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Diagnosis].[usp_GetBySearch_IllnessIndicator]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'IllnessIndicatorName' AND @OrderByDirection = 'A' THEN [Diagnosis].[IllnessIndicator].[IllnessIndicatorName] END ASC,
				CASE WHEN @orderByField = 'IllnessIndicatorName' AND @orderByDirection = 'D' THEN [Diagnosis].[IllnessIndicator].[IllnessIndicatorName] END DESC,
				
				CASE WHEN @OrderByField = 'IllnessIndicatorCode' AND @OrderByDirection = 'A' THEN [Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] END ASC,
				CASE WHEN @orderByField = 'IllnessIndicatorCode' AND @orderByDirection = 'D' THEN [Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Diagnosis].[IllnessIndicator].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Diagnosis].[IllnessIndicator].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Diagnosis].[IllnessIndicator]
	WHERE
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorName] LIKE @StartBy + '%' 
	AND
	(
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorName] LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Diagnosis].[IllnessIndicator].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[IllnessIndicator].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[IllnessIndicator].[IllnessIndicatorID], [IllnessIndicator].[IllnessIndicatorCode], [IllnessIndicator].[IllnessIndicatorName], [IllnessIndicator].[IsActive]
	FROM
		[IllnessIndicator] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [IllnessIndicator].[IllnessIndicatorID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Diagnosis].[usp_GetBySearch_IllnessIndicator] @SearchName  = '45'
	-- EXEC [Diagnosis].[usp_GetBySearch_IllnessIndicator] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-------------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_IllnessIndicator]    Script Date: 04/08/2013 13:46:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetByAZ_IllnessIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetByAZ_IllnessIndicator]
GO


/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_IllnessIndicator]    Script Date: 04/08/2013 13:46:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Diagnosis].[usp_GetByAZ_IllnessIndicator] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[IllnessIndicatorName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorName]
	FROM
		[Diagnosis].[IllnessIndicator]
	WHERE
	(
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorName] LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Diagnosis].[IllnessIndicator].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[IllnessIndicator].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[IllnessIndicatorName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Diagnosis].[usp_GetByAZ_IllnessIndicator] 
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetByAZ_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:19:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetByAZ_InterchangeUsageIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetByAZ_InterchangeUsageIndicator]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetByAZ_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:19:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Transaction].[usp_GetByAZ_InterchangeUsageIndicator] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[InterchangeUsageIndicatorName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName]
	FROM
		[Transaction].[InterchangeUsageIndicator]
	WHERE
	(
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Transaction].[InterchangeUsageIndicator].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[InterchangeUsageIndicator].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[InterchangeUsageIndicatorName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Transaction].[usp_GetByAZ_InterchangeUsageIndicator] 
END





GO



-------------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:13:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_InterchangeUsageIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_InterchangeUsageIndicator]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:13:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Transaction].[usp_GetBySearch_InterchangeUsageIndicator]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'InterchangeUsageIndicatorName' AND @OrderByDirection = 'A' THEN [Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] END ASC,
				CASE WHEN @orderByField = 'InterchangeUsageIndicatorName' AND @orderByDirection = 'D' THEN [Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] END DESC,
				
				CASE WHEN @OrderByField = 'InterchangeUsageIndicatorCode' AND @OrderByDirection = 'A' THEN [Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] END ASC,
				CASE WHEN @orderByField = 'InterchangeUsageIndicatorCode' AND @orderByDirection = 'D' THEN [Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[InterchangeUsageIndicator].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[InterchangeUsageIndicator].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[InterchangeUsageIndicator]
	WHERE
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[InterchangeUsageIndicator].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[InterchangeUsageIndicator].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[InterchangeUsageIndicator].[InterchangeUsageIndicatorID], [InterchangeUsageIndicator].[InterchangeUsageIndicatorCode], [InterchangeUsageIndicator].[InterchangeUsageIndicatorName], [InterchangeUsageIndicator].[IsActive]
	FROM
		[InterchangeUsageIndicator] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [InterchangeUsageIndicator].[InterchangeUsageIndicatorID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_InterchangeUsageIndicator] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_InterchangeUsageIndicator] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_PrintPin]    Script Date: 04/08/2013 15:50:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetBySearch_PrintPin]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetBySearch_PrintPin]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_PrintPin]    Script Date: 04/08/2013 15:50:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [EDI].[usp_GetBySearch_PrintPin]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[EDI].[PrintPin].[PrintPinID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'PrintPinName' AND @OrderByDirection = 'A' THEN [EDI].[PrintPin].[PrintPinName] END ASC,
				CASE WHEN @orderByField = 'PrintPinName' AND @orderByDirection = 'D' THEN [EDI].[PrintPin].[PrintPinName] END DESC,
				
				CASE WHEN @OrderByField = 'PrintPinCode' AND @OrderByDirection = 'A' THEN [EDI].[PrintPin].[PrintPinCode] END ASC,
				CASE WHEN @orderByField = 'PrintPinCode' AND @orderByDirection = 'D' THEN [EDI].[PrintPin].[PrintPinCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [EDI].[PrintPin].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [EDI].[PrintPin].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[EDI].[PrintPin]
	WHERE
		[EDI].[PrintPin].[PrintPinName] LIKE @StartBy + '%' 
	AND
	(
		[EDI].[PrintPin].[PrintPinName] LIKE '%' + @SearchName + '%' 
	OR
		[EDI].[PrintPin].[PrintPinCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[EDI].[PrintPin].[IsActive] = CASE WHEN @IsActive IS NULL THEN [EDI].[PrintPin].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[PrintPin].[PrintPinID], [PrintPin].[PrintPinCode], [PrintPin].[PrintPinName], [PrintPin].[IsActive]
	FROM
		[PrintPin] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [PrintPin].[PrintPinID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [EDI].[usp_GetBySearch_PrintPin] @SearchName  = '45'
	-- EXEC [EDI].[usp_GetBySearch_PrintPin] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_PrintSign]    Script Date: 04/08/2013 17:32:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetBySearch_PrintSign]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetBySearch_PrintSign]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_PrintSign]    Script Date: 04/08/2013 17:32:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [EDI].[usp_GetBySearch_PrintSign]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[EDI].[PrintSign].[PrintSignID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'PrintSignName' AND @OrderByDirection = 'A' THEN [EDI].[PrintSign].[PrintSignName] END ASC,
				CASE WHEN @orderByField = 'PrintSignName' AND @orderByDirection = 'D' THEN [EDI].[PrintSign].[PrintSignName] END DESC,
				
				CASE WHEN @OrderByField = 'PrintSignCode' AND @OrderByDirection = 'A' THEN [EDI].[PrintSign].[PrintSignCode] END ASC,
				CASE WHEN @orderByField = 'PrintSignCode' AND @orderByDirection = 'D' THEN [EDI].[PrintSign].[PrintSignCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [EDI].[PrintSign].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [EDI].[PrintSign].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[EDI].[PrintSign]
	WHERE
		[EDI].[PrintSign].[PrintSignName] LIKE @StartBy + '%' 
	AND
	(
		[EDI].[PrintSign].[PrintSignName] LIKE '%' + @SearchName + '%' 
	OR
		[EDI].[PrintSign].[PrintSignCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[EDI].[PrintSign].[IsActive] = CASE WHEN @IsActive IS NULL THEN [EDI].[PrintSign].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[PrintSign].[PrintSignID], [PrintSign].[PrintSignCode], [PrintSign].[PrintSignName], [PrintSign].[IsActive]
	FROM
		[PrintSign] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [PrintSign].[PrintSignID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [EDI].[usp_GetBySearch_PrintSign] @SearchName  = '45'
	-- EXEC [EDI].[usp_GetBySearch_PrintSign] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_AuthorizationInformationQualifier]    Script Date: 04/09/2013 09:25:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_AuthorizationInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_AuthorizationInformationQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_AuthorizationInformationQualifier]    Script Date: 04/09/2013 09:25:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Transaction].[usp_GetBySearch_AuthorizationInformationQualifier]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'AuthorizationInformationQualifierName' AND @OrderByDirection = 'A' THEN [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] END ASC,
				CASE WHEN @orderByField = 'AuthorizationInformationQualifierName' AND @orderByDirection = 'D' THEN [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] END DESC,
				
				CASE WHEN @OrderByField = 'AuthorizationInformationQualifierCode' AND @OrderByDirection = 'A' THEN [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] END ASC,
				CASE WHEN @orderByField = 'AuthorizationInformationQualifierCode' AND @orderByDirection = 'D' THEN [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[AuthorizationInformationQualifier].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[AuthorizationInformationQualifier].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[AuthorizationInformationQualifier]
	WHERE
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[AuthorizationInformationQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[AuthorizationInformationQualifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID], [AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode], [AuthorizationInformationQualifier].[AuthorizationInformationQualifierName], [AuthorizationInformationQualifier].[IsActive]
	FROM
		[AuthorizationInformationQualifier] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [AuthorizationInformationQualifier].[AuthorizationInformationQualifierID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_AuthorizationInformationQualifier] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_AuthorizationInformationQualifier] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_SecurityInformationQualifier]    Script Date: 04/09/2013 09:25:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_SecurityInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_SecurityInformationQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_SecurityInformationQualifier]    Script Date: 04/09/2013 09:25:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Transaction].[usp_GetBySearch_SecurityInformationQualifier]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'SecurityInformationQualifierName' AND @OrderByDirection = 'A' THEN [Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] END ASC,
				CASE WHEN @orderByField = 'SecurityInformationQualifierName' AND @orderByDirection = 'D' THEN [Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] END DESC,
				
				CASE WHEN @OrderByField = 'SecurityInformationQualifierCode' AND @OrderByDirection = 'A' THEN [Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] END ASC,
				CASE WHEN @orderByField = 'SecurityInformationQualifierCode' AND @orderByDirection = 'D' THEN [Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[SecurityInformationQualifier].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[SecurityInformationQualifier].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[SecurityInformationQualifier]
	WHERE
		[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[SecurityInformationQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[SecurityInformationQualifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[SecurityInformationQualifier].[SecurityInformationQualifierID], [SecurityInformationQualifier].[SecurityInformationQualifierCode], [SecurityInformationQualifier].[SecurityInformationQualifierName], [SecurityInformationQualifier].[IsActive]
	FROM
		[SecurityInformationQualifier] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [SecurityInformationQualifier].[SecurityInformationQualifierID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_SecurityInformationQualifier] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_SecurityInformationQualifier] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_TransactionSetPurposeCode]    Script Date: 04/09/2013 09:25:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_TransactionSetPurposeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_TransactionSetPurposeCode]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_TransactionSetPurposeCode]    Script Date: 04/09/2013 09:25:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Transaction].[usp_GetBySearch_TransactionSetPurposeCode]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'TransactionSetPurposeCodeName' AND @OrderByDirection = 'A' THEN [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] END ASC,
				CASE WHEN @orderByField = 'TransactionSetPurposeCodeName' AND @orderByDirection = 'D' THEN [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] END DESC,
				
				CASE WHEN @OrderByField = 'TransactionSetPurposeCodeCode' AND @OrderByDirection = 'A' THEN [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] END ASC,
				CASE WHEN @orderByField = 'TransactionSetPurposeCodeCode' AND @orderByDirection = 'D' THEN [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[TransactionSetPurposeCode].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[TransactionSetPurposeCode].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[TransactionSetPurposeCode]
	WHERE
		[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[TransactionSetPurposeCode].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[TransactionSetPurposeCode].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[TransactionSetPurposeCode].[TransactionSetPurposeCodeID], [TransactionSetPurposeCode].[TransactionSetPurposeCodeCode], [TransactionSetPurposeCode].[TransactionSetPurposeCodeName], [TransactionSetPurposeCode].[IsActive]
	FROM
		[TransactionSetPurposeCode] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [TransactionSetPurposeCode].[TransactionSetPurposeCodeID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_TransactionSetPurposeCode] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_TransactionSetPurposeCode] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_TransactionTypeCode]    Script Date: 04/09/2013 09:26:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_TransactionTypeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_TransactionTypeCode]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_TransactionTypeCode]    Script Date: 04/09/2013 09:26:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Transaction].[usp_GetBySearch_TransactionTypeCode]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[TransactionTypeCode].[TransactionTypeCodeID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'TransactionTypeCodeName' AND @OrderByDirection = 'A' THEN [Transaction].[TransactionTypeCode].[TransactionTypeCodeName] END ASC,
				CASE WHEN @orderByField = 'TransactionTypeCodeName' AND @orderByDirection = 'D' THEN [Transaction].[TransactionTypeCode].[TransactionTypeCodeName] END DESC,
				
				CASE WHEN @OrderByField = 'TransactionTypeCodeCode' AND @OrderByDirection = 'A' THEN [Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] END ASC,
				CASE WHEN @orderByField = 'TransactionTypeCodeCode' AND @orderByDirection = 'D' THEN [Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[TransactionTypeCode].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[TransactionTypeCode].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[TransactionTypeCode]
	WHERE
		[Transaction].[TransactionTypeCode].[TransactionTypeCodeName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[TransactionTypeCode].[TransactionTypeCodeName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[TransactionTypeCode].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[TransactionTypeCode].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[TransactionTypeCode].[TransactionTypeCodeID], [TransactionTypeCode].[TransactionTypeCodeCode], [TransactionTypeCode].[TransactionTypeCodeName], [TransactionTypeCode].[IsActive]
	FROM
		[TransactionTypeCode] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [TransactionTypeCode].[TransactionTypeCodeID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_TransactionTypeCode] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_TransactionTypeCode] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT]    Script Date: 05/27/2013 16:20:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT]    Script Date: 05/27/2013 16:20:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT]
	@PatientVisitID	BIGINT 
	, @DescType NVARCHAR(15) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @PRIMARY_DIAGNOSIS_ID BIGINT;
				
	DECLARE @DIAGNOSIS_ID BIGINT;
	DECLARE @CLAIM_NUMBER BIGINT;
	
	SELECT 
		@PRIMARY_DIAGNOSIS_ID = [Claim].[ClaimDiagnosis].[DiagnosisID]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Claim].[ClaimDiagnosis]
	ON
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
	WHERE
		[Patient].[PatientVisit].[PrimaryClaimDiagnosisID] IS NOT NULL
	AND
		[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
	AND 
		[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
	IF @PRIMARY_DIAGNOSIS_ID IS NOT NULL AND @PRIMARY_DIAGNOSIS_ID > 0
	BEGIN
		DECLARE @DIAG_COUNT INT;
		
		SELECT 
			@DIAG_COUNT = COUNT([Claim].[ClaimDiagnosis].[DiagnosisID]) 
		FROM 
			[Claim].[ClaimDiagnosis] 
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND
			 [Claim].[ClaimDiagnosis].[DiagnosisID] <> @PRIMARY_DIAGNOSIS_ID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
		IF @DIAG_COUNT = 0
		BEGIN
			SELECT @PRIMARY_DIAGNOSIS_ID = 0;
		END
	END
		
	DECLARE @TBL_DIAG TABLE
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [DIAGNOSIS_ID] BIGINT NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
	);
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
		, [DX_NAME_CODE] NVARCHAR(900) NOT NULL
		, [DX_CODE] NVARCHAR(9) NOT NULL
		, [CLAIM_DIAGNOSIS_CPT_ID] BIGINT NULL
		, [CPT_NAME_CODE] NVARCHAR(400) NULL
		, [CPT_CODE] NVARCHAR(9) NULL
		, [FACILITY_TYPE_NAME_CODE] NVARCHAR(400) NULL
		, [FACILITY_TYPE_CODE] NVARCHAR(9) NULL
		, [UNIT] INT NULL
		, [CHARGE_PER_UNIT] DECIMAL(9,2) NULL
		, [CPT_DOS] DATE NULL
		, [MODI1_NAME_CODE] NVARCHAR(165) NULL
		, [MODI1_CODE] NVARCHAR(9) NULL
		, [MODI2_NAME_CODE] NVARCHAR(165) NULL
		, [MODI2_CODE] NVARCHAR(9) NULL
		, [MODI3_NAME_CODE] NVARCHAR(165) NULL
		, [MODI3_CODE] NVARCHAR(9) NULL
		, [MODI4_NAME_CODE] NVARCHAR(165) NULL
		, [MODI4_CODE] NVARCHAR(9) NULL
	);
	
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc'))
	BEGIN
		SELECT @DescType = 'ShortDesc';
	END
		
	IF @PRIMARY_DIAGNOSIS_ID IS NULL OR @PRIMARY_DIAGNOSIS_ID = 0
	BEGIN
		INSERT INTO
			@TBL_DIAG
		SELECT
			[Claim].[ClaimDiagnosis].[DiagnosisID]
			, [Claim].[ClaimDiagnosis].[ClaimNumber] 
		FROM 
			[Claim].[ClaimDiagnosis]
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1
		ORDER BY
			[Claim].[ClaimDiagnosis].[ClaimNumber]
		ASC
			, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
		ASC;
	END
	ELSE
	BEGIN
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[Claim].[ClaimDiagnosis].[DiagnosisID]
				, [Claim].[ClaimDiagnosis].[ClaimNumber] 
			FROM 
				[Claim].[ClaimDiagnosis]
			WHERE 
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] != @PRIMARY_DIAGNOSIS_ID
			AND 
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
		DECLARE @CLAIM_NUMBER_PREV BIGINT;
		
		SELECT @CLAIM_NUMBER_PREV = -1;
				
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @CLAIM_NUMBER_PREV != @CLAIM_NUMBER
			BEGIN
				INSERT INTO
					@TBL_DIAG
				SELECT
					@PRIMARY_DIAGNOSIS_ID
					, @CLAIM_NUMBER;
					
				SELECT @CLAIM_NUMBER_PREV = @CLAIM_NUMBER;
			END
			
			INSERT INTO
				@TBL_DIAG
			SELECT
				@DIAGNOSIS_ID
				, @CLAIM_NUMBER;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
    
    IF @DescType = 'ShortDesc'		-- ShortDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
			, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			LEFT JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			LEFT JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			LEFT JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			AND
				[Billing].[FacilityType].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'MediumDesc'		-- MediumDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
				, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS[CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode]AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			LEFT JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			LEFT JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			LEFT JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			AND
				[Billing].[FacilityType].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'LongDesc'		-- LongDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
				, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			LEFT JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			LEFT JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			LEFT JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			AND
				[Billing].[FacilityType].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'CustomDesc'		-- CustomDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
				, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			LEFT JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			LEFT JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			LEFT JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			AND
				[Billing].[FacilityType].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	
	-- MODIFIERS
	
	DECLARE CUR_TBL CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [CLAIM_DIAGNOSIS_CPT_ID] FROM @TBL_ANS;
	DECLARE @CLAIM_DIAGNOSIS_CPT_ID BIGINT;
	
	OPEN CUR_TBL;
	
	FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @MODIFIER_NAME NVARCHAR(165);
		DECLARE @MODIFIER_CODE NVARCHAR(9);
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI1_NAME_CODE] = @MODIFIER_NAME
			, [MODI1_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 2
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI2_NAME_CODE] = @MODIFIER_NAME
			, [MODI2_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 3
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI3_NAME_CODE] = @MODIFIER_NAME
			, [MODI3_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 4
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI4_NAME_CODE] = @MODIFIER_NAME
			, [MODI4_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
	
		FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	END
	
	CLOSE CUR_TBL;
	DEALLOCATE CUR_TBL;
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;
	
	-- EXEC [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT] @PatientVisitID = 4333
	-- EXEC [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'ShortDesc'
	-- EXEC [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'MediumDesc'
	-- EXEC [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'LongDesc'
	-- EXEC [Claim].[usp_GetByPatientVisit_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'CustomDesc'
END



GO

-----------------------------------------------------------------------

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Insurance].[usp_GetBySearch_Relationship]    Script Date: 04/09/2013 13:36:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetBySearch_Relationship]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetBySearch_Relationship]
GO

/****** Object:  StoredProcedure [Insurance].[usp_GetBySearch_Relationship]    Script Date: 04/09/2013 13:36:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Insurance].[usp_GetBySearch_Relationship]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Insurance].[Relationship].[RelationshipID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'RelationshipName' AND @OrderByDirection = 'A' THEN [Insurance].[Relationship].[RelationshipName] END ASC,
				CASE WHEN @orderByField = 'RelationshipName' AND @orderByDirection = 'D' THEN [Insurance].[Relationship].[RelationshipName] END DESC,
				
				CASE WHEN @OrderByField = 'RelationshipCode' AND @OrderByDirection = 'A' THEN [Insurance].[Relationship].[RelationshipCode] END ASC,
				CASE WHEN @orderByField = 'RelationshipCode' AND @orderByDirection = 'D' THEN [Insurance].[Relationship].[RelationshipCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Insurance].[Relationship].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Insurance].[Relationship].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Insurance].[Relationship]
	WHERE
		[Insurance].[Relationship].[RelationshipName] LIKE @StartBy + '%' 
	AND
	(
		[Insurance].[Relationship].[RelationshipName] LIKE '%' + @SearchName + '%' 
	OR
		[Insurance].[Relationship].[RelationshipCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Insurance].[Relationship].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Insurance].[Relationship].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Relationship].[RelationshipID], [Relationship].[RelationshipCode], [Relationship].[RelationshipName], [Relationship].[IsActive]
	FROM
		[Relationship] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Relationship].[RelationshipID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Insurance].[usp_GetBySearch_Relationship] @SearchName  = '45'
	-- EXEC [Insurance].[usp_GetBySearch_Relationship] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_FacilityType]    Script Date: 04/09/2013 17:46:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearch_FacilityType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearch_FacilityType]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_FacilityType]    Script Date: 04/09/2013 17:46:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Billing].[usp_GetBySearch_FacilityType]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[FacilityType].[FacilityTypeID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'FacilityTypeName' AND @OrderByDirection = 'A' THEN [Billing].[FacilityType].[FacilityTypeName] END ASC,
				CASE WHEN @orderByField = 'FacilityTypeName' AND @orderByDirection = 'D' THEN [Billing].[FacilityType].[FacilityTypeName] END DESC,
				
				CASE WHEN @OrderByField = 'FacilityTypeCode' AND @OrderByDirection = 'A' THEN [Billing].[FacilityType].[FacilityTypeCode] END ASC,
				CASE WHEN @orderByField = 'FacilityTypeCode' AND @orderByDirection = 'D' THEN [Billing].[FacilityType].[FacilityTypeCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[FacilityType].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[FacilityType].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Billing].[FacilityType]
	WHERE
		[Billing].[FacilityType].[FacilityTypeName] LIKE @StartBy + '%' 
	AND
	(
		[Billing].[FacilityType].[FacilityTypeName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[FacilityType].[FacilityTypeCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Billing].[FacilityType].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[FacilityType].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[FacilityType].[FacilityTypeID], [FacilityType].[FacilityTypeCode], [FacilityType].[FacilityTypeName], [FacilityType].[IsActive]
	FROM
		[FacilityType] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [FacilityType].[FacilityTypeID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_FacilityType] @SearchName  = '45'
	-- EXEC [Billing].[usp_GetBySearch_FacilityType] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_EDIReceiver]    Script Date: 05/17/2013 14:19:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetBySearch_EDIReceiver]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetBySearch_EDIReceiver]
GO


/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_EDIReceiver]    Script Date: 05/17/2013 14:19:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [EDI].[usp_GetBySearch_EDIReceiver]	
	@OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[EDI].[EDIReceiver].[EDIReceiverID]
		, ROW_NUMBER() OVER (
			ORDER BY						
				CASE WHEN @OrderByField = 'EDIReceiverCode' AND @OrderByDirection = 'A' THEN [EDI].[EDIReceiver].[EDIReceiverCode] END ASC,
				CASE WHEN @orderByField = 'EDIReceiverCode' AND @orderByDirection = 'D' THEN [EDI].[EDIReceiver].[EDIReceiverCode] END DESC,
				
				CASE WHEN @OrderByField = 'AuthQual' AND @OrderByDirection = 'A' THEN ([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') END ASC,
				CASE WHEN @orderByField = 'AuthQual' AND @orderByDirection = 'D' THEN ([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') END DESC,
				
				CASE WHEN @OrderByField = 'ApplicationReceiverCode' AND @OrderByDirection = 'A' THEN [EDI].[EDIReceiver].[ApplicationReceiverCode] END ASC,
				CASE WHEN @orderByField = 'ApplicationReceiverCode' AND @orderByDirection = 'D' THEN [EDI].[EDIReceiver].[ApplicationReceiverCode] END DESC,
				
				CASE WHEN @OrderByField = 'ApplicationSenderCode' AND @OrderByDirection = 'A' THEN [EDI].[EDIReceiver].[ApplicationSenderCode] END ASC,
				CASE WHEN @orderByField = 'ApplicationSenderCode' AND @orderByDirection = 'D' THEN [EDI].[EDIReceiver].[ApplicationSenderCode] END DESC,
				
				--CASE WHEN @OrderByField = 'ReceiverID' AND @OrderByDirection = 'A' THEN [EDI].[EDIReceiver].[ReceiverID] END ASC,
				--CASE WHEN @orderByField = 'ReceiverID' AND @orderByDirection = 'D' THEN [EDI].[EDIReceiver].[ReceiverID] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [EDI].[EDIReceiver].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [EDI].[EDIReceiver].[LastModifiedOn] END DESC			
			) AS ROW_NUM
FROM
		[EDI].[EDIReceiver]
		
		INNER JOIN
		
		[Transaction].[AuthorizationInformationQualifier]
		
		ON
		
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID] = [EDI].[EDIReceiver].[AuthorizationInformationQualifierID]
		
	WHERE
		[EDI].[EDIReceiver].[IsActive] = CASE WHEN @IsActive IS NULL THEN [EDI].[EDIReceiver].[IsActive] ELSE @IsActive END;
		
	DECLARE @TBL_RES TABLE
	(
		[EDIReceiverID] INT NOT NULL 
		, [EDIReceiverCode] NVARCHAR(15) NOT NULL
		, [AuthQual] NVARCHAR(150) NOT NULL 
		,[ApplicationReceiverCode] NVARCHAR(25) NOT NULL
		,[ApplicationSenderCode] NVARCHAR(25) NOT NULL
		--,[ReceiverID]  NVARCHAR(25) NOT NULL
		, [IsActive] BIT NOT NULL 
	);

	INSERT INTO
		@TBL_RES
	SELECT		
		[EDIReceiver].[EDIReceiverID]
		, [EDIReceiver].[EDIReceiverCode]
		, ([AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' + [AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') as AuthQual
		,[EDIReceiver].[ApplicationReceiverCode]
		,[EDIReceiver].[ApplicationSenderCode]
		--,[EDIReceiver].[ReceiverID]
		, [EDIReceiver].[IsActive]
	FROM
		[EDIReceiver] WITH (NOLOCK)
		
		INNER JOIN
		
		[Transaction].[AuthorizationInformationQualifier]
		
		ON
		
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID] = [EDI].[EDIReceiver].[AuthorizationInformationQualifierID]
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [EDIReceiver].[EDIReceiverID]
	
		
	ORDER BY
		[ID]
	ASC;
	
	
	SELECT * FROM @TBL_RES;

	-- EXEC [EDI].[usp_GetBySearch_EDIReceiver]
	-- EXEC [EDI].[usp_GetBySearch_EDIReceiver] @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_ClaimMedia]    Script Date: 04/10/2013 10:31:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_ClaimMedia]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_ClaimMedia]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_ClaimMedia]    Script Date: 04/10/2013 10:31:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_ClaimMedia] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[ClaimMedia].[ClaimMediaName] + ' [' +[Transaction].[ClaimMedia].[ClaimMediaCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[ClaimMedia]
		WHERE
			[Transaction].[ClaimMedia].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[ClaimMedia].[ClaimMediaName] + ' [' +[Transaction].[ClaimMedia].[ClaimMediaCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[ClaimMedia]
		WHERE
			([Transaction].[ClaimMedia].[ClaimMediaName] + ' [' +[Transaction].[ClaimMedia].[ClaimMediaCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[ClaimMedia].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[ClaimMedia].[ClaimMediaName] + ' [' +[Transaction].[ClaimMedia].[ClaimMediaCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[ClaimMedia]
			WHERE
				[Transaction].[ClaimMedia].[ClaimMediaCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[ClaimMedia].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[ClaimMedia].[ClaimMediaName] + ' [' +[Transaction].[ClaimMedia].[ClaimMediaCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[ClaimMedia]
			WHERE
				([Transaction].[ClaimMedia].[ClaimMediaName] + ' [' +[Transaction].[ClaimMedia].[ClaimMediaCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[ClaimMedia].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Transaction].[usp_GetAutoComplete_ClaimMedia] 'I'
	---- EXEC [Transaction].[usp_GetAutoComplete_ClaimMedia] '00'
	
	
	
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_ClaimMedia]    Script Date: 06/12/2013 18:27:58 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_ClaimMedia]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_ClaimMedia]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_ClaimMedia]    Script Date: 06/12/2013 18:27:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_ClaimMedia] 
	@ClaimMediaCode	NVARCHAR(15)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [ClaimMediaID] TINYINT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[ClaimMedia].[ClaimMediaID]
	FROM
		[Transaction].[ClaimMedia]
	WHERE
		@ClaimMediaCode = [Transaction].[ClaimMedia].[ClaimMediaCode]
	AND
		[Transaction].[ClaimMedia].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_ClaimMedia] '00'
	
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_IPA]    Script Date: 04/10/2013 12:04:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearch_IPA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearch_IPA]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_IPA]    Script Date: 04/10/2013 12:04:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Billing].[usp_GetBySearch_IPA]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[IPA].[IPAID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'IPAName' AND @OrderByDirection = 'A' THEN [Billing].[IPA].[IPAName] END ASC,
				CASE WHEN @orderByField = 'IPAName' AND @orderByDirection = 'D' THEN [Billing].[IPA].[IPAName] END DESC,
				
				CASE WHEN @OrderByField = 'IPACode' AND @OrderByDirection = 'A' THEN [Billing].[IPA].[IPACode] END ASC,
				CASE WHEN @orderByField = 'IPACode' AND @orderByDirection = 'D' THEN [Billing].[IPA].[IPACode] END DESC,
				
			    CASE WHEN @OrderByField = 'NPI' AND @OrderByDirection = 'A' THEN [Billing].[IPA].[NPI] END ASC,
				CASE WHEN @orderByField = 'NPI' AND @orderByDirection = 'D' THEN [Billing].[IPA].[NPI] END DESC,
				
				CASE WHEN @OrderByField = 'EntityTypeQualifierName' AND @OrderByDirection = 'A' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] END ASC,
				CASE WHEN @orderByField = 'EntityTypeQualifierName' AND @orderByDirection = 'D' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[IPA].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[IPA].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Billing].[IPA]
		
		INNER JOIN
		
		[Transaction].[EntityTypeQualifier]
		
		ON
		
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierID] = [Billing].[IPA].[EntityTypeQualifierID]
		
		
	WHERE
		[Billing].[IPA].[IPAName] LIKE @StartBy + '%' 
	AND
	(
		[Billing].[IPA].[IPAName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[IPA].[IPACode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Billing].[IPA].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[IPA].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[IPA].[IPAID], [IPA].[IPACode], [IPA].[IPAName],[IPA].[NPI],[EntityTypeQualifier].[EntityTypeQualifierName] ,[IPA].[IsActive]
	FROM
		[IPA] WITH (NOLOCK)
		INNER JOIN
		
		[Transaction].[EntityTypeQualifier]
		
		ON
		
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierID] = [Billing].[IPA].[EntityTypeQualifierID]
		
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [IPA].[IPAID]
		
		
		
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_IPA] @SearchName  = '45'
	-- EXEC [Billing].[usp_GetBySearch_IPA] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetById_IPA]    Script Date: 05/20/2013 10:29:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetById_IPA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetById_IPA]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetById_IPA]    Script Date: 05/20/2013 10:29:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetById_IPA] 
	@IPAID	INT
	, @IsActive	BIT = NULL
AS
BEGIN

	SET NOCOUNT ON;

	SELECT
	[Billing].[IPA].[IPACode]
      ,[Billing].[IPA].[IPAName]
      ,[Billing].[IPA].[NPI]
      ,[Billing].[IPA].[TaxID]
      ,[Transaction].[EntityTypeQualifier].[EntityTypeQualifierName]
      ,[Billing].[IPA].[LogoRelPath]
      ,[Billing].[IPA].[StreetName]
      ,[Billing].[IPA].[Suite]
      ,[MasterData].[City].[CityName]
      ,[MasterData].[City].[ZipCode]
      ,[MasterData].[State].[StateName]
      ,[MasterData].[State].[StateCode]
      ,[MasterData].[County].[CountyName]
      ,[MasterData].[County].[CountyCode]
      ,[MasterData].[Country].[CountryName]
      ,[MasterData].[Country].[CountryCode]
      ,[Billing].[IPA].[PhoneNumber]
      ,[Billing].[IPA].[PhoneNumberExtn]
      ,[Billing].[IPA].[SecondaryPhoneNumber]
      ,[Billing].[IPA].[SecondaryPhoneNumberExtn]
      ,[Billing].[IPA].[Email]
      ,[Billing].[IPA].[SecondaryEmail]
      ,[Billing].[IPA].[Fax]
      ,[Billing].[IPA].[ContactPersonLastName]
      ,[Billing].[IPA].[ContactPersonMiddleName]
      ,[Billing].[IPA].[ContactPersonFirstName]
      ,[Billing].[IPA].[ContactPersonPhoneNumber]
      ,[Billing].[IPA].[ContactPersonPhoneNumberExtn]
      ,[Billing].[IPA].[ContactPersonSecondaryPhoneNumber]
      ,[Billing].[IPA].[ContactPersonSecondaryPhoneNumberExtn]
      ,[Billing].[IPA].[ContactPersonEmail]
      ,[Billing].[IPA].[ContactPersonSecondaryEmail]
      ,[Billing].[IPA].[ContactPersonFax]
	FROM
		[Billing].[IPA]
	 INNER JOIN
	 [MasterData].[City]
	 
	 ON
	 [Billing].[IPA].[CityID]=[MasterData].[City].[CityID]
	 
	  INNER JOIN
	 [Transaction].[EntityTypeQualifier]
	 
	 ON
	 [Billing].[IPA].[EntityTypeQualifierID]=[Transaction].[EntityTypeQualifier].[EntityTypeQualifierID]
	  INNER JOIN
	 [MasterData].[State]
	 
	 ON
	 [Billing].[IPA].[StateID]=[MasterData].[State].[StateID]
	  INNER JOIN
	 [MasterData].[County]
	 
	 ON
	 [Billing].[IPA].[CountyID]=[MasterData].[County].[CountyID]
	 
	  INNER JOIN
	 [MasterData].[Country]
	 
	 ON
	 [Billing].[IPA].[CountryID]=[MasterData].[Country].[CountryID]
		
	WHERE
		@IPAID = [Billing].[IPA].[IPAID]
	AND
		[Billing].[IPA].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[IPA].[IsActive] ELSE @IsActive END;

	-- EXEC [Billing].[usp_GetById_IPA] 21, NULL
	-- EXEC [Billing].[usp_GetByPkId_IPA] 1, 1
	-- EXEC [Billing].[usp_GetByPkId_IPA] 1, 0
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier]    Script Date: 04/18/2013 14:50:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier]
GO

/****** Object:  StoredProcedure [Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier]    Script Date: 04/18/2013 14:50:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select the particular record

CREATE PROCEDURE [Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier] 
	@ClaimDiagnosisCPTID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Claim].[ClaimDiagnosisCPTModifier].*
	FROM
		[Claim].[ClaimDiagnosisCPTModifier]
	WHERE
		@ClaimDiagnosisCPTID = [Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID]
	AND
		[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPTModifier].[IsActive] ELSE @IsActive END;

	-- EXEC [Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier] 8, NULL
	-- EXEC [Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier] 1, 1
	-- EXEC [Claim].[usp_GetByClaimDxCPT_ClaimDiagnosisCPTModifier] 1, 0
END



GO




-----------------------------------------------------------------------

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_ClaimStatus]    Script Date: 04/10/2013 16:27:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MasterData].[usp_GetBySearch_ClaimStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MasterData].[usp_GetBySearch_ClaimStatus]
GO

/****** Object:  StoredProcedure [MasterData].[usp_GetBySearch_ClaimStatus]    Script Date: 04/10/2013 16:27:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [MasterData].[usp_GetBySearch_ClaimStatus]
@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[MasterData].[ClaimStatus].[ClaimStatusID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'ClaimStatusName' AND @OrderByDirection = 'A' THEN [MasterData].[ClaimStatus].[ClaimStatusName] END ASC,
				CASE WHEN @orderByField = 'ClaimStatusName' AND @orderByDirection = 'D' THEN [MasterData].[ClaimStatus].[ClaimStatusName] END DESC,
				
			    CASE WHEN @OrderByField = 'ClaimStatusCode' AND @OrderByDirection = 'A' THEN [MasterData].[ClaimStatus].[ClaimStatusCode] END ASC,
				CASE WHEN @orderByField = 'ClaimStatusCode' AND @orderByDirection = 'D' THEN [MasterData].[ClaimStatus].[ClaimStatusCode] END DESC,
				
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [MasterData].[ClaimStatus].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [MasterData].[ClaimStatus].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[MasterData].[ClaimStatus]
	WHERE
		[MasterData].[ClaimStatus].[ClaimStatusName] LIKE @StartBy + '%' 
	AND
	
		[MasterData].[ClaimStatus].[ClaimStatusName] LIKE '%' + @SearchName + '%' 
	
	AND
		[MasterData].[ClaimStatus].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[ClaimStatus].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[ClaimStatus].[ClaimStatusID], [ClaimStatus].[ClaimStatusName],[ClaimStatus].[ClaimStatusCode],[ClaimStatus].[IsActive]
	FROM
		[ClaimStatus] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [ClaimStatus].[ClaimStatusID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [MasterData].[usp_GetBySearch_ClaimStatus] @SearchName  = '45'
	-- EXEC [MasterData].[usp_GetBySearch_ClaimStatus] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetByPatientID_EDIReceiver]    Script Date: 04/12/2013 09:57:16 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetByPatientID_EDIReceiver]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetByPatientID_EDIReceiver]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetByPatientID_EDIReceiver]    Script Date: 04/12/2013 09:57:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [EDI].[usp_GetByPatientID_EDIReceiver]
	@PatientID	BIGINT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		[EDI].[EDIReceiver].*
	FROM
		[EDI].[EDIReceiver]
	INNER JOIN
		[Insurance].[Insurance]
	ON
		[Insurance].[Insurance].[EDIReceiverID]=[EDI].[EDIReceiver].[EDIReceiverID]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Patient].[Patient].[InsuranceID] = [Insurance].[Insurance].[InsuranceID]
	WHERE
		 [Patient].[Patient].[PatientID] = @PatientID
	
	-- EXEC [EDI].[usp_GetByPatientID_EDIReceiver] @PatientID = 1
END





GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:23:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetNameByID_InterchangeUsageIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetNameByID_InterchangeUsageIndicator]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:23:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetNameByID_InterchangeUsageIndicator] 
	@InterchangeUsageIndicatorID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		([Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] + ' [' +[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] + ']') AS [NAME_CODE]
	FROM
		[Transaction].[InterchangeUsageIndicator]
	WHERE
		@InterchangeUsageIndicatorID = [Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorID]
	AND
		[Transaction].[InterchangeUsageIndicator].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[InterchangeUsageIndicator].[IsActive] ELSE @IsActive END;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetNameByID_InterchangeUsageIndicator] 1, NULL
	
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_AuthorizationInformationQualifier]    Script Date: 04/12/2013 09:58:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetNameByID_AuthorizationInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetNameByID_AuthorizationInformationQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_AuthorizationInformationQualifier]    Script Date: 04/12/2013 09:58:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [Transaction].[usp_GetNameByID_AuthorizationInformationQualifier] 
	@AuthorizationInformationQualifierID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID]
		,[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName]+ ' [' + [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']' AS [NAME_CODE]	
	FROM
		[Transaction].[AuthorizationInformationQualifier]
	WHERE
		@AuthorizationInformationQualifierID = [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID]
	AND
		[Transaction].[AuthorizationInformationQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[AuthorizationInformationQualifier].[IsActive] ELSE @IsActive END;

	-- EXEC [Transaction].[usp_GetNameByID_AuthorizationInformationQualifier] 1, NULL
	-- EXEC [Transaction].[usp_GetNameByID_AuthorizationInformationQualifier] 1, 1
	-- EXEC [Transaction].[usp_GetNameByID_AuthorizationInformationQualifier] 1, 0
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_SecurityInformationQualifier]    Script Date: 04/12/2013 09:58:41 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetNameByID_SecurityInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetNameByID_SecurityInformationQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_SecurityInformationQualifier]    Script Date: 04/12/2013 09:58:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [Transaction].[usp_GetNameByID_SecurityInformationQualifier] 
	@SecurityInformationQualifierID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierID]
		,[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName]+ ' [' + [Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] + ']' AS [NAME_CODE]	
	FROM
		[Transaction].[SecurityInformationQualifier]
	WHERE
		@SecurityInformationQualifierID = [Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierID]
	AND
		[Transaction].[SecurityInformationQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[SecurityInformationQualifier].[IsActive] ELSE @IsActive END;

	-- EXEC [Transaction].[usp_GetNameByID_SecurityInformationQualifier] 1, NULL
	-- EXEC [Transaction].[usp_GetNameByID_SecurityInformationQualifier] 1, 1
	-- EXEC [Transaction].[usp_GetNameByID_SecurityInformationQualifier] 1, 0
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_TransactionSetPurposeCode]    Script Date: 04/12/2013 09:59:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetNameByID_TransactionSetPurposeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetNameByID_TransactionSetPurposeCode]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_TransactionSetPurposeCode]    Script Date: 04/12/2013 09:59:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [Transaction].[usp_GetNameByID_TransactionSetPurposeCode] 
	@TransactionSetPurposeCodeID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeID]
		,[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName]+ ' [' + [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] + ']' AS [NAME_CODE]	
	FROM
		[Transaction].[TransactionSetPurposeCode]
	WHERE
		@TransactionSetPurposeCodeID = [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeID]
	AND
		[Transaction].[TransactionSetPurposeCode].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[TransactionSetPurposeCode].[IsActive] ELSE @IsActive END;

	-- EXEC [Transaction].[usp_GetNameByID_TransactionSetPurposeCode] 1, NULL
	-- EXEC [Transaction].[usp_GetNameByID_TransactionSetPurposeCode] 1, 1
	-- EXEC [Transaction].[usp_GetNameByID_TransactionSetPurposeCode] 1, 0
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_TransactionTypeCode]    Script Date: 04/12/2013 10:03:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetNameByID_TransactionTypeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetNameByID_TransactionTypeCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetNameByID_TransactionTypeCode]    Script Date: 04/12/2013 10:03:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [Transaction].[usp_GetNameByID_TransactionTypeCode] 
	@TransactionTypeCodeID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[Transaction].[TransactionTypeCode].[TransactionTypeCodeID]
		,[Transaction].[TransactionTypeCode].[TransactionTypeCodeName]+ ' [' + [Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] + ']' AS [NAME_CODE]	
	FROM
		[Transaction].[TransactionTypeCode]
	WHERE
		@TransactionTypeCodeID = [Transaction].[TransactionTypeCode].[TransactionTypeCodeID]
	AND
		[Transaction].[TransactionTypeCode].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[TransactionTypeCode].[IsActive] ELSE @IsActive END;

	-- EXEC [Transaction].[usp_GetNameByID_TransactionTypeCode] 1, NULL
	-- EXEC [Transaction].[usp_GetNameByID_TransactionTypeCode] 1, 1
	-- EXEC [Transaction].[usp_GetNameByID_TransactionTypeCode] 1, 0
END




GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_TransactionSetPurposeCode]    Script Date: 04/12/2013 14:48:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_TransactionSetPurposeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_TransactionSetPurposeCode]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_TransactionSetPurposeCode]    Script Date: 04/12/2013 14:48:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_TransactionSetPurposeCode] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] + ' [' +[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[TransactionSetPurposeCode]
		WHERE
			[Transaction].[TransactionSetPurposeCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] + ' [' +[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[TransactionSetPurposeCode]
		WHERE
			([Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] + ' [' +[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[TransactionSetPurposeCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] + ' [' +[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[TransactionSetPurposeCode]
			WHERE
				[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[TransactionSetPurposeCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] + ' [' +[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[TransactionSetPurposeCode]
			WHERE
				([Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeName] + ' [' +[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[TransactionSetPurposeCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_TransactionSetPurposeCode] ' '
	-- EXEC [Transaction].[usp_GetAutoComplete_TransactionSetPurposeCode] 'I'
END

GO

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:17:57 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_InterchangeUsageIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_InterchangeUsageIndicator]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:17:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_InterchangeUsageIndicator] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] + ' [' +[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[InterchangeUsageIndicator]
		WHERE
			[Transaction].[InterchangeUsageIndicator].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] + ' [' +[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[InterchangeUsageIndicator]
		WHERE
			([Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] + ' [' +[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[InterchangeUsageIndicator].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] + ' [' +[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[InterchangeUsageIndicator]
			WHERE
				[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[InterchangeUsageIndicator].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] + ' [' +[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[InterchangeUsageIndicator]
			WHERE
				([Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorName] + ' [' +[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[InterchangeUsageIndicator].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_InterchangeUsageIndicator] ' '
	-- EXEC [Transaction].[usp_GetAutoComplete_InterchangeUsageIndicator] 'I'
END







GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_AuthorizationInformationQualifier]    Script Date: 04/12/2013 14:51:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_AuthorizationInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_AuthorizationInformationQualifier]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_AuthorizationInformationQualifier]    Script Date: 04/12/2013 14:51:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_AuthorizationInformationQualifier] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[AuthorizationInformationQualifier]
		WHERE
			[Transaction].[AuthorizationInformationQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[AuthorizationInformationQualifier]
		WHERE
			([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[AuthorizationInformationQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[AuthorizationInformationQualifier]
			WHERE
				[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[AuthorizationInformationQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[AuthorizationInformationQualifier]
			WHERE
				([Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierName] + ' [' +[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[AuthorizationInformationQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_AuthorizationInformationQualifier] ' '
	-- EXEC [Transaction].[usp_GetAutoComplete_AuthorizationInformationQualifier] 'I'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier]    Script Date: 04/12/2013 15:08:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier]    Script Date: 04/12/2013 15:08:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier] 
	@SecurityInformationQualifierCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [SecurityInformationQualifier_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierID]
	FROM
		[Transaction].[SecurityInformationQualifier]
	WHERE
		@SecurityInformationQualifierCode = [Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode]
	AND
		[Transaction].[SecurityInformationQualifier].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier] 1, NULL
	-- EXEC [Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier] 1, 1
	-- EXEC [Transaction].[usp_GetIDAutoComplete_SecurityInformationQualifier] 1, 0
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode]    Script Date: 04/12/2013 15:08:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode]    Script Date: 04/12/2013 15:08:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode] 
	@TransactionSetPurposeCodeCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [TransactionSetPurposeCode_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeID]
	FROM
		[Transaction].[TransactionSetPurposeCode]
	WHERE
		@TransactionSetPurposeCodeCode = [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode]
	AND
		[Transaction].[TransactionSetPurposeCode].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode] 1, NULL
	-- EXEC [Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode] 1, 1
	-- EXEC [Transaction].[usp_GetIDAutoComplete_TransactionSetPurposeCode] 1, 0
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_TransactionTypeCode]    Script Date: 04/12/2013 15:10:32 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_TransactionTypeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_TransactionTypeCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_TransactionTypeCode]    Script Date: 04/12/2013 15:10:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_TransactionTypeCode] 
	@TransactionTypeCodeCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [TransactionTypeCode_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[TransactionTypeCode].[TransactionTypeCodeID]
	FROM
		[Transaction].[TransactionTypeCode]
	WHERE
		@TransactionTypeCodeCode = [Transaction].[TransactionTypeCode].[TransactionTypeCodeCode]
	AND
		[Transaction].[TransactionTypeCode].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_TransactionTypeCode] 1, NULL
	-- EXEC [Transaction].[usp_GetIDAutoComplete_TransactionTypeCode] 1, 1
	-- EXEC [Transaction].[usp_GetIDAutoComplete_TransactionTypeCode] 1, 0
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:21:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_InterchangeUsageIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_InterchangeUsageIndicator]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_InterchangeUsageIndicator]    Script Date: 04/22/2013 15:21:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_InterchangeUsageIndicator] 
	@InterchangeUsageIndicatorCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [InterchangeUsageIndicator_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorID]
	FROM
		[Transaction].[InterchangeUsageIndicator]
	WHERE
		@InterchangeUsageIndicatorCode = [Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode]
	AND
		[Transaction].[InterchangeUsageIndicator].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_InterchangeUsageIndicator] 1, NULL
	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_InterchangeUsageIndicator] 1, 1
	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_InterchangeUsageIndicator] 1, 0
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_SecurityInformationQualifier]    Script Date: 04/12/2013 15:11:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_SecurityInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_SecurityInformationQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_SecurityInformationQualifier]    Script Date: 04/12/2013 15:11:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_SecurityInformationQualifier] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] + ' [' +[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[SecurityInformationQualifier]
		WHERE
			[Transaction].[SecurityInformationQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] + ' [' +[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[SecurityInformationQualifier]
		WHERE
			([Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] + ' [' +[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[SecurityInformationQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] + ' [' +[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[SecurityInformationQualifier]
			WHERE
				[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[SecurityInformationQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] + ' [' +[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[SecurityInformationQualifier]
			WHERE
				([Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierName] + ' [' +[Transaction].[SecurityInformationQualifier].[SecurityInformationQualifierCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[SecurityInformationQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_SecurityInformationQualifier] ' '
	-- EXEC [Transaction].[usp_GetAutoComplete_SecurityInformationQualifier] 'I'
END





GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Insurance].[usp_GetAutoComplete_InsuranceType]    Script Date: 04/15/2013 15:19:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetAutoComplete_InsuranceType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetAutoComplete_InsuranceType]
GO


/****** Object:  StoredProcedure [Insurance].[usp_GetAutoComplete_InsuranceType]    Script Date: 04/15/2013 15:19:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select all records from the table

CREATE PROCEDURE [Insurance].[usp_GetAutoComplete_InsuranceType] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') AS [NAME_CODE]
		FROM
			[Insurance].[InsuranceType]
		WHERE
			[Insurance].[InsuranceType].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') AS [NAME_CODE]
		FROM
			[Insurance].[InsuranceType]
		WHERE
			([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Insurance].[InsuranceType].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') AS [NAME_CODE]
			FROM
				[Insurance].[InsuranceType]
			WHERE
				([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Insurance].[InsuranceType].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') AS [NAME_CODE]
			FROM
				[Insurance].[InsuranceType]
			WHERE
				[Insurance].[InsuranceType].[InsuranceTypeCode] LIKE @stats ESCAPE '\'
			AND
				[Insurance].[InsuranceType].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') AS [NAME_CODE]
			FROM
				[Insurance].[InsuranceType]
			WHERE
				([Insurance].[InsuranceType].[InsuranceTypeName] + ' [' +[Insurance].[InsuranceType].[InsuranceTypeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Insurance].[InsuranceType].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;
			
			
	-- EXEC [Insurance].[usp_GetAutoComplete_InsuranceType] ' '
	-- EXEC [Insurance].[usp_GetAutoComplete_InsuranceType] 'I'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Insurance].[usp_GetIDAutoComplete_InsuranceType]    Script Date: 04/15/2013 15:19:37 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Insurance].[usp_GetIDAutoComplete_InsuranceType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Insurance].[usp_GetIDAutoComplete_InsuranceType]
GO


/****** Object:  StoredProcedure [Insurance].[usp_GetIDAutoComplete_InsuranceType]    Script Date: 04/15/2013 15:19:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Insurance].[usp_GetIDAutoComplete_InsuranceType] 
	@InsuranceTypeCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [InsuranceType_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Insurance].[InsuranceType].[InsuranceTypeID]
	FROM
		[Insurance].[InsuranceType]
	WHERE
		@InsuranceTypeCode = [Insurance].[InsuranceType].[InsuranceTypeCode]
	AND
		[Insurance].[InsuranceType].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Insurance].[usp_GetByPkId_InsuranceType] 1, NULL
	-- EXEC [Insurance].[usp_GetByPkId_InsuranceType] 1, 1
	-- EXEC [Insurance].[usp_GetByPkId_InsuranceType] 1, 0
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetAutoComplete_EDIReceiver]    Script Date: 04/15/2013 15:24:34 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetAutoComplete_EDIReceiver]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetAutoComplete_EDIReceiver]
GO


/****** Object:  StoredProcedure [EDI].[usp_GetAutoComplete_EDIReceiver]    Script Date: 04/15/2013 15:24:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select all records from the table

CREATE PROCEDURE [EDI].[usp_GetAutoComplete_EDIReceiver] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') AS [NAME_CODE]
		FROM
			[EDI].[EDIReceiver]
		WHERE
			[EDI].[EDIReceiver].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') AS [NAME_CODE]
		FROM
			[EDI].[EDIReceiver]
		WHERE
			([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[EDI].[EDIReceiver].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[EDIReceiver]
			WHERE
				([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[EDI].[EDIReceiver].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[EDIReceiver]
			WHERE
				[EDI].[EDIReceiver].[EDIReceiverCode] LIKE @stats ESCAPE '\'
			AND
				[EDI].[EDIReceiver].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[EDIReceiver]
			WHERE
				([EDI].[EDIReceiver].[EDIReceiverName] + ' [' +[EDI].[EDIReceiver].[EDIReceiverCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[EDI].[EDIReceiver].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;
			
			
	-- EXEC [EDI].[usp_GetAutoComplete_EDIReceiver] ' '
	-- EXEC [EDI].[usp_GetAutoComplete_EDIReceiver] 'I'
END

GO

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetIDAutoComplete_EDIReceiver]    Script Date: 05/14/2013 18:36:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetIDAutoComplete_EDIReceiver]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetIDAutoComplete_EDIReceiver]
GO



/****** Object:  StoredProcedure [EDI].[usp_GetIDAutoComplete_EDIReceiver]    Script Date: 05/14/2013 18:36:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [EDI].[usp_GetIDAutoComplete_EDIReceiver] 
	@EDIReceiverCode	nvarchar(15)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [EDIReceiver_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[EDI].[EDIReceiver].[EDIReceiverID]
	FROM
		[EDI].[EDIReceiver]
	WHERE
		@EDIReceiverCode = [EDI].[EDIReceiver].[EDIReceiverCode]
	AND
		[EDI].[EDIReceiver].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [EDI].[usp_GetIDAutoComplete_EDIReceiver] 1
	-- EXEC [EDI].[usp_GetIDAutoComplete_EDIReceiver] 1, 1
	-- EXEC [EDI].[usp_GetIDAutoComplete_EDIReceiver] 1, 0
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetAutoComplete_PrintSign]    Script Date: 04/15/2013 15:33:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetAutoComplete_PrintSign]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetAutoComplete_PrintSign]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetAutoComplete_PrintSign]    Script Date: 04/15/2013 15:33:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select all records from the table

CREATE PROCEDURE [EDI].[usp_GetAutoComplete_PrintSign] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') AS [NAME_CODE]
		FROM
			[EDI].[PrintSign]
		WHERE
			[EDI].[PrintSign].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') AS [NAME_CODE]
		FROM
			[EDI].[PrintSign]
		WHERE
			([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[EDI].[PrintSign].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[PrintSign]
			WHERE
				([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[EDI].[PrintSign].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[PrintSign]
			WHERE
				[EDI].[PrintSign].[PrintSignCode] LIKE @stats ESCAPE '\'
			AND
				[EDI].[PrintSign].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[PrintSign]
			WHERE
				([EDI].[PrintSign].[PrintSignName] + ' [' +[EDI].[PrintSign].[PrintSignCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[EDI].[PrintSign].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;
			
			
	-- EXEC [EDI].[usp_GetAutoComplete_PrintSign] ' '
	-- EXEC [EDI].[usp_GetAutoComplete_PrintSign] 'I'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetIDAutoComplete_PrintSign]    Script Date: 04/15/2013 15:34:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetIDAutoComplete_PrintSign]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetIDAutoComplete_PrintSign]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetIDAutoComplete_PrintSign]    Script Date: 04/15/2013 15:34:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [EDI].[usp_GetIDAutoComplete_PrintSign] 
	@PrintSignCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [PrintSign_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[EDI].[PrintSign].[PrintSignID]
	FROM
		[EDI].[PrintSign]
	WHERE
		@PrintSignCode = [EDI].[PrintSign].[PrintSignCode]
	AND
		[EDI].[PrintSign].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [EDI].[usp_GetByPkId_PrintSign] 1, NULL
	-- EXEC [EDI].[usp_GetByPkId_PrintSign] 1, 1
	-- EXEC [EDI].[usp_GetByPkId_PrintSign] 1, 0
END

GO

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetAutoComplete_PrintPin]    Script Date: 04/16/2013 10:25:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetAutoComplete_PrintPin]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetAutoComplete_PrintPin]
GO


/****** Object:  StoredProcedure [EDI].[usp_GetAutoComplete_PrintPin]    Script Date: 04/16/2013 10:25:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select all records from the table

CREATE PROCEDURE [EDI].[usp_GetAutoComplete_PrintPin] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') AS [NAME_CODE]
		FROM
			[EDI].[PrintPin]
		WHERE
			[EDI].[PrintPin].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') AS [NAME_CODE]
		FROM
			[EDI].[PrintPin]
		WHERE
			([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[EDI].[PrintPin].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[PrintPin]
			WHERE
				([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[EDI].[PrintPin].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[PrintPin]
			WHERE
				[EDI].[PrintPin].[PrintPinCode] LIKE @stats ESCAPE '\'
			AND
				[EDI].[PrintPin].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') AS [NAME_CODE]
			FROM
				[EDI].[PrintPin]
			WHERE
				([EDI].[PrintPin].[PrintPinName] + ' [' +[EDI].[PrintPin].[PrintPinCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[EDI].[PrintPin].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;
			
			
	-- EXEC [EDI].[usp_GetAutoComplete_PrintPin] ' '
	-- EXEC [EDI].[usp_GetAutoComplete_PrintPin] 'I'
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_TransactionTypeCode]    Script Date: 04/16/2013 10:25:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_TransactionTypeCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_TransactionTypeCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_TransactionTypeCode]    Script Date: 04/16/2013 10:25:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_TransactionTypeCode] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[TransactionTypeCode].[TransactionTypeCodeName] + ' [' +[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[TransactionTypeCode]
		WHERE
			[Transaction].[TransactionTypeCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[TransactionTypeCode].[TransactionTypeCodeName] + ' [' +[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[TransactionTypeCode]
		WHERE
			([Transaction].[TransactionTypeCode].[TransactionTypeCodeName] + ' [' +[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[TransactionTypeCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[TransactionTypeCode].[TransactionTypeCodeName] + ' [' +[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[TransactionTypeCode]
			WHERE
				[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[TransactionTypeCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[TransactionTypeCode].[TransactionTypeCodeName] + ' [' +[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[TransactionTypeCode]
			WHERE
				([Transaction].[TransactionTypeCode].[TransactionTypeCodeName] + ' [' +[Transaction].[TransactionTypeCode].[TransactionTypeCodeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[TransactionTypeCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_TransactionTypeCode] ' '
	-- EXEC [Transaction].[usp_GetAutoComplete_TransactionTypeCode] 'I'
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetIDAutoComplete_PrintPin]    Script Date: 04/16/2013 10:26:42 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetIDAutoComplete_PrintPin]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetIDAutoComplete_PrintPin]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetIDAutoComplete_PrintPin]    Script Date: 04/16/2013 10:26:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [EDI].[usp_GetIDAutoComplete_PrintPin] 
	@PrintPinCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [PrintPin_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[EDI].[PrintPin].[PrintPinID]
	FROM
		[EDI].[PrintPin]
	WHERE
		@PrintPinCode = [EDI].[PrintPin].[PrintPinCode]
	AND
		[EDI].[PrintPin].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [EDI].[usp_GetByPkId_PrintPin] 1, NULL
	-- EXEC [EDI].[usp_GetByPkId_PrintPin] 1, 1
	-- EXEC [EDI].[usp_GetByPkId_PrintPin] 1, 0
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_AuthorizationInformationQualifier]    Script Date: 04/16/2013 10:29:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_AuthorizationInformationQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_AuthorizationInformationQualifier]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_AuthorizationInformationQualifier]    Script Date: 04/16/2013 10:29:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_AuthorizationInformationQualifier] 
	@AuthorizationInformationQualifierCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [AuthorizationInformationQualifier_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID]
	FROM
		[Transaction].[AuthorizationInformationQualifier]
	WHERE
		@AuthorizationInformationQualifierCode = [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode]
	AND
		[Transaction].[AuthorizationInformationQualifier].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetByPkId_AuthorizationInformationQualifier] 1, NULL
	-- EXEC [Transaction].[usp_GetByPkId_AuthorizationInformationQualifier] 1, 1
	-- EXEC [Transaction].[usp_GetByPkId_AuthorizationInformationQualifier] 1, 0
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetCommentByID_ClaimProcess]    Script Date: 06/04/2013 12:35:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetCommentByID_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetCommentByID_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetCommentByID_ClaimProcess]    Script Date: 06/04/2013 12:35:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Claim].[usp_GetCommentByID_ClaimProcess] 
	@PatientVisitID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [USER_NAME_CODE] NVARCHAR(400) NOT NULL
		, [USER_COMMENTS] NVARCHAR(4000) NOT NULL
	);
	
	--
	
	INSERT INTO
		@TBL_ANS
	SELECT
		((LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL([User].[User].[MiddleName], '')))) + ' [' +[User].[User].[UserName] + ']') AS [USER_NAME_CODE] 
		, [Patient].[PatientVisit].[Comment] AS [USER_COMMENTS]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN 
		[User].[User]
	ON
		[Patient].[PatientVisit].[LastModifiedBy] = [User].[User].[UserID]
	WHERE
		@PatientVisitID = [Patient].[PatientVisit].[PatientVisitID]
	AND
		[Patient].[PatientVisit].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientVisit].[IsActive] ELSE @IsActive END
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
	ORDER BY
		[Patient].[PatientVisit].[PatientVisitID]
	ASC;
	
	--
	
	INSERT INTO
		@TBL_ANS
	SELECT
		((LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL([User].[User].[MiddleName], '')))) + ' [' +[User].[User].[UserName] + ']') AS [USER_NAME_CODE] 
		, [Claim].[ClaimProcess].[Comment] AS [USER_COMMENTS]
	FROM
		[Claim].[ClaimProcess]
	INNER JOIN 
		[User].[User]
	ON
		[Claim].[ClaimProcess].[AssignedTo] = [User].[User].[UserID]
	WHERE
		[Claim].[ClaimProcess].[AssignedTo] IS NOT NULL
	AND
		@PatientVisitID = [Claim].[ClaimProcess].[PatientVisitID]
	AND
		[Claim].[ClaimProcess].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimProcess].[IsActive] ELSE @IsActive END
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
	ORDER BY
		[Claim].[ClaimProcess].[ClaimProcessID]
	DESC;

	SELECT DISTINCT [USER_COMMENTS],[USER_NAME_CODE] FROM @TBL_ANS WHERE [USER_COMMENTS] NOT LIKE 'Status changed by automated job services%' ORDER BY 2;

	-- EXEC [Claim].[usp_GetCommentByID_ClaimProcess] 22743
	-- EXEC [Claim].[usp_GetCommentByID_ClaimProcess] 1, 1
	-- EXEC [Claim].[usp_GetCommentByID_ClaimProcess] 1, 0
END

GO

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_FacilityDone]    Script Date: 04/16/2013 15:08:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByAZ_FacilityDone]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByAZ_FacilityDone]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetByAZ_FacilityDone]    Script Date: 04/16/2013 15:08:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Billing].[usp_GetByAZ_FacilityDone] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[FacilityDoneName] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Billing].[FacilityDone].[FacilityDoneName]
	FROM
		[Billing].[FacilityDone]
	WHERE
	(
		[Billing].[FacilityDone].[FacilityDoneName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[FacilityDone].[FacilityDoneCode] LIKE '%' + @SearchName + '%'
	) 
	AND
		[Billing].[FacilityDone].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[FacilityDone].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[FacilityDoneName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Billing].[usp_GetByAZ_FacilityDone] 
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_FacilityDone]    Script Date: 04/16/2013 15:09:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearch_FacilityDone]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearch_FacilityDone]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_FacilityDone]    Script Date: 04/16/2013 15:09:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Billing].[usp_GetBySearch_FacilityDone]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[FacilityDone].[FacilityDoneID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'FacilityDoneName' AND @OrderByDirection = 'A' THEN [Billing].[FacilityDone].[FacilityDoneName] END ASC,
				CASE WHEN @orderByField = 'FacilityDoneName' AND @orderByDirection = 'D' THEN [Billing].[FacilityDone].[FacilityDoneName] END DESC,
				
				CASE WHEN @OrderByField = 'FacilityDoneCode' AND @OrderByDirection = 'A' THEN [Billing].[FacilityDone].[FacilityDoneCode] END ASC,
				CASE WHEN @orderByField = 'FacilityDoneCode' AND @orderByDirection = 'D' THEN [Billing].[FacilityDone].[FacilityDoneCode] END DESC,
				
				CASE WHEN @OrderByField = 'NPI' AND @OrderByDirection = 'A' THEN [Billing].[FacilityDone].[NPI] END ASC,
				CASE WHEN @orderByField = 'NPI' AND @orderByDirection = 'D' THEN [Billing].[FacilityDone].[NPI] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[FacilityDone].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[FacilityDone].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Billing].[FacilityDone]
	WHERE
		[Billing].[FacilityDone].[FacilityDoneName] LIKE @StartBy + '%' 
	AND
	(
		[Billing].[FacilityDone].[FacilityDoneName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[FacilityDone].[FacilityDoneCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Billing].[FacilityDone].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[FacilityDone].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[FacilityDone].[FacilityDoneID], [FacilityDone].[FacilityDoneCode], [FacilityDone].[FacilityDoneName],[FacilityDone].[NPI], [FacilityDone].[IsActive]
	FROM
		[FacilityDone] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [FacilityDone].[FacilityDoneID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_FacilityDone] @SearchName  = '45'
	-- EXEC [Billing].[usp_GetBySearch_FacilityDone] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetIDAutoComplete_ClaimDiagnosis]    Script Date: 04/17/2013 09:25:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetIDAutoComplete_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetIDAutoComplete_ClaimDiagnosis]
GO

/****** Object:  StoredProcedure [Claim].[usp_GetIDAutoComplete_ClaimDiagnosis]    Script Date: 04/17/2013 09:25:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Claim].[usp_GetIDAutoComplete_ClaimDiagnosis] 
	@DiagnosisID	NVARCHAR(9)
	, @PatientVisitID BIGINT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [ClaimDiagnosisID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
	FROM
		[Claim].[ClaimDiagnosis]
	WHERE
		[Claim].[ClaimDiagnosis].[DiagnosisID] = @DiagnosisID 
	AND
		[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
	AND
		[Claim].[ClaimDiagnosis].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Claim].[usp_GetIDAutoComplete_ClaimDiagnosis] '2888' , 1
	
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_EntityTypeQualifier]    Script Date: 04/17/2013 09:40:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_EntityTypeQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_EntityTypeQualifier]
GO



/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_EntityTypeQualifier]    Script Date: 04/17/2013 09:40:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_EntityTypeQualifier] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] + ' [' +[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[EntityTypeQualifier]
		WHERE
			[Transaction].[EntityTypeQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] + ' [' +[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[EntityTypeQualifier]
		WHERE
			([Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] + ' [' +[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[EntityTypeQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] + ' [' +[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[EntityTypeQualifier]
			WHERE
				[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[EntityTypeQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] + ' [' +[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[EntityTypeQualifier]
			WHERE
				([Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] + ' [' +[Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[EntityTypeQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Transaction].[usp_GetAutoComplete_EntityTypeQualifier] 'I'
	---- EXEC [Transaction].[usp_GetAutoComplete_EntityTypeQualifier] '00'
	
	
	
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_EntityTypeQualifier]    Script Date: 04/17/2013 09:41:28 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_EntityTypeQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_EntityTypeQualifier]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_EntityTypeQualifier]    Script Date: 04/17/2013 09:41:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_EntityTypeQualifier] 
	@EntityTypeQualifierCode	NVARCHAR(2)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [EntityTypeQualifierID] TINYINT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierID]
	FROM
		[Transaction].[EntityTypeQualifier]
	WHERE
		@EntityTypeQualifierCode = [Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode]
	AND
		[Transaction].[EntityTypeQualifier].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_EntityTypeQualifier] '00'
	
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_Diagnosis]    Script Date: 04/17/2013 11:36:25 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetBySearch_Diagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetBySearch_Diagnosis]
GO

/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_Diagnosis]    Script Date: 04/17/2013 11:36:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Diagnosis].[usp_GetBySearch_Diagnosis]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Diagnosis].[Diagnosis].[DiagnosisID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'ShortDesc' AND @OrderByDirection = 'A' THEN [Diagnosis].[Diagnosis].[ShortDesc] END ASC,
				CASE WHEN @orderByField = 'ShortDesc' AND @orderByDirection = 'D' THEN [Diagnosis].[Diagnosis].[ShortDesc] END DESC,
						
				CASE WHEN @OrderByField = 'DiagnosisCode' AND @OrderByDirection = 'A' THEN [Diagnosis].[Diagnosis].[DiagnosisCode] END ASC,
				CASE WHEN @orderByField = 'DiagnosisCode' AND @orderByDirection = 'D' THEN [Diagnosis].[Diagnosis].[DiagnosisCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Diagnosis].[Diagnosis].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Diagnosis].[Diagnosis].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Diagnosis].[Diagnosis]
	WHERE
		[Diagnosis].[Diagnosis].[ShortDesc] LIKE @StartBy + '%' 
	AND
	(
		[Diagnosis].[Diagnosis].[ShortDesc] LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[Diagnosis].[DiagnosisCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Diagnosis].[Diagnosis].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[Diagnosis].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Diagnosis].[DiagnosisID], [Diagnosis].[DiagnosisCode], [Diagnosis].[ShortDesc], [Diagnosis].[IsActive]
	FROM
		[Diagnosis] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Diagnosis].[DiagnosisID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Diagnosis].[usp_GetBySearch_Diagnosis] @SearchName  = '36'
	-- EXEC [Diagnosis].[usp_GetBySearch_Diagnosis] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_Diagnosis]    Script Date: 05/30/2013 16:07:32 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetByAZ_Diagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetByAZ_Diagnosis]
GO



/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_Diagnosis]    Script Date: 05/30/2013 16:07:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Diagnosis].[usp_GetByAZ_Diagnosis] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT Diagnosisments.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[DiagnosisName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		ISNULL([Diagnosis].[Diagnosis].[ShortDesc],ISNULL([Diagnosis].[Diagnosis].[LongDesc],ISNULL([Diagnosis].[Diagnosis].[CustomDesc],ISNULL([Diagnosis].[Diagnosis].[MediumDesc],'NO DESC'))))
	FROM
		[Diagnosis].[Diagnosis]
	WHERE
	(
		ISNULL([Diagnosis].[Diagnosis].[ShortDesc],ISNULL([Diagnosis].[Diagnosis].[LongDesc],ISNULL([Diagnosis].[Diagnosis].[CustomDesc],ISNULL([Diagnosis].[Diagnosis].[MediumDesc],'NO DESC')))) LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[Diagnosis].[DiagnosisCode] LIKE '%' + @SearchName + '%' 		
	)
	AND
		[Diagnosis].[Diagnosis].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[Diagnosis].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[DiagnosisName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Diagnosis].[usp_GetByAZ_Diagnosis] @Searchname = '0.006' 
END






GO






-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_CPT]    Script Date: 05/31/2013 17:52:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetBySearch_CPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetBySearch_CPT]
GO



/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_CPT]    Script Date: 05/31/2013 17:52:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Diagnosis].[usp_GetBySearch_CPT]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Diagnosis].[CPT].[CPTID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'Description' AND @OrderByDirection = 'A' THEN ISNULL([Diagnosis].[CPT].[ShortDesc],ISNULL([Diagnosis].[CPT].[LongDesc],ISNULL([Diagnosis].[CPT].[CustomDesc],ISNULL([Diagnosis].[CPT].[MediumDesc],'NO DESC'))))  END ASC,
				CASE WHEN @orderByField = 'Description' AND @orderByDirection = 'D' THEN ISNULL([Diagnosis].[CPT].[ShortDesc],ISNULL([Diagnosis].[CPT].[LongDesc],ISNULL([Diagnosis].[CPT].[CustomDesc],ISNULL([Diagnosis].[CPT].[MediumDesc],'NO DESC')))) END DESC,
						
				CASE WHEN @OrderByField = 'CPTCode' AND @OrderByDirection = 'A' THEN [Diagnosis].[CPT].[CPTCode] END ASC,
				CASE WHEN @orderByField = 'CPTCode' AND @orderByDirection = 'D' THEN [Diagnosis].[CPT].[CPTCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Diagnosis].[CPT].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Diagnosis].[CPT].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Diagnosis].[CPT]
	WHERE
		ISNULL([Diagnosis].[CPT].[ShortDesc],ISNULL([Diagnosis].[CPT].[LongDesc],ISNULL([Diagnosis].[CPT].[CustomDesc],ISNULL([Diagnosis].[CPT].[MediumDesc],'NO DESC')))) LIKE @StartBy + '%' 
	AND
	(
		ISNULL([Diagnosis].[CPT].[ShortDesc],ISNULL([Diagnosis].[CPT].[LongDesc],ISNULL([Diagnosis].[CPT].[CustomDesc],ISNULL([Diagnosis].[CPT].[MediumDesc],'NO DESC')))) LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[CPT].[CPTCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Diagnosis].[CPT].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[CPT].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[CPT].[CPTID], [CPT].[CPTCode], ISNULL([Diagnosis].[CPT].[ShortDesc],ISNULL([Diagnosis].[CPT].[LongDesc],ISNULL([Diagnosis].[CPT].[CustomDesc],ISNULL([Diagnosis].[CPT].[MediumDesc],'NO DESC')))) AS DESCRIPTION, [CPT].[IsActive]
	FROM
		[CPT] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [CPT].[CPTID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Diagnosis].[usp_GetBySearch_CPT] @SearchName  = '36'
	-- EXEC [Diagnosis].[usp_GetBySearch_CPT] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



-----------------------------------------------------------------------



/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_CPT]    Script Date: 05/30/2013 16:03:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetByAZ_CPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetByAZ_CPT]
GO



/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_CPT]    Script Date: 05/30/2013 16:03:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Diagnosis].[usp_GetByAZ_CPT] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT Diagnosisments.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[CPTName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		ISNULL([Diagnosis].[CPT].[ShortDesc],ISNULL([Diagnosis].[CPT].[LongDesc],ISNULL([Diagnosis].[CPT].[CustomDesc],ISNULL([Diagnosis].[CPT].[MediumDesc],'NO DESC'))))
	FROM
		[Diagnosis].[CPT]
	WHERE
	(
		ISNULL([Diagnosis].[CPT].[ShortDesc],ISNULL([Diagnosis].[CPT].[LongDesc],ISNULL([Diagnosis].[CPT].[CustomDesc],ISNULL([Diagnosis].[CPT].[MediumDesc],'NO DESC')))) LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[CPT].[CPTCode] LIKE '%' + @SearchName + '%' 		
	)
	AND
		[Diagnosis].[CPT].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[CPT].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[CPTName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Diagnosis].[usp_GetByAZ_CPT] 
END






GO





-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIsPatVisitDoc_Clinic]    Script Date: 04/17/2013 12:13:28 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIsPatVisitDoc_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIsPatVisitDoc_Clinic]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetIsPatVisitDoc_Clinic]    Script Date: 04/17/2013 12:13:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [Billing].[usp_GetIsPatVisitDoc_Clinic] 
	@ClinicID INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Billing].[Clinic].[ClinicID]
		,ISNULL( [Billing].[Clinic].[IsPatVisitDocManadatory], 0) AS [IsAttachmentMandatory]
	FROM
		[Billing].[Clinic]
	WHERE
		[Billing].[Clinic].[ClinicID] = @ClinicID;
			
	-- EXEC [Billing].[usp_GetIsPatVisitDoc_Clinic]  @ClinicID = 2
	
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_Specialty]    Script Date: 05/23/2013 17:12:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetAutoComplete_Specialty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetAutoComplete_Specialty]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_Specialty]    Script Date: 05/23/2013 17:12:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetAutoComplete_Specialty] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Billing].[Specialty].[SpecialtyName] +'-'+[Billing].[Specialty].[SpecialtyCode] + ' [' + CAST([Billing].[Specialty].[SpecialtyID] as NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Billing].[Specialty]
		WHERE
			[Billing].[Specialty].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Billing].[Specialty].[SpecialtyName] +'-'+[Billing].[Specialty].[SpecialtyCode] + ' [' + CAST([Billing].[Specialty].[SpecialtyID] as NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Billing].[Specialty]
		WHERE
			([Billing].[Specialty].[SpecialtyName] + ' [' +CAST([Billing].[Specialty].[SpecialtyID] as NVARCHAR) + ']') LIKE @stats ESCAPE '\'
		AND
			[Billing].[Specialty].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[Specialty].[SpecialtyName] +'-'+[Billing].[Specialty].[SpecialtyCode] + ' [' + CAST([Billing].[Specialty].[SpecialtyID] as NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Billing].[Specialty]
			WHERE
				[Billing].[Specialty].[SpecialtyCode] LIKE @stats ESCAPE '\'
			AND
				[Billing].[Specialty].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[Specialty].[SpecialtyName] +'-'+[Billing].[Specialty].[SpecialtyCode] + ' [' + CAST([Billing].[Specialty].[SpecialtyID] as NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Billing].[Specialty]
			WHERE
				([Billing].[Specialty].[SpecialtyName] + ' [' +CAST([Billing].[Specialty].[SpecialtyID] as NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Billing].[Specialty].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Billing].[usp_GetAutoComplete_Specialty] 'I'
	---- EXEC [Billing].[usp_GetAutoComplete_Specialty] '00'
		
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Specialty]    Script Date: 04/17/2013 17:04:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIDAutoComplete_Specialty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIDAutoComplete_Specialty]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Specialty]    Script Date: 04/17/2013 17:04:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Billing].[usp_GetIDAutoComplete_Specialty] 
	@SpecialtyCode	NVARCHAR(17)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [SpecialtyID] TINYINT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Billing].[Specialty].[SpecialtyID]
	FROM
		[Billing].[Specialty]
	WHERE
		@SpecialtyCode = [Billing].[Specialty].[SpecialtyCode]
	AND
		[Billing].[Specialty].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetIDAutoComplete_Specialty] '171100000X'
	
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_IPA]    Script Date: 04/18/2013 12:51:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIDAutoComplete_IPA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIDAutoComplete_IPA]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_IPA]    Script Date: 04/18/2013 12:51:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Billing].[usp_GetIDAutoComplete_IPA] 
	@IPACode	NVARCHAR(17)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [IPAID] TINYINT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Billing].[IPA].[IPAID]
	FROM
		[Billing].[IPA]
	WHERE
		@IPACode = [Billing].[IPA].[IPACode]
	AND
		[Billing].[IPA].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetIDAutoComplete_IPA] '171100000X'
	
END

GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_IPA]    Script Date: 04/18/2013 12:51:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetAutoComplete_IPA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetAutoComplete_IPA]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_IPA]    Script Date: 04/18/2013 12:51:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Billing].[usp_GetAutoComplete_IPA] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Billing].[IPA].[IPAName] + ' [' +[Billing].[IPA].[IPACode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[IPA]
		WHERE
			[Billing].[IPA].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Billing].[IPA].[IPAName] + ' [' +[Billing].[IPA].[IPACode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[IPA]
		WHERE
			([Billing].[IPA].[IPAName] + ' [' +[Billing].[IPA].[IPACode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Billing].[IPA].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[IPA].[IPAName] + ' [' +[Billing].[IPA].[IPACode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[IPA]
			WHERE
				[Billing].[IPA].[IPACode] LIKE @stats ESCAPE '\'
			AND
				[Billing].[IPA].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[IPA].[IPAName] + ' [' +[Billing].[IPA].[IPACode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[IPA]
			WHERE
				([Billing].[IPA].[IPAName] + ' [' +[Billing].[IPA].[IPACode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Billing].[IPA].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Billing].[usp_GetAutoComplete_IPA] 'I'
	---- EXEC [Billing].[usp_GetAutoComplete_IPA] '00'
	
	
	
END

GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Billing].[usp_GetPatientVisitComplexity_Clinic]    Script Date: 04/18/2013 15:38:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetPatientVisitComplexity_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetPatientVisitComplexity_Clinic]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetPatientVisitComplexity_Clinic]    Script Date: 04/18/2013 15:38:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetPatientVisitComplexity_Clinic] 
	@ClinicID	INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Billing].[Clinic].[ClinicID], [Billing].[Clinic].[PatientVisitComplexity]
	FROM
		[Billing].[Clinic]
	WHERE
		@ClinicID = [Billing].[Clinic].[ClinicID]
	AND
		[Billing].[Clinic].[IsActive] = 1;

	-- EXEC [Billing].[usp_GetPatientVisitComplexity_Clinic] 1
	-- EXEC [Billing].[usp_GetPatientVisitComplexity_Clinic] 1, 1
	-- EXEC [Billing].[usp_GetPatientVisitComplexity_Clinic] 1, 0
END


GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetNameByID_User]    Script Date: 04/19/2013 14:19:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetNameByID_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetNameByID_User]
GO

/****** Object:  StoredProcedure [User].[usp_GetNameByID_User]    Script Date: 04/19/2013 14:19:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [User].[usp_GetNameByID_User] 
	@UserID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;	

	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [NAME_CODE] NVARCHAR(500) NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		((LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL([User].[User].[MiddleName], '')))) + ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
	FROM
		[User].[User]
	WHERE
		@UserID = [User].[User].[UserID]
	AND
		[User].[User].[IsActive]=1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [User].[usp_GetNameByID_User] 1, NULL
	
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisitID_ClaimProcess]    Script Date: 05/02/2013 19:05:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByPatientVisitID_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByPatientVisitID_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetByPatientVisitID_ClaimProcess]    Script Date: 05/02/2013 19:05:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Claim].[usp_GetByPatientVisitID_ClaimProcess] 
	@PatientVisitID	BIGINT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Claim].[ClaimProcess].[ClaimStatusID]
		, [Claim].[ClaimProcess].[StatusStartDate]
		, [Claim].[ClaimProcess].[StatusEndDate]
		, [Claim].[ClaimProcess].[DurationMins]
		, [Claim].[ClaimProcess].[Comment]
		, ISNULL((LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))), '') AS [USER_NAME_CODE]
		, ISNULL([Claim].[ClaimProcessEDIFile].[ClaimProcessEDIFileID], 0) AS [ClaimProcessEDIFileID]
		, ISNULL([EDI].[EDIFile].[X12FileRelPath], '') AS [X12FileRelPath]
		, ISNULL([EDI].[EDIFile].[RefFileRelPath], '') AS [RefFileRelPath]
		, ISNULL([EDI].[EDIFile].[CreatedOn], '1900-01-01') AS [CreatedOn]		
		
	FROM
		[Claim].[ClaimProcess]
	LEFT JOIN
		[Claim].[ClaimProcessEDIFile]
	ON
		[Claim].[ClaimProcess].[ClaimProcessID] = [Claim].[ClaimProcessEDIFile].[ClaimProcessID]
	AND
		[Claim].[ClaimProcessEDIFile].[IsActive] = 1
	LEFT JOIN
		[EDI].[EDIFile]
	ON
		[Claim].[ClaimProcessEDIFile].[EDIFileID] = [EDI].[EDIFile].[EDIFileID]
	AND
		[EDI].[EDIFile].[IsActive] = 1
	LEFT JOIN
		[EDI].[EDIReceiver]
	ON
		[EDI].[EDIFile].[EDIReceiverID] = [EDI].[EDIReceiver].[EDIReceiverID]
	AND
		[EDI].[EDIReceiver].[IsActive] = 1
	LEFT JOIN
		[User].[User]
	ON
		[User].[User].[UserID] = [Claim].[ClaimProcess].[AssignedTo]
	AND
		[User].[User].[IsActive] = 1
	WHERE
		[Claim].[ClaimProcess].[PatientVisitID] = @PatientVisitID
	AND
		[Claim].[ClaimProcess].[IsActive] = 1
	ORDER BY 
		[Claim].[ClaimProcess].[ClaimProcessID]
	ASC;
		
	-- EXEC [Claim].[usp_GetByPatientVisitID_ClaimProcess] 7219
	-- EXEC [Claim].[usp_GetByPatientVisitID_ClaimProcess] 1, 1
	-- EXEC [Claim].[usp_GetByPatientVisitID_ClaimProcess] 1, 0
END



GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetDate_PatientVisit]    Script Date: 05/31/2013 09:28:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetDate_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetDate_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetDate_PatientVisit]    Script Date: 05/31/2013 09:28:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Patient].[usp_GetDate_PatientVisit]
	@ClinicID int
	, @StatusIDs NVARCHAR(100)
	, @AssignedTo INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		[DOS_FROM] DATE NOT NULL
		, [DOS_TO] DATE NOT NULL
	);

	INSERT INTO
		@TBL_ANS
	SELECT
		ISNULL(MIN([Patient].[PatientVisit].[DOS]), GETDATE()) AS [DOS_FROM]
		, GETDATE() AS [DOS_TO]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]	
	WHERE
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
	AND
		(
			[Patient].[PatientVisit].[AssignedTo] = @AssignedTo 
		OR
			(
				@AssignedTo IS NULL 
			AND 
				[Patient].[PatientVisit].[AssignedTo] IS NULL
			)
		)
	
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	IF EXISTS (SELECT * FROM @TBL_ANS)
	BEGIN
		UPDATE
			@TBL_ANS
		SET
			[DOS_TO] = DATEADD(DAY, 3, [DOS_FROM]);
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT
			DATEADD(DAY, -3, GETDATE()) AS [DOS_FROM]
			, GETDATE() AS [DOS_TO];
	END
		
	SELECT * FROM @TBL_ANS;
		
	-- EXEC [Patient].[usp_GetDate_PatientVisit] @ClinicID = 2, @StatusIDs = '1'
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetPrimeDxByID_PatientVisit]    Script Date: 06/05/2013 09:24:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetPrimeDxByID_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetPrimeDxByID_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetPrimeDxByID_PatientVisit]    Script Date: 06/05/2013 09:24:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Patient].[usp_GetPrimeDxByID_PatientVisit] 
	@PatientVisitID BIGINT
	, @IsActive BIT 
	, @DescType NVARCHAR(15) = NULL
	
AS
BEGIN
	SET NOCOUNT ON;
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc')) OR (@DescType = 'ShortDesc')
	BEGIN
		SELECT
			[Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		
	END			
	IF (@DescType = 'MediumDesc')
	BEGIN
		SELECT
			[Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
	END	
	IF (@DescType = 'LongDesc')
	BEGIN
		SELECT
			[Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
	END	
	IF (@DescType = 'CustomDesc')
	BEGIN
		SELECT
			[Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
	END			
	
	-- EXEC [Patient].[usp_GetPrimeDxByID_PatientVisit] @PatientVisitID = 22690, @IsActive=1, @DescType = 'LongDesc'
	-- EXEC [Patient].[usp_GetPrimeDxByID_PatientVisit] @PatientVisitID = 2, @IsActive=0
	-- EXEC [Patient].[usp_GetPrimeDxByID_PatientVisit] @PatientVisitID = 4333, @IsActive=1
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetClaimAgent_PatientVisit]    Script Date: 07/06/2013 17:43:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetClaimAgent_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetClaimAgent_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetClaimAgent_PatientVisit]    Script Date: 07/06/2013 17:43:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Patient].[usp_GetClaimAgent_PatientVisit]
    @ClinicID INT
	, @SearchName NVARCHAR(150) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, ROW_NUMBER() OVER (
			ORDER BY
			
				CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
						
				CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
								
				CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
				CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
				CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
				
				CASE WHEN @OrderByField = 'TargetBAUserID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[TargetBAUserID] END ASC,
				CASE WHEN @orderByField = 'TargetBAUserID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[TargetBAUserID] END DESC,
				
				CASE WHEN @OrderByField = 'TargetQAUserID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[TargetQAUserID] END ASC,
				CASE WHEN @orderByField = 'TargetQAUserID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[TargetQAUserID] END DESC,
			    
			    CASE WHEN @OrderByField = 'TargetEAUserID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[TargetEAUserID] END ASC,
				CASE WHEN @orderByField = 'TargetEAUserID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[TargetEAUserID] END DESC,

				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[PatientVisit].[PatientID] = [Patient].[Patient].[PatientID]
		
		
	WHERE
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @SearchName + '%' 
		)
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] < 22	
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;	
	
	DECLARE @TBL_RES TABLE
	(
		[PAT_NAME] NVARCHAR(500) NOT NULL
		, [CHART_NUMBER] NVARCHAR(20) NOT NULL
		, [DOS] DATE NOT NULL
		, [PATIENT_VISIT_ID] BIGINT NOT NULL
		, [TARGET_BA_USER] NVARCHAR(400) NULL
		, [TARGET_BA_USERID] INT NULL
		, [TARGET_QA_USER] NVARCHAR(400) NULL
		, [TARGET_QA_USERID] INT NULL
		, [TARGET_EA_USER] NVARCHAR(400) NULL
		, [TARGET_EA_USERID] INT NULL
		, [IS_ACTIVE] BIT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT		
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))
		,ChartNumber
		,DOS
		,PatientVisitID
		,NULL
		,TargetBAUserID
		,NULL
		,TargetQAUserID
		,NULL
		,TargetEAUserID
		,PatientVisit.IsActive
	FROM
		[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [PatientVisit].[PatientVisitID]
		INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[PatientVisit].[PatientID] = [Patient].[Patient].[PatientID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	UPDATE
		T
	SET
		[T].[TARGET_BA_USER] = [U].[LastName] + ' ' + [U].[FirstName] + ISNULL((' ' + [U].[MiddleName]), '') + ' [' + [U].[UserName] + ']'
	FROM
		@TBL_RES T
	INNER JOIN
		[User].[User] U
	ON
		[U].[UserID] = [T].[TARGET_BA_USERID]
	WHERE
		[T].[TARGET_BA_USERID] IS NOT NULL;
		
	UPDATE
		T
	SET
		[T].[TARGET_QA_USER] = [U].[LastName] + ' ' + [U].[FirstName] + ISNULL((' ' + [U].[MiddleName]), '') + ' [' + [U].[UserName] + ']'
	FROM
		@TBL_RES T
	INNER JOIN
		[User].[User] U
	ON
		[U].[UserID] = [T].[TARGET_QA_USERID]
	WHERE
		[T].[TARGET_QA_USERID] IS NOT NULL;
		
	UPDATE
		T
	SET
		[T].[TARGET_EA_USER] = [U].[LastName] + ' ' + [U].[FirstName] + ISNULL((' ' + [U].[MiddleName]), '') + ' [' + [U].[UserName] + ']'
	FROM
		@TBL_RES T
	INNER JOIN
		[User].[User] U
	ON
		[U].[UserID] = [T].[TARGET_EA_USERID]
	WHERE
		[T].[TARGET_EA_USERID] IS NOT NULL;
	
	SELECT * FROM @TBL_RES;	
	 
	-- EXEC [Patient].[usp_GetClaimAgent_PatientVisit] @ClinicID = '1',@DateFrom = '07/06/2013',@DateTo = '07/09/2013'
	-- EXEC [Patient].[usp_GetClaimAgent_PatientVisit] @SearchName  = '', @StartBy = 'c', @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D',@ClinicID=2
END





GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Billing].[usp_GetByID_FacilityDone]    Script Date: 04/23/2013 14:31:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByID_FacilityDone]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByID_FacilityDone]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetByID_FacilityDone]    Script Date: 04/23/2013 14:31:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Billing].[usp_GetByID_FacilityDone] 
	@PatientVisitID BIGINT
AS
BEGIN
	SET NOCOUNT ON;	

	
	SELECT
		[Billing].[FacilityDone].*
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Billing].[FacilityDone]
	ON
		[Billing].[FacilityDone].[FacilityDoneID] = [Patient].[PatientVisit].[FacilityDoneID]
	WHERE
		[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID 
	AND
		[Patient].[PatientVisit].[IsActive]=1;
	
	-- EXEC [Billing].[usp_GetByID_FacilityDone]  7
	
END




GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_IPA]    Script Date: 04/23/2013 17:18:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetNameByID_IPA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetNameByID_IPA]
GO



/****** Object:  StoredProcedure [Billing].[usp_GetNameByID_IPA]    Script Date: 04/23/2013 17:18:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetNameByID_IPA] 
	@IPAID	INT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[Billing].[IPA].[IPAID]
		,[Billing].[IPA].[IPAName]+ ' [' + [Billing].[IPA].[IPACode] + ']' AS [NAME_CODE]	
	FROM
		[Billing].[IPA]
	WHERE
		@IPAID = [Billing].[IPA].[IPAID]
	AND
		[Billing].[IPA].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[IPA].[IsActive] ELSE @IsActive END;

	-- EXEC [Billing].[usp_GetNameByID_IPA] 1, NULL
	-- EXEC [Billing].[usp_GetNameByID_IPA] 1, 1
	-- EXEC [Billing].[usp_GetNameByID_IPA] 1, 0
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetByPatientID_PatientDocument]    Script Date: 05/31/2013 12:54:16 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByPatientID_PatientDocument]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByPatientID_PatientDocument]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByPatientID_PatientDocument]    Script Date: 05/31/2013 12:54:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Patient].[usp_GetByPatientID_PatientDocument] 
	@PatientID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Patient].[PatientDocument].*
		, [MasterData].[DocumentCategory].[DocumentCategoryName] + ' [' + [MasterData].[DocumentCategory].[DocumentCategoryCode] + ']' AS [NAME_CODE]
	FROM
		[Patient].[PatientDocument]
	INNER JOIN 
		[MasterData].[DocumentCategory]
	ON
		[MasterData].[DocumentCategory].[DocumentCategoryID] = [Patient].[PatientDocument].[DocumentCategoryID]
	WHERE	
		@PatientID = [Patient].[PatientDocument].[PatientID]
	AND
		[MasterData].[DocumentCategory].[IsActive] = CASE WHEN @IsActive IS NULL THEN [MasterData].[DocumentCategory].[IsActive] ELSE @IsActive END
	AND
		[Patient].[PatientDocument].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientDocument].[IsActive] ELSE @IsActive END
	ORDER BY
		[NAME_CODE]
	ASC,
		[Patient].[PatientDocument].[ServiceOrFromDate]
	ASC,
		[Patient].[PatientDocument].[ToDate]
	ASC;

	-- EXEC [Patient].[usp_GetByPatientID_PatientDocument] 1, NULL
	-- EXEC [Patient].[usp_GetByPatientID_PatientDocument] 1, 1
	-- EXEC [Patient].[usp_GetByPatientID_PatientDocument] 1, 0
END


GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------


-----------------------------------------------------------------------

--/****** Object:  StoredProcedure [Claim].[usp_Insert_ClaimDiagnosis]    Script Date: 04/29/2013 16:09:09 ******/
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_Insert_ClaimDiagnosis]') AND type in (N'P', N'PC'))
--DROP PROCEDURE [Claim].[usp_Insert_ClaimDiagnosis]
--GO

--/****** Object:  StoredProcedure [Claim].[usp_Insert_ClaimDiagnosis]    Script Date: 04/29/2013 16:09:09 ******/
--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO


---- Inserts the record into the table without repeatation

--CREATE PROCEDURE [Claim].[usp_Insert_ClaimDiagnosis]
--	@PatientVisitID BIGINT
--	, @DiagnosisID INT
--	, @CurrentModificationBy BIGINT
--	, @ClaimDiagnosisID BIGINT OUTPUT
--AS
--BEGIN
--	SET NOCOUNT ON;
	
--	BEGIN TRY
--		DECLARE @CurrentModificationOn DATETIME;
--		SELECT @CurrentModificationOn = GETDATE();
		
--		SELECT @ClaimDiagnosisID = [Claim].[ufn_IsExists_ClaimDiagnosis] (@PatientVisitID, @DiagnosisID, 0,  NULL, 0);
		
--		IF @ClaimDiagnosisID = 0
--		BEGIN
--			INSERT INTO [Claim].[ClaimDiagnosis]
--			(
--				[PatientVisitID]
--				, [DiagnosisID]
--				, [ClaimNumber]
--				, [CreatedBy]
--				, [CreatedOn]
--				, [LastModifiedBy]
--				, [LastModifiedOn]
--				, [IsActive]
--			)
--			VALUES
--			(
--				@PatientVisitID
--				, @DiagnosisID
--				, 0
--				, @CurrentModificationBy
--				, @CurrentModificationOn
--				, @CurrentModificationBy
--				, @CurrentModificationOn
--				, 1
--			);
			
--			SELECT @ClaimDiagnosisID = MAX([Claim].[ClaimDiagnosis].[ClaimDiagnosisID]) FROM [Claim].[ClaimDiagnosis];
--		END
--		ELSE
--		BEGIN			
--			SELECT @ClaimDiagnosisID = -1;
--		END		
--	END TRY
--	BEGIN CATCH
--		-- ERROR CATCHING - STARTS
--		BEGIN TRY
--			EXEC [Audit].[usp_Insert_ErrorLog];
--			SELECT @ClaimDiagnosisID = (MAX([Audit].[ErrorLog].[ErrorLogID]) * -1) FROM [Audit].[ErrorLog];
--		END TRY
--		BEGIN CATCH
--			RAISERROR('Error in [Audit].[usp_Insert_ErrorLog]', -1, -1);
--		END CATCH
--		-- ERROR CATCHING - ENDS
--	END CATCH	
--END

--GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetBySearch_WebCulture]    Script Date: 05/02/2013 09:30:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetBySearch_WebCulture]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetBySearch_WebCulture]
GO


/****** Object:  StoredProcedure [Audit].[usp_GetBySearch_WebCulture]    Script Date: 05/02/2013 09:30:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Audit].[usp_GetBySearch_WebCulture]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] NVARCHAR(12) NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Audit].[WebCulture].[KeyName]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'EnglishName' AND @OrderByDirection = 'A' THEN [Audit].[WebCulture].[EnglishName] END ASC,
				CASE WHEN @orderByField = 'EnglishName' AND @orderByDirection = 'D' THEN [Audit].[WebCulture].[EnglishName] END DESC,
						
				CASE WHEN @OrderByField = 'NativeName' AND @OrderByDirection = 'A' THEN [Audit].[WebCulture].[NativeName] END ASC,
				CASE WHEN @orderByField = 'NativeName' AND @orderByDirection = 'D' THEN [Audit].[WebCulture].[NativeName] END DESC
				
				
				
			) AS ROW_NUM
	FROM
		[Audit].[WebCulture]
	WHERE
		[Audit].[WebCulture].[EnglishName] LIKE @StartBy + '%' 
	AND
	(
		[Audit].[WebCulture].[EnglishName] LIKE '%' + @SearchName + '%' 
	
	)
	
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[WebCulture].[KeyName], [WebCulture].[EnglishName], [WebCulture].[NativeName], [WebCulture].[IsActive]
	FROM
		[WebCulture] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [WebCulture].[KeyName]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Audit].[usp_GetBySearch_WebCulture] @SearchName  = '36'
	-- EXEC [Audit].[usp_GetBySearch_WebCulture] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Audit].[usp_GetByAZ_WebCulture]    Script Date: 05/02/2013 09:31:37 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetByAZ_WebCulture]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetByAZ_WebCulture]
GO


/****** Object:  StoredProcedure [Audit].[usp_GetByAZ_WebCulture]    Script Date: 05/02/2013 09:31:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Audit].[usp_GetByAZ_WebCulture] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT WebCulturements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[WebCultureName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Audit].[WebCulture].[EnglishName]
	FROM
		[Audit].[WebCulture]
	WHERE
	(
		[Audit].[WebCulture].[EnglishName] LIKE '%' + @SearchName + '%' 
	
	)
	
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[WebCultureName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Audit].[usp_GetByAZ_WebCulture] 
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_Update_WebCulture]    Script Date: 05/02/2013 11:14:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_Update_WebCulture]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_Update_WebCulture]
GO


/****** Object:  StoredProcedure [Audit].[usp_Update_WebCulture]    Script Date: 05/02/2013 11:14:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--Description:This Stored Procedure is used to INSERT the WebCulture details into the table after rollback.
 
CREATE PROCEDURE [Audit].[usp_Update_WebCulture]
	@KeyName NVARCHAR(12)
	, @IsActive BIT
	, @WebCultureID BIGINT OUTPUT	
AS
BEGIN

BEGIN TRY
	SET NOCOUNT ON;
	UPDATE 
		[Audit].[WebCulture] 
	SET 
		[Audit].[WebCulture].[IsActive] = @IsActive 
	WHERE 
		[Audit].[WebCulture].[KeyName] = @KeyName
		
	SELECT @WebCultureID = 1;
	
	END TRY
	
	BEGIN CATCH
	-- ERROR CATCHING - STARTS
	BEGIN TRY			
		EXEC [Audit].[usp_Insert_ErrorLog];			
		SELECT @WebCultureID = (MAX([Audit].[ErrorLog].[ErrorLogID]) * -1) FROM [Audit].[ErrorLog];
	END TRY
	BEGIN CATCH
		RAISERROR('Error in [Audit].[usp_Insert_ErrorLog]', -1, -1);
	END CATCH
	-- ERROR CATCHING - ENDS
	END CATCH
			
	END
			

GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetPrevVisit_PatientVisit]    Script Date: 05/02/2013 21:30:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetPrevVisit_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetPrevVisit_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetPrevVisit_PatientVisit]    Script Date: 05/02/2013 21:30:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Patient].[usp_GetPrevVisit_PatientVisit]
	@PatientVisitID BIGINT
	, @PatientID BIGINT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		,[Patient].[PatientVisit].[DOS] 
		,[Patient].[PatientVisit].[ClaimStatusID]
		,[Patient].[PatientVisit].[PatientVisitComplexity]
		,CASE WHEN [Patient].[PatientVisit].[AssignedTo] IS NULL THEN NULL ELSE (SELECT LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], ''))) FROM [User].[User] WHERE [User].[User].[UserID] = [Patient].[PatientVisit].[AssignedTo])END AS [AssignedTo]
		,CASE WHEN [Patient].[PatientVisit].[TargetBAUserID] IS NULL THEN NULL ELSE (SELECT LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], ''))) FROM [User].[User] WHERE [User].[User].[UserID] = [Patient].[PatientVisit].[TargetBAUserID])END AS [TargetBAUserID]
		,CASE WHEN [Patient].[PatientVisit].[TargetQAUserID] IS NULL THEN NULL ELSE (SELECT LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], ''))) FROM [User].[User] WHERE [User].[User].[UserID] = [Patient].[PatientVisit].[TargetQAUserID])END AS [TargetQAUserID]
		,CASE WHEN [Patient].[PatientVisit].[TargetEAUserID] IS NULL THEN NULL ELSE (SELECT LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], ''))) FROM [User].[User] WHERE [User].[User].[UserID] = [Patient].[PatientVisit].[TargetEAUserID])END AS [TargetEAUserID]
	FROM
		[Patient].[PatientVisit]
	WHERE
		[Patient].[PatientVisit].[PatientID] = @PatientID
	AND
		[Patient].[PatientVisit].[PatientVisitID] <> @PatientVisitID
	ORDER BY 
		[Patient].[PatientVisit].[DOS]
	DESC
		
	-- EXEC [Patient].[usp_GetPrevVisit_PatientVisit] 11522 , 11522
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetTeamMembers_User]    Script Date: 06/11/2013 15:50:57 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetTeamMembers_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetTeamMembers_User]
GO



/****** Object:  StoredProcedure [User].[usp_GetTeamMembers_User]    Script Date: 06/11/2013 15:50:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [User].[usp_GetTeamMembers_User]
	
	@ClinicID int
   	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
  

    
    SELECT distinct
    [AccessPrivilege].[Role].[RoleID],
	[AccessPrivilege].[Role].[RoleName],
	(LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) as Name,
	[User].[User].[Email]
	FROM
		[User].[User] 
	INNER JOIN
	
	[User].[UserRole]	
	
	ON
	[User].[UserRole].[UserID]=[User].[User].[UserID] 
		
	INNER JOIN 
		[AccessPrivilege].[Role]
	ON
		[User].[UserRole].[RoleID]=[AccessPrivilege].[Role].[RoleID]
	INNER JOIN
	
	[User].[UserClinic]	
	
	ON
	[User].[UserClinic].[UserID]=[User].[User].[UserID]
	
	WHERE
	
	 [User].[UserClinic].[ClinicID] = @ClinicID
	 
	 AND
	 
	 [AccessPrivilege].[Role].[RoleID] <> 1
	 

	
	ORDER BY
		1 ASC
	,2 asc;
		
	
		
	
	-- EXEC [User].[usp_GetTeamMembers_User] @ClinicID = 2 
END





GO



-----------------------------------------------------------------------


-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetMaxDiagnosis_ClaimMedia]    Script Date: 05/03/2013 10:20:21 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetMaxDiagnosis_ClaimMedia]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetMaxDiagnosis_ClaimMedia]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetMaxDiagnosis_ClaimMedia]    Script Date: 05/03/2013 10:20:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Transaction].[usp_GetMaxDiagnosis_ClaimMedia] 
	@PatientVisitID  BIGINT 
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_TMP TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [MAX_DIAGNOSIS] TINYINT NOT NULL
	);
	
	INSERT INTO 
		@TBL_TMP 
	SELECT
		[Transaction].[ClaimMedia].[MaxDiagnosis] AS [MAX_DIAGNOSIS]
	FROM
		[Transaction].[ClaimMedia]
	INNER JOIN
		[EDI].[EDIReceiver]
	ON
		[EDI].[EDIReceiver].[ClaimMediaID] = [Transaction].[ClaimMedia].[ClaimMediaID]
	INNER JOIN
		[Insurance].[Insurance]
	ON
		[Insurance].[Insurance].[EDIReceiverID] = [EDI].[EDIReceiver].[EDIReceiverID]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Patient].[Patient].[InsuranceID] = [Insurance].[Insurance].[InsuranceID]
	INNER JOIN
		[Patient].[PatientVisit]
	ON
		[Patient].[PatientVisit].[PatientID] = [Patient].[Patient].[PatientID]
	WHERE
		[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		
	SELECT * FROM @TBL_TMP;
	
	-- EXEC [Transaction].[usp_GetMaxDiagnosis_ClaimMedia] 4289
	-- EXEC [Transaction].[usp_GetMaxDiagnosis_ClaimMedia] 4286
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetMaxClaimNumber_ClaimDiagnosis]    Script Date: 05/03/2013 10:21:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetMaxClaimNumber_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetMaxClaimNumber_ClaimDiagnosis]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetMaxClaimNumber_ClaimDiagnosis]    Script Date: 05/03/2013 10:21:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetMaxClaimNumber_ClaimDiagnosis] 
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_TMP TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [MAX_CLAIM_NO] BIGINT NOT NULL
	);
	
	INSERT INTO 
		@TBL_TMP 
	SELECT
		MAX ([Claim].[ClaimDiagnosis].[ClaimNumber]) AS [MAX_CLAIM_NO]
	FROM
		[Claim].[ClaimDiagnosis];
	
	SELECT * FROM @TBL_TMP;
	-- EXEC [Claim].[usp_GetMaxClaimNumber_ClaimDiagnosis] 
	-- EXEC [Claim].[usp_GetMaxClaimNumber_ClaimDiagnosis] 
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetDiagnosis_ClaimDiagnosis]    Script Date: 06/24/2013 16:50:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetDiagnosis_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetDiagnosis_ClaimDiagnosis]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetDiagnosis_ClaimDiagnosis]    Script Date: 06/24/2013 16:50:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Claim].[usp_GetDiagnosis_ClaimDiagnosis] 
	@PatientVisitID  BIGINT 
	,@IsActive BIT 
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
		,[Claim].[ClaimDiagnosis].[DiagnosisID]
	FROM
		[Claim].[ClaimDiagnosis]
	INNER JOIN
		[Patient].[PatientVisit]
	ON
		[Patient].[PatientVisit].[PatientVisitID] = [Claim].[ClaimDiagnosis].[PatientVisitID]
	WHERE
		[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID 
	AND
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] <> [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
	AND 
		[Claim].[ClaimDiagnosis].[IsActive] = @IsActive
	ORDER BY
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
	ASC;
	
	-- EXEC [Claim].[usp_GetDiagnosis_ClaimDiagnosis] 4286, 0
	-- EXEC [Claim].[usp_GetDiagnosis_ClaimDiagnosis] 4286, 1
END



GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Visit_ClaimProcess]    Script Date: 06/20/2013 11:47:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAnsi837Visit_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAnsi837Visit_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Visit_ClaimProcess]    Script Date: 06/20/2013 11:47:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Claim].[usp_GetAnsi837Visit_ClaimProcess]
	@ClinicID INT
	, @EDIReceiverID INT
	, @StatusIDs NVARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, [Patient].[PatientVisit].[PatientID]
		, [Patient].[PatientVisit].[PatientHospitalizationID]
		, [Patient].[PatientVisit].[DOS]
		, [Patient].[PatientVisit].[IllnessIndicatorID]
		, [Patient].[PatientVisit].[IllnessIndicatorDate]
		, [Patient].[PatientVisit].[FacilityTypeID]
		, [Billing].[FacilityType].[FacilityTypeCode]
		, [Patient].[PatientVisit].[FacilityDoneID]
		, [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		, [Patient].[PatientVisit].[DoctorNoteRelPath]
		, [Patient].[PatientVisit].[SuperBillRelPath]
		, [Patient].[PatientVisit].[PatientVisitDesc]
		, [Patient].[PatientVisit].[ClaimStatusID]
		, [Patient].[PatientVisit].[AssignedTo]
		, [Patient].[PatientVisit].[TargetBAUserID]
		, [Patient].[PatientVisit].[TargetQAUserID]
		, [Patient].[PatientVisit].[TargetEAUserID]
		, [Patient].[PatientVisit].[PatientVisitComplexity]
		, [Patient].[PatientVisit].[Comment]
		, [Patient].[PatientVisit].[IsActive]
		, [Patient].[PatientVisit].[LastModifiedBy]
		, [Patient].[PatientVisit].[LastModifiedOn]
		--
		, [Patient].[Patient].[GroupNumber]
		, [Patient].[Patient].[LastName] AS [PATIENT_LAST_NAME]
		, [Patient].[Patient].[MiddleName] AS [PATIENT_MIDDLE_NAME]
		, [Patient].[Patient].[FirstName] AS [PATIENT_FIRST_NAME]
		, [Patient].[Patient].[StreetName] AS [PATIENT_STREET_NAME]
		, [Patient].[Patient].[Suite] AS [PATIENT_SUITE]
		, [Patient].[Patient].[DOB]
		, [Patient].[Patient].[Sex]
		, [Patient].[Patient].[ChartNumber]
		, [Patient].[Patient].[PolicyNumber]
		, [Patient].[Patient].[CityID] AS [PATIENT_CITY_ID]
		, [PATIENT_CITY].[CityName] AS [PATIENT_CITY_NAME]
		, [PATIENT_CITY].[ZipCode] AS [PATIENT_CITY_ZIP_CODE]
		, [Patient].[Patient].[StateID] AS [PATIENT_STATE_ID]
		, [PATIENT_STATE].[StateCode] AS [PATIENT_STATE_CODE]
		, [Patient].[Patient].[CountryID] AS [PATIENT_COUNTRY_ID]
		, [PATIENT_COUNTRY].[CountryCode] AS [PATIENT_COUNTRY_CODE]
		, [Patient].[Patient].[MedicareID]
		--
		, [EDI].[PrintPin].[PrintPinCode]
		--
		, [Billing].[Provider].[LastName] AS [PROVIDER_LAST_NAME]
		, [Billing].[Provider].[MiddleName] AS [PROVIDER_MIDDLE_NAME]
		, [Billing].[Provider].[FirstName] AS [PROVIDER_FIRST_NAME]
		, ((LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], ''))))) AS [PROVIDER_NAME]
		, (CASE WHEN 
				[Billing].[Provider].[IsTaxIDPrimaryOption] = 1 THEN 
				(ISNULL([Billing].[Provider].[TaxID], (ISNULL([Billing].[Provider].[NPI], 'NO_TAX_NPI')))) ELSE 
				(ISNULL([Billing].[Provider].[NPI], (ISNULL([Billing].[Provider].[TaxID], 'NO_NPI_TAX')))) END) 
			AS [PROVIDER_TAX_NPI]
		--
		, [Billing].[Credential].[CredentialCode] AS [PROVIDER_CREDENTIAL_CODE]
		--
		, [Billing].[Specialty].[SpecialtyCode]		
		--
		, [Insurance].[Insurance].[InsuranceName]
		, [Insurance].[Insurance].[PayerID]
		, [Insurance].[Insurance].[CityID] AS [INSURANCE_CITY_ID]
		, [INSURANCE_CITY].[CityName] AS [INSURANCE_CITY_NAME]
		, [INSURANCE_CITY].[ZipCode] AS [INSURANCE_CITY_ZIP_CODE]
		, [Insurance].[Insurance].[StateID] AS [INSURANCE_STATE_ID]
		, [INSURANCE_STATE].[StateCode] AS [INSURANCE_STATE_CODE]
		, [Insurance].[Insurance].[CountryID] AS [INSURANCE_COUNTRY_ID]
		, [INSURANCE_COUNTRY].[CountryCode] AS [INSURANCE_COUNTRY_CODE]
		, [Insurance].[Insurance].[PatientPrintSignID]
		, [Insurance].[Insurance].[StreetName] AS [INSURANCE_STREET_NAME]
		, [Insurance].[Insurance].[Suite] AS [INSURANCE_SUITE]
		--
		, [Insurance].[Relationship].[RelationshipCode]
		--
		, [Insurance].[InsuranceType].[InsuranceTypeCode]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	INNER JOIN
		[Diagnosis].[IllnessIndicator]
	ON
		[Diagnosis].[IllnessIndicator].[IllnessIndicatorID] = [Patient].[PatientVisit].[IllnessIndicatorID]
	INNER JOIN
		[Billing].[FacilityType]
	ON
		[Billing].[FacilityType].[FacilityTypeID] = [Patient].[PatientVisit].[FacilityTypeID]
	INNER JOIN
		[Billing].[Provider]
	ON
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
	INNER JOIN
		[Insurance].[Insurance]
	ON
		[Insurance].[Insurance].[InsuranceID] = [Patient].[Patient].[InsuranceID]
	INNER JOIN
		[Insurance].[Relationship]
	ON
		[Insurance].[Relationship].[RelationshipID] = [Patient].[Patient].[RelationshipID]
	INNER JOIN
		[Billing].[Credential]
	ON
		[Billing].[Credential].[CredentialID] = [Billing].[Provider].[CredentialID]
	INNER JOIN
		[Billing].[Specialty]
	ON
		[Billing].[Specialty].[SpecialtyID] = [Billing].[Provider].[SpecialtyID]
	INNER JOIN
		[Insurance].[InsuranceType]
	ON
		[Insurance].[InsuranceType].[InsuranceTypeID] = [Insurance].[Insurance].[InsuranceTypeID]
	INNER JOIN
		[EDI].[PrintPin]
	ON
		[EDI].[PrintPin].[PrintPinID] = [Insurance].[Insurance].[PrintPinID]
	INNER JOIN
		[MasterData].[City] PATIENT_CITY
	ON
		[PATIENT_CITY].[CityID] = [Patient].[Patient].[CityID]
	INNER JOIN
		[MasterData].[State] PATIENT_STATE
	ON
		[PATIENT_STATE].[StateID] = [Patient].[Patient].[StateID]
	INNER JOIN
		[MasterData].[Country] PATIENT_COUNTRY
	ON
		[PATIENT_COUNTRY].[CountryID] = [Patient].[Patient].[CountryID]
	INNER JOIN
		[MasterData].[City] INSURANCE_CITY
	ON
		[INSURANCE_CITY].[CityID] = [Patient].[Patient].[CityID]
	INNER JOIN
		[MasterData].[State] INSURANCE_STATE
	ON
		[INSURANCE_STATE].[StateID] = [Patient].[Patient].[StateID]
	INNER JOIN
		[MasterData].[Country] INSURANCE_COUNTRY
	ON
		[INSURANCE_COUNTRY].[CountryID] = [Patient].[Patient].[CountryID]
	WHERE
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Insurance].[Insurance].[EDIReceiverID] = @EDIReceiverID
	AND
		[Patient].[PatientVisit].[ClaimStatusID] IN
		(
			SELECT 
				[Data] 
			FROM 
				[dbo].[ufn_StringSplit] (@StatusIDs, ',')
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1
	AND
		[Diagnosis].[IllnessIndicator].[IsActive] = 1
	AND
		[Billing].[FacilityType].[IsActive] = 1
	AND
		[Billing].[Provider].[IsActive] = 1
	AND
		[Insurance].[Insurance].[IsActive] = 1
	AND
		[Insurance].[Relationship].[IsActive] = 1
	AND
		[Billing].[Credential].[IsActive] = 1
	AND
		[Billing].[Specialty].[IsActive] = 1
	AND
		[Insurance].[InsuranceType].[IsActive] = 1
	AND
		[EDI].[PrintPin].[IsActive] = 1
	AND
		[PATIENT_CITY].[IsActive] = 1
	AND
		[PATIENT_STATE].[IsActive] = 1
	AND
		[PATIENT_COUNTRY].[IsActive] = 1
	AND
		[INSURANCE_CITY].[IsActive] = 1
	AND
		[INSURANCE_STATE].[IsActive] = 1
	AND
		[INSURANCE_COUNTRY].[IsActive] = 1
	ORDER BY
		[Insurance].[Insurance].[InsuranceName]
	ASC,
		[PROVIDER_NAME]
	ASC,
		[Patient].[PatientVisit].[PatientVisitID]
	ASC;
    
    -- EXEC [Claim].[usp_GetAnsi837Visit_ClaimProcess] @ClinicID = 1, @EDIReceiverID = 1, @StatusIDs = '16, 17, 18, 19, 20'
END







GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_EDIFile]    Script Date: 05/28/2013 20:18:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetBySearch_EDIFile]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetBySearch_EDIFile]
GO


/****** Object:  StoredProcedure [EDI].[usp_GetBySearch_EDIFile]    Script Date: 05/28/2013 20:18:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [EDI].[usp_GetBySearch_EDIFile]
	@ClinicID	INT
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END	
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[EDI].[EDIFile].[EDIFileID]
		, ROW_NUMBER() OVER (
			ORDER BY			
				CASE WHEN @OrderByField = 'EDIFileID' AND @OrderByDirection = 'A' THEN [EDI].[EDIFile].[EDIFileID] END ASC,
				CASE WHEN @orderByField = 'EDIFileID' AND @orderByDirection = 'D' THEN [EDI].[EDIFile].[EDIFileID] END DESC,

				CASE WHEN @OrderByField = 'CreatedOn' AND @OrderByDirection = 'A' THEN [EDI].[EDIFile].[CreatedOn] END ASC,
				CASE WHEN @OrderByField = 'CreatedOn' AND @OrderByDirection = 'D' THEN [EDI].[EDIFile].[CreatedOn] END DESC,		

				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [EDI].[EDIFile].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [EDI].[EDIFile].[LastModifiedOn] END DESC
			) AS ROW_NUM
	FROM
		[EDI].[EDIFile]	
	WHERE	
		[EDI].[EDIFile].[CreatedOn] BETWEEN @DateFrom AND @DateTo
	AND
		[EDI].[EDIFile].[EDIFileID] IN
		(
			SELECT
				[Claim].[ClaimProcessEDIFile].[EDIFileID]
			FROM
				[Claim].[ClaimProcessEDIFile]
			INNER JOIN
				[Claim].[ClaimProcess]
			ON
				[Claim].[ClaimProcess].[ClaimProcessID] = [Claim].[ClaimProcessEDIFile].[ClaimProcessID]
			INNER JOIN
				[Patient].[PatientVisit]
			ON
				[Patient].[PatientVisit].[PatientVisitID] = [Claim].[ClaimProcess].[PatientVisitID]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[Patient].[ClinicID] = @ClinicID
		)
	AND
		[EDI].[EDIFile].[IsActive] = CASE WHEN @IsActive IS NULL THEN [EDI].[EDIFile].[IsActive] ELSE @IsActive END
	ORDER BY
		[EDIFile].[LastModifiedOn]
	DESC;	
		
	DECLARE @TBL_RES TABLE
	(
	    [EDIFileID] INT NOT NULL
		, [X12FileRelPath] NVARCHAR(255) NOT NULL
		, [RefFileRelPath] NVARCHAR(255) NOT NULL
		, [CreatedOn] DATETIME  NOT NULL		
	);

	INSERT INTO
		@TBL_RES
	SELECT		
		[EDIFile].[EDIFileID]
		,[EDIFile].[X12FileRelPath]
		,[EDIFile].[RefFileRelPath]
		,[EDIFile].[CreatedOn]		
	FROM
		[EDIFile] WITH (NOLOCK)
		INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [EDIFile].[EDIFileID]		
	ORDER BY
		[ID]
	ASC;
		
	SELECT * FROM @TBL_RES;
	
	-- EXEC [EDI].[usp_GetBySearch_EDIFile] @DateFrom 
	-- EXEC [EDI].[usp_GetBySearch_EDIFile] @ClinicTypeID = 2, @ChartNumber  = NULL, @StartBy = NULL, @EDIID = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END




GO



-----------------------------------------------------------------------


-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetByEDI_PatientVisit]    Script Date: 06/21/2013 18:11:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByEDI_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByEDI_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByEDI_PatientVisit]    Script Date: 06/21/2013 18:11:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Patient].[usp_GetByEDI_PatientVisit]
    @EDIFileID INT 
	,@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'PatName' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))  END ASC,
				CASE WHEN @orderByField = 'PatName' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
						
				CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
				
				CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
				CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	INNER JOIN
		[Claim].[ClaimProcess]
	ON
		[Claim].[ClaimProcess].[PatientVisitID]	= [Patient].[PatientVisit].[PatientVisitID]
	INNER JOIN
		[Claim].[ClaimProcessEDIFile]
	ON
		[Claim].[ClaimProcessEDIFile].[ClaimProcessID] = [Claim].[ClaimProcess].[ClaimProcessID]
	INNER JOIN
		[EDI].[EDIFile]
	ON
		[EDI].[EDIFile].[EDIFileID] = [Claim].[ClaimProcessEDIFile].[EDIFileID]
	WHERE
		[EDI].[EDIFile].[EDIFileID] = @EDIFileID
	AND
		((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE @StartBy + '%' 
	AND
	(
	      (
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
		  )
	)
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	DECLARE @TBL_ANS TABLE
	(
		 [PatientVisitID] BIGINT NOT NULL
		, [PatName] NVARCHAR(500) NOT NULL
		, [ChartNumber] NVARCHAR(20) NOT NULL
		, [DOS] DATE NOT NULL
		, [PatientVisitComplexity] TINYINT NOT NULL
		, [ClinicID] INT NOT NULL
		, [AssignToMe] BIT NOT NULL
	);
	
	INSERT INTO
		@TBL_ANS
	SELECT
		 [PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PatName]
		, [Patient].[ChartNumber]
		, [PatientVisit].[DOS]
		, [PatientVisit].[PatientVisitComplexity]
		, [Patient].[ClinicID]
		, CAST('1' AS BIT) AS [AssignToMe]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	INNER JOIN
		[Claim].[ClaimProcess]
	ON
		[Claim].[ClaimProcess].[PatientVisitID]	= [Patient].[PatientVisit].[PatientVisitID]
	INNER JOIN
		[Claim].[ClaimProcessEDIFile]
	ON
		[Claim].[ClaimProcessEDIFile].[ClaimProcessID] = [Claim].[ClaimProcess].[ClaimProcessID]
	INNER JOIN
		[EDI].[EDIFile]
	ON
		[EDI].[EDIFile].[EDIFileID] = [Claim].[ClaimProcessEDIFile].[EDIFileID]
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [PatientVisit].[PatientVisitID]
	WHERE
		[EDI].[EDIFile].[EDIFileID] = @EDIFileID
	AND
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Patient].[usp_GetByEDI_PatientVisit] @EDIFileID  = 502
	-- EXEC [Patient].[usp_GetByEDI_PatientVisit] @SearchName  = 'ANDERSON', @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
	-- EXEC [Patient].[usp_GetByEDI_PatientVisit] @EDIFileID  = 502 , @SearchName  = 'AUENSON CONSTANT A'
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetByAZEDI_PatientVisit]    Script Date: 06/03/2013 15:18:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByAZEDI_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByAZEDI_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetByAZEDI_PatientVisit]    Script Date: 06/03/2013 15:18:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Patient].[usp_GetByAZEDI_PatientVisit] 
 @EDIFileID INT 
	,@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ChartNumber] [nvarchar](25) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))))
	FROM
	
	[Patient].[PatientVisit]
		
		
		INNER JOIN
		[Patient].[Patient]
		
		
		ON
		
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		
		INNER JOIN
		[Claim].[ClaimProcess]
		
		ON
		
	[Claim].[ClaimProcess].[PatientVisitID]	= [Patient].[PatientVisit].[PatientVisitID]
	
	INNER JOIN
	
	
		[Claim].[ClaimProcessEDIFile]
		
		ON
		
		[Claim].[ClaimProcessEDIFile].[ClaimProcessID] = [Claim].[ClaimProcess].[ClaimProcessID]
		
		INNER JOIN
		
		[EDI].[EDIFile]
		
		ON
		
		[EDI].[EDIFile].[EDIFileID] = [Claim].[ClaimProcessEDIFile].[EDIFileID]
		
	
		
		
	WHERE
	
	[EDI].[EDIFile].[EDIFileID] = @EDIFileID
	
	AND
	(
	      (
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
		  )
	)
	AND
		[Patient].[Patient].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[Patient].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ChartNumber] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [MasterData].[usp_GetByAZ_State] 
END





GO



-----------------------------------------------------------------------
	
/****** Object:  StoredProcedure [Patient].[usp_GetHospitalization_PatientVisit]    Script Date: 07/01/2013 21:48:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetHospitalization_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetHospitalization_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetHospitalization_PatientVisit]    Script Date: 07/01/2013 21:48:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Patient].[usp_GetHospitalization_PatientVisit]
	@PatientHospitalizationID BIGINT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


SELECT
	[Patient].[PatientHospitalization].[PatientHospitalizationID]
	, [Billing].[FacilityDone].[FacilityDoneID]
	, [Billing].[FacilityDone].[FacilityDoneName] + ' ['+[Billing].[FacilityDone].[FacilityDoneCode]+']' AS [NAME_CODE]
FROM
	[Patient].[PatientHospitalization]
INNER JOIN
	[Billing].[FacilityDone]
ON	
	[Billing].[FacilityDone].[FacilityDoneID] = [Patient].[PatientHospitalization].[FacilityDoneHospitalID]
WHERE
	[Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID


--[Patient].[usp_GetHospitalization_PatientVisit] @PatientHospitalizationID = 3

END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetDate_EDIFile]    Script Date: 05/28/2013 15:25:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetDate_EDIFile]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetDate_EDIFile]
GO


/****** Object:  StoredProcedure [EDI].[usp_GetDate_EDIFile]    Script Date: 05/28/2013 15:25:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [EDI].[usp_GetDate_EDIFile]
	@ClinicID	INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		[DOS_FROM] DATE NOT NULL
		, [DOS_TO] DATE NOT NULL
	);

	INSERT INTO
		@TBL_ANS
	SELECT
		ISNULL(MAX([EDI].[EDIFile].[CreatedOn]), GETDATE()) AS [DOS_FROM]
		, GETDATE() AS [DOS_TO]
	FROM
		[EDI].[EDIFile]
	
	WHERE
		[EDI].[EDIFile].[EDIFileID] IN
		(
			SELECT
				[Claim].[ClaimProcessEDIFile].[EDIFileID]
			FROM
				[Claim].[ClaimProcessEDIFile]
			INNER JOIN
				[Claim].[ClaimProcess]
			ON
				[Claim].[ClaimProcess].[ClaimProcessID] = [Claim].[ClaimProcessEDIFile].[ClaimProcessID]
			INNER JOIN
				[Patient].[PatientVisit]
			ON
				[Patient].[PatientVisit].[PatientVisitID] = [Claim].[ClaimProcess].[PatientVisitID]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[Patient].[ClinicID] = @ClinicID
		)
	AND
		[EDI].[EDIFile].[IsActive] = 1;	
		
		
		
	IF EXISTS (SELECT * FROM @TBL_ANS)
	BEGIN
		UPDATE
			@TBL_ANS
		SET
			[DOS_TO] = DATEADD(DAY, 3, [DOS_FROM]);
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT
			DATEADD(DAY, -3, GETDATE()) AS [DOS_FROM]
			, GETDATE() AS [DOS_TO];
	END
		
	SELECT * FROM @TBL_ANS;
		
	-- EXEC [EDI].[usp_GetDate_EDIFile] @ClinicID = 2, @ClaimStatusID = 1
END




GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_Credential]    Script Date: 05/13/2013 11:11:05 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetAutoComplete_Credential]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetAutoComplete_Credential]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetAutoComplete_Credential]    Script Date: 05/13/2013 11:11:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Billing].[usp_GetAutoComplete_Credential] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Billing].[Credential].[CredentialName] + ' [' +[Billing].[Credential].[CredentialCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[Credential]
		WHERE
			[Billing].[Credential].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Billing].[Credential].[CredentialName] + ' [' +[Billing].[Credential].[CredentialCode] + ']') AS [NAME_CODE]
		FROM
			[Billing].[Credential]
		WHERE
			([Billing].[Credential].[CredentialName] + ' [' +[Billing].[Credential].[CredentialCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Billing].[Credential].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[Credential].[CredentialName] + ' [' +[Billing].[Credential].[CredentialCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[Credential]
			WHERE
				[Billing].[Credential].[CredentialCode] LIKE @stats ESCAPE '\'
			AND
				[Billing].[Credential].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Billing].[Credential].[CredentialName] + ' [' +[Billing].[Credential].[CredentialCode] + ']') AS [NAME_CODE]
			FROM
				[Billing].[Credential]
			WHERE
				([Billing].[Credential].[CredentialName] + ' [' +[Billing].[Credential].[CredentialCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Billing].[Credential].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Billing].[usp_GetAutoComplete_Credential] 'I'
	---- EXEC [Billing].[usp_GetAutoComplete_Credential] '00'
	
	
	
END







GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Credential]    Script Date: 05/13/2013 11:12:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetIDAutoComplete_Credential]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetIDAutoComplete_Credential]
GO



/****** Object:  StoredProcedure [Billing].[usp_GetIDAutoComplete_Credential]    Script Date: 05/13/2013 11:12:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Billing].[usp_GetIDAutoComplete_Credential] 
	@CredentialCode	NVARCHAR(17)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [CredentialID] TINYINT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Billing].[Credential].[CredentialID]
	FROM
		[Billing].[Credential]
	WHERE
		@CredentialCode = [Billing].[Credential].[CredentialCode]
	AND
		[Billing].[Credential].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Billing].[usp_GetIDAutoComplete_Credential] 'D.O.'
	
END






GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_Insert_PatientVisit]    Script Date: 07/06/2013 14:13:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_Insert_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_Insert_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_Insert_PatientVisit]    Script Date: 07/06/2013 14:13:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Inserts the record into the table without repeatation

CREATE PROCEDURE [Patient].[usp_Insert_PatientVisit]
	@ClinicID INT
	, @PatientID BIGINT
	, @DOS DATE
	, @Comment NVARCHAR(4000)
	, @CurrentModificationBy BIGINT
	, @PatientVisitID BIGINT OUTPUT
	, @FACILITY_TYPE_OFFICE_ID TINYINT
	, @FACILITY_TYPE_INPATIENT_HOSPITAL_ID TINYINT
AS
BEGIN
	SET NOCOUNT ON;
	
	BEGIN TRY
		DECLARE @CurrentModificationOn DATETIME;
		SELECT @CurrentModificationOn = GETDATE();
		
		DECLARE @PatientHospitalizationID BIGINT;		
		SELECT @PatientHospitalizationID = [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NULL AND [Patient].[PatientHospitalization].[IsActive] = 1;
		
		IF @PatientHospitalizationID IS NOT NULL AND @PatientHospitalizationID > 0
		BEGIN
			IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID AND [Patient].[PatientHospitalization].[AdmittedOn] <= @DOS)
			BEGIN
				SELECT @PatientVisitID = -16;
			END
			ELSE
			BEGIN
				SELECT @PatientHospitalizationID = NULL;
			END
		END
		
		IF @PatientVisitID > -1
		BEGIN
			SELECT @PatientHospitalizationID = [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NOT NULL AND (@DOS BETWEEN [Patient].[PatientHospitalization].[AdmittedOn] AND [Patient].[PatientHospitalization].[DischargedOn]) AND [Patient].[PatientHospitalization].[IsActive] = 1;
			
			DECLARE @IllnessIndicatorID TINYINT;
			DECLARE @IllnessIndicatorDate DATE;
			DECLARE @FacilityTypeID TINYINT;
			DECLARE @FacilityDoneID INT;
			DECLARE @PrimaryClaimDiagnosisID BIGINT;
			DECLARE @DoctorNoteRelPath NVARCHAR(350);
			DECLARE @SuperBillRelPath NVARCHAR(350);
			DECLARE @PatientVisitDesc NVARCHAR(150);
			DECLARE @ClaimStatusID TINYINT;
			DECLARE @AssignedTo INT;
			DECLARE @TargetBAUserID INT;
			DECLARE @TargetQAUserID INT;
			DECLARE @TargetEAUserID INT;
			DECLARE @PatientVisitComplexity TINYINT;
			
			IF @PatientHospitalizationID IS NOT NULL AND @PatientHospitalizationID > 0
				BEGIN 
					SELECT @FacilityTypeID = @FACILITY_TYPE_INPATIENT_HOSPITAL_ID
				END
			ELSE 
				BEGIN
					SELECT @FacilityTypeID = @FACILITY_TYPE_OFFICE_ID;
				END	
			SELECT TOP 1 @IllnessIndicatorID = [Diagnosis].[IllnessIndicator].[IllnessIndicatorID] FROM [Diagnosis].[IllnessIndicator] WHERE [Diagnosis].[IllnessIndicator].[IsActive] = 1 ORDER BY [IllnessIndicator].[IllnessIndicatorID] ASC;
			SELECT @PatientVisitComplexity = [Billing].[Clinic].[PatientVisitComplexity] FROM [Billing].[Clinic] WHERE [Billing].[Clinic].[ClinicID] = @ClinicID AND [Billing].[Clinic].[IsActive] = 1
			
			-- HARD CODED
			SELECT @IllnessIndicatorDate = @DOS;
			SELECT @FacilityDoneID = NULL;
			SELECT @PrimaryClaimDiagnosisID = NULL;
			SELECT @DoctorNoteRelPath = NULL;
			SELECT @SuperBillRelPath = NULL;
			SELECT @PatientVisitDesc = NULL;
			SELECT @ClaimStatusID = 1;
			SELECT @AssignedTo = NULL;
			SELECT @TargetBAUserID = NULL;
			SELECT @TargetQAUserID = NULL;
			SELECT @TargetEAUserID = NULL;
			
			SELECT @PatientVisitID = [Patient].[ufn_IsExists_PatientVisit] (@PatientID, @PatientHospitalizationID, @DOS, @IllnessIndicatorID, @IllnessIndicatorDate, @FacilityTypeID, @FacilityDoneID, @PrimaryClaimDiagnosisID, @DoctorNoteRelPath, @SuperBillRelPath, @PatientVisitDesc, @ClaimStatusID, @AssignedTo, @TargetBAUserID, @TargetQAUserID, @TargetEAUserID, @PatientVisitComplexity, @Comment, 0);
			
			IF @PatientVisitID = 0
			BEGIN
				INSERT INTO [Patient].[PatientVisit]
				(
					[PatientID]
					, [PatientHospitalizationID]
					, [DOS]
					, [IllnessIndicatorID]
					, [IllnessIndicatorDate]
					, [FacilityTypeID]
					, [FacilityDoneID]
					, [PrimaryClaimDiagnosisID]
					, [DoctorNoteRelPath]
					, [SuperBillRelPath]
					, [PatientVisitDesc]
					, [ClaimStatusID]
					, [AssignedTo]
					, [TargetBAUserID]
					, [TargetQAUserID]
					, [TargetEAUserID]
					, [PatientVisitComplexity]
					, [Comment]
					, [CreatedBy]
					, [CreatedOn]
					, [LastModifiedBy]
					, [LastModifiedOn]
					, [IsActive]
				)
				VALUES
				(
					@PatientID
					, @PatientHospitalizationID
					, @DOS
					, @IllnessIndicatorID
					, @IllnessIndicatorDate
					, @FacilityTypeID
					, @FacilityDoneID
					, @PrimaryClaimDiagnosisID
					, @DoctorNoteRelPath
					, @SuperBillRelPath
					, @PatientVisitDesc
					, @ClaimStatusID
					, @AssignedTo
					, @TargetBAUserID
					, @TargetQAUserID
					, @TargetEAUserID
					, @PatientVisitComplexity
					, @Comment
					, @CurrentModificationBy
					, @CurrentModificationOn
					, @CurrentModificationBy
					, @CurrentModificationOn
					, 1
				);
				
				SELECT @PatientVisitID = MAX([Patient].[PatientVisit].[PatientVisitID]) FROM [Patient].[PatientVisit];
			END
			ELSE
			BEGIN			
				SELECT @PatientVisitID = -1;
			END
		END	
	END TRY
	BEGIN CATCH
		-- ERROR CATCHING - STARTS
		BEGIN TRY
			EXEC [Audit].[usp_Insert_ErrorLog];
			SELECT @PatientVisitID = (MAX([Audit].[ErrorLog].[ErrorLogID]) * -1) FROM [Audit].[ErrorLog];
		END TRY
		BEGIN CATCH
			RAISERROR('Error in [Audit].[usp_Insert_ErrorLog]', -1, -1);
		END CATCH
		-- ERROR CATCHING - ENDS
	END CATCH	
END



GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_Diagnosis]    Script Date: 06/12/2013 21:03:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetAutoComplete_Diagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetAutoComplete_Diagnosis]
GO


/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_Diagnosis]    Script Date: 06/12/2013 21:03:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Diagnosis].[usp_GetAutoComplete_Diagnosis] 
	@ClinicID INT
	, @DescType NVARCHAR(15) = NULL
	, @stats NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(400) NOT NULL);
	
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc'))
	BEGIN
		SELECT @DescType = 'ShortDesc';
	END
		
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	DECLARE @ICD_FORMAT TINYINT;
		
	SELECT 
		@ICD_FORMAT = [Billing].[Clinic].[ICDFormat] 
	FROM
		[Billing].[Clinic]
	WHERE 
		[Billing].[Clinic].[ClinicID] = @ClinicID;
	
	IF @DescType = 'ShortDesc'		-- ShortDesc STARTS
	BEGIN
		IF LEN(@stats) = 0 -- Space
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50
				([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				[Diagnosis].[Diagnosis].[ShortDesc] IS NOT NULL
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN	-- user enter ky
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN	-- look in code
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN -- anywhere
				SELECT @stats = '%' + @stats;
				
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				WHERE
					[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
				AND
					[Diagnosis].[Diagnosis].[ShortDesc] IS NOT NULL
				AND
					([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
			
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN -- anywhere other group - medium
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					WHERE
						[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
					AND
						[Diagnosis].[Diagnosis].[MediumDesc] IS NOT NULL
					AND
						([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
			
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN	-- anywhere other group - Long
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (L)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						WHERE
							[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
						AND
							[Diagnosis].[Diagnosis].[LongDesc] IS NOT NULL
						AND
							([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (L)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
			
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN	-- anywhere other group - Custom
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (C)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
							FROM
								[Diagnosis].[Diagnosis]
							WHERE
								[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
							AND
								[Diagnosis].[Diagnosis].[CustomDesc] IS NOT NULL
							AND
								([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (C)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[Diagnosis].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END		-- ShortDesc ENDS
	ELSE IF @DescType = 'MediumDesc'		-- MediumDesc STARTS
	BEGIN
		IF LEN(@stats) = 0 -- Space
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50
				([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				[Diagnosis].[Diagnosis].[MediumDesc] IS NOT NULL
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN	-- user enter ky
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN	-- look in code
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN -- anywhere
				SELECT @stats = '%' + @stats;
				
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				WHERE
					[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
				AND
					[Diagnosis].[Diagnosis].[MediumDesc] IS NOT NULL
				AND
					([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
			
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN	-- anywhere other group - Long
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (L)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					WHERE
						[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
					AND
						[Diagnosis].[Diagnosis].[LongDesc] IS NOT NULL
					AND
						([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (L)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
		
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN	-- anywhere other group - Custom
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (C)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						WHERE
							[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
						AND
							[Diagnosis].[Diagnosis].[CustomDesc] IS NOT NULL
						AND
							([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (C)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
						
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN -- anywhere other group - Short
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
							FROM
								[Diagnosis].[Diagnosis]
							WHERE
								[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
							AND
								[Diagnosis].[Diagnosis].[ShortDesc] IS NOT NULL
							AND
								([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[Diagnosis].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END		-- MediumDesc ENDS
	ELSE IF @DescType = 'LongDesc'		-- LongDesc STARTS
	BEGIN
		IF LEN(@stats) = 0 -- Space
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50
				([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				[Diagnosis].[Diagnosis].[LongDesc] IS NOT NULL
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN	-- user enter ky
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN	-- look in code
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN -- anywhere
				SELECT @stats = '%' + @stats;
				
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				WHERE
					[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
				AND
					[Diagnosis].[Diagnosis].[LongDesc] IS NOT NULL
				AND
					([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
		
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN	-- anywhere other group - Custom
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (C)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					WHERE
						[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
					AND
						[Diagnosis].[Diagnosis].[CustomDesc] IS NOT NULL
					AND
						([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (C)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
					
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN -- anywhere other group - Short
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						WHERE
							[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
						AND
							[Diagnosis].[Diagnosis].[ShortDesc] IS NOT NULL
						AND
							([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
						
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN -- anywhere other group - medium
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
							FROM
								[Diagnosis].[Diagnosis]
							WHERE
								[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
							AND
								[Diagnosis].[Diagnosis].[MediumDesc] IS NOT NULL
							AND
								([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[Diagnosis].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END		-- LongDesc ENDS
	ELSE IF @DescType = 'CustomDesc'		-- CustomDesc STARTS
	BEGIN
		IF LEN(@stats) = 0 -- Space
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 50
				([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				[Diagnosis].[Diagnosis].[CustomDesc] IS NOT NULL
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		ELSE
		BEGIN	-- user enter ky
			SELECT @stats = REPLACE(@stats, '[', '\[');
			SELECT @stats = @stats + '%';
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN	-- look in code
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				(ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[Diagnosis]
			WHERE
				[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
			AND
				CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			
			IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
			BEGIN -- anywhere
				SELECT @stats = '%' + @stats;
				
				INSERT INTO
					@TBL_ANS
				SELECT TOP 10 
					([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
				FROM
					[Diagnosis].[Diagnosis]
				WHERE
					[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
				AND
					[Diagnosis].[Diagnosis].[CustomDesc] IS NOT NULL
				AND
					([Diagnosis].[Diagnosis].[CustomDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
				ORDER BY 
					[NAME_CODE] 
				ASC;
					
				IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
				BEGIN -- anywhere other group - Short
					INSERT INTO
						@TBL_ANS
					SELECT TOP 10 
						([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (S)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
					FROM
						[Diagnosis].[Diagnosis]
					WHERE
						[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
					AND
						[Diagnosis].[Diagnosis].[ShortDesc] IS NOT NULL
					AND
						([Diagnosis].[Diagnosis].[ShortDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (S)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
					AND
						[Diagnosis].[Diagnosis].[IsActive] = 1
					ORDER BY 
						[NAME_CODE] 
					ASC;
					
					IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
					BEGIN -- anywhere other group - medium
						INSERT INTO
							@TBL_ANS
						SELECT TOP 10 
							([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
						FROM
							[Diagnosis].[Diagnosis]
						WHERE
							[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
						AND
							[Diagnosis].[Diagnosis].[MediumDesc] IS NOT NULL
						AND
							([Diagnosis].[Diagnosis].[MediumDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (M)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
						AND
							[Diagnosis].[Diagnosis].[IsActive] = 1
						ORDER BY 
							[NAME_CODE] 
						ASC;
						
						IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
						BEGIN	-- anywhere other group - Long
							INSERT INTO
								@TBL_ANS
							SELECT TOP 10 
								([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (L)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
							FROM
								[Diagnosis].[Diagnosis]
							WHERE
								[Diagnosis].[Diagnosis].[ICDFormat] = @ICD_FORMAT
							AND
								[Diagnosis].[Diagnosis].[LongDesc] IS NOT NULL
							AND
								([Diagnosis].[Diagnosis].[LongDesc] + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' (L)' + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') LIKE @stats ESCAPE '\'
							AND
								[Diagnosis].[Diagnosis].[IsActive] = 1
							ORDER BY 
								[NAME_CODE] 
							ASC;
						END
					END
				END
			END
		END
	END		-- CustomDesc ENDS
	
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Diagnosis].[usp_GetAutoComplete_Diagnosis] @ClinicID = 1, @stats = 'chronic'
	-- EXEC [Diagnosis].[usp_GetAutoComplete_Diagnosis] @ClinicID = 1, @stats = 'chronic air'
END


GO



-----------------------------------------------------------------------
	
/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Credential]    Script Date: 05/14/2013 15:37:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearch_Credential]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearch_Credential]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearch_Credential]    Script Date: 05/14/2013 15:37:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Billing].[usp_GetBySearch_Credential]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[Credential].[CredentialID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'CredentialName' AND @OrderByDirection = 'A' THEN [Billing].[Credential].[CredentialName] END ASC,
				CASE WHEN @orderByField = 'CredentialName' AND @orderByDirection = 'D' THEN [Billing].[Credential].[CredentialName] END DESC,
				
				CASE WHEN @OrderByField = 'CredentialCode' AND @OrderByDirection = 'A' THEN [Billing].[Credential].[CredentialCode] END ASC,
				CASE WHEN @orderByField = 'CredentialCode' AND @orderByDirection = 'D' THEN [Billing].[Credential].[CredentialCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[Credential].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[Credential].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Billing].[Credential]
	WHERE
		[Billing].[Credential].[CredentialName] LIKE @StartBy + '%' 
	AND
	(
		[Billing].[Credential].[CredentialName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Credential].[CredentialCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Billing].[Credential].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Credential].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Credential].[CredentialID], [Credential].[CredentialCode], [Credential].[CredentialName], [Credential].[IsActive]
	FROM
		[Credential] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Credential].[CredentialID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_Credential] @SearchName  = '45'
	-- EXEC [Billing].[usp_GetBySearch_Credential] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_DiagnosisGroup]    Script Date: 05/17/2013 14:18:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetByAZ_DiagnosisGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetByAZ_DiagnosisGroup]
GO



/****** Object:  StoredProcedure [Diagnosis].[usp_GetByAZ_DiagnosisGroup]    Script Date: 05/17/2013 14:18:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Diagnosis].[usp_GetByAZ_DiagnosisGroup] 
	@SearchName NVARCHAR(150) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT Diagnosisments.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[DiagnosisName] [nvarchar](150) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]
	FROM
		[Diagnosis].[DiagnosisGroup]
	WHERE
	(
		[Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] LIKE '%' + @SearchName + '%' 		
	)
	AND
		[Diagnosis].[DiagnosisGroup].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[DiagnosisGroup].[IsActive] ELSE @IsActive END;
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[DiagnosisName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Diagnosis].[usp_GetByAZ_Diagnosis] 
END






GO



-----------------------------------------------------------------------



/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_Diagnosis]    Script Date: 05/30/2013 16:10:29 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetBySearch_Diagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetBySearch_Diagnosis]
GO


/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_Diagnosis]    Script Date: 05/30/2013 16:10:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Diagnosis].[usp_GetBySearch_Diagnosis]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Diagnosis].[Diagnosis].[DiagnosisID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'Description' AND @OrderByDirection = 'A' THEN ISNULL([Diagnosis].[Diagnosis].[ShortDesc],ISNULL([Diagnosis].[Diagnosis].[LongDesc],ISNULL([Diagnosis].[Diagnosis].[CustomDesc],ISNULL([Diagnosis].[Diagnosis].[MediumDesc],'NO DESC'))))  END ASC,
				CASE WHEN @orderByField = 'Description' AND @orderByDirection = 'D' THEN ISNULL([Diagnosis].[Diagnosis].[ShortDesc],ISNULL([Diagnosis].[Diagnosis].[LongDesc],ISNULL([Diagnosis].[Diagnosis].[CustomDesc],ISNULL([Diagnosis].[Diagnosis].[MediumDesc],'NO DESC')))) END DESC,
						
				CASE WHEN @OrderByField = 'DiagnosisCode' AND @OrderByDirection = 'A' THEN [Diagnosis].[Diagnosis].[DiagnosisCode] END ASC,
				CASE WHEN @orderByField = 'DiagnosisCode' AND @orderByDirection = 'D' THEN [Diagnosis].[Diagnosis].[DiagnosisCode] END DESC,
				
				CASE WHEN @OrderByField = 'ICDFormat' AND @OrderByDirection = 'A' THEN [Diagnosis].[Diagnosis].[ICDFormat] END ASC,
				CASE WHEN @orderByField = 'ICDFormat' AND @orderByDirection = 'D' THEN [Diagnosis].[Diagnosis].[ICDFormat] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Diagnosis].[Diagnosis].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Diagnosis].[Diagnosis].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Diagnosis].[Diagnosis]
	WHERE
	
		ISNULL([Diagnosis].[Diagnosis].[ShortDesc],ISNULL([Diagnosis].[Diagnosis].[LongDesc],ISNULL([Diagnosis].[Diagnosis].[CustomDesc],ISNULL([Diagnosis].[Diagnosis].[MediumDesc],'NO DESC'))))  LIKE @StartBy + '%' 
		
		    
	AND
	(
		ISNULL([Diagnosis].[Diagnosis].[ShortDesc],ISNULL([Diagnosis].[Diagnosis].[LongDesc],ISNULL([Diagnosis].[Diagnosis].[CustomDesc],ISNULL([Diagnosis].[Diagnosis].[MediumDesc],'NO DESC')))) LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[Diagnosis].[DiagnosisCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Diagnosis].[Diagnosis].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[Diagnosis].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Diagnosis].[DiagnosisID]
	  , [Diagnosis].[DiagnosisCode]
	  , ISNULL([Diagnosis].[Diagnosis].[ShortDesc],ISNULL([Diagnosis].[Diagnosis].[LongDesc],ISNULL([Diagnosis].[Diagnosis].[CustomDesc],ISNULL([Diagnosis].[Diagnosis].[MediumDesc],'NO DESC')))) as Description
	  ,[Diagnosis].[ICDFormat],[Diagnosis].[IsActive]
	FROM
		[Diagnosis] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Diagnosis].[DiagnosisID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Diagnosis].[usp_GetBySearch_Diagnosis] @SearchName  = '36'
	-- EXEC [Diagnosis].[usp_GetBySearch_Diagnosis] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO












-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetPrimeDxProc_ClaimDiagnosisCPT]    Script Date: 05/15/2013 14:55:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetPrimeDxProc_ClaimDiagnosisCPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetPrimeDxProc_ClaimDiagnosisCPT]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetPrimeDxProc_ClaimDiagnosisCPT]    Script Date: 05/15/2013 14:55:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Claim].[usp_GetPrimeDxProc_ClaimDiagnosisCPT] 
	@ClaimDiagnosisID BIGINT
	, @PatientVisitID BIGINT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [HAS_PROCEDURE] BIT NOT NULL
	);

		
	DECLARE @TBL_TMP TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [ClaimDiagnosisCPTID] BIGINT NOT NULL);

	INSERT INTO 
		@TBL_TMP 
	SELECT 
		[Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID]
	FROM 
		[Claim].[ClaimDiagnosisCPT]
	INNER JOIN
		[Claim].[ClaimDiagnosis]
	ON
		[Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
	WHERE 
		[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
	AND
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = @ClaimDiagnosisID
	AND
		[Claim].[ClaimDiagnosis].[IsActive] = 1
	AND
		[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
	
			
	IF ((SELECT COUNT ([T].[ID]) FROM @TBL_TMP T) > 0)
	BEGIN
		INSERT INTO
			@TBL_RES
		SELECT CAST('1' AS BIT) AS [HAS_PROCEDURE];
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_RES
		SELECT CAST('0' AS BIT) AS [HAS_PROCEDURE];
	END
	
	SELECT * FROM @TBL_RES;
	
	-- EXEC [Claim].[usp_GetPrimeDxProc_ClaimDiagnosisCPT] @ClaimDiagnosisID= 17966,@PatientVisitID=4333
END





GO



-----------------------------------------------------------------------
	

/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_DiagnosisGroup]    Script Date: 05/15/2013 17:56:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetAutoComplete_DiagnosisGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetAutoComplete_DiagnosisGroup]
GO


/****** Object:  StoredProcedure [Diagnosis].[usp_GetAutoComplete_DiagnosisGroup]    Script Date: 05/15/2013 17:56:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Diagnosis].[usp_GetAutoComplete_DiagnosisGroup] 
	@stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] + ' [' +[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] + ']') AS [NAME_CODE]
		FROM
			[Diagnosis].[DiagnosisGroup]
		WHERE
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] + ' [' +[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] + ']') AS [NAME_CODE]
		FROM
			[Diagnosis].[DiagnosisGroup]
		WHERE
			([Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] + ' [' +[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] + ' [' +[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[DiagnosisGroup]
			WHERE
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] + ' [' +[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] + ']') AS [NAME_CODE]
			FROM
				[Diagnosis].[DiagnosisGroup]
			WHERE
				([Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] + ' [' +[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;
	---- EXEC [Diagnosis].[usp_GetAutoComplete_DiagnosisGroup] 'I'
	---- EXEC [Diagnosis].[usp_GetAutoComplete_DiagnosisGroup] '00'
	
	
	
END








GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_DiagnosisGroup]    Script Date: 05/15/2013 17:57:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetIDAutoComplete_DiagnosisGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_DiagnosisGroup]
GO



/****** Object:  StoredProcedure [Diagnosis].[usp_GetIDAutoComplete_DiagnosisGroup]    Script Date: 05/15/2013 17:57:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Diagnosis].[usp_GetIDAutoComplete_DiagnosisGroup] 
	@DiagnosisGroupCode	NVARCHAR(17)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @TBL_RES TABLE
	(
		[ID] TINYINT NOT NULL IDENTITY (1, 1)
		, [DiagnosisGroupID] TINYINT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID]
	FROM
		[Diagnosis].[DiagnosisGroup]
	WHERE
		@DiagnosisGroupCode = [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode]
	AND
		[Diagnosis].[DiagnosisGroup].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Diagnosis].[usp_GetIDAutoComplete_DiagnosisGroup] 'D.O.'
	
END







GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByUserID_PatientVisit]    Script Date: 05/18/2013 12:29:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByUserID_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByUserID_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetByUserID_PatientVisit]    Script Date: 05/18/2013 12:29:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Patient].[usp_GetByUserID_PatientVisit] 
   @RoleID tinyint
	,@UserID BIGINT = NULL
	, @IsActive	BIT = NULL
AS

IF @RoleID = 5

BEGIN
	SET NOCOUNT ON;

	SELECT
		[Patient].[PatientVisit].*
	FROM
		[Patient].[PatientVisit]
	WHERE
		@UserID = [Patient].[PatientVisit].[TargetBAUserID]
	AND
		[Patient].[PatientVisit].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientVisit].[IsActive] ELSE @IsActive END;
			
END	

ELSE IF @RoleID = 4	

BEGIN
	SET NOCOUNT ON;

	SELECT
		[Patient].[PatientVisit].*
	FROM
		[Patient].[PatientVisit]
	WHERE
		@UserID = [Patient].[PatientVisit].[TargetQAUserID]
	AND
		[Patient].[PatientVisit].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientVisit].[IsActive] ELSE @IsActive END;
			
END

ELSE IF @RoleID = 3

BEGIN
	SET NOCOUNT ON;

	SELECT
		[Patient].[PatientVisit].*
	FROM
		[Patient].[PatientVisit]
	WHERE
		@UserID = [Patient].[PatientVisit].[TargetEAUserID]
	AND
		[Patient].[PatientVisit].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientVisit].[IsActive] ELSE @IsActive END;
			

	-- EXEC [Patient].[usp_GetByUserID_PatientVisit] @RoleID = 5 , @UserID = 14
	-- EXEC [Patient].[usp_GetByUserID_PatientVisit] 1, 1
	-- EXEC [Patient].[usp_GetByUserID_PatientVisit] 1, 0
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT]    Script Date: 05/16/2013 21:28:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT]    Script Date: 05/16/2013 21:28:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT] 
	@PatientVisitID BIGINT
	, @IsActive BIT 
	, @DescType NVARCHAR(15) = NULL
	
		AS
		BEGIN
			SET NOCOUNT ON;
			
			DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [CLAIM_DIAGNOSIS_CPT_ID] BIGINT NULL
		, [DX_NAME_CODE] NVARCHAR(400) NOT NULL
		, [DX_CODE] NVARCHAR(9) NOT NULL
		, [CPT_NAME_CODE] NVARCHAR(400) NULL
		, [CPT_CODE] NVARCHAR(9) NULL
		, [FACILITY_TYPE_NAME_CODE] NVARCHAR(400) NULL
		, [FACILITY_TYPE_CODE] NVARCHAR(9) NULL
		, [UNIT] INT NULL
		, [CHARGE_PER_UNIT] DECIMAL(9,2) NULL
		, [CPT_DOS] DATE NULL
		, [MODI1_NAME_CODE] NVARCHAR(165) NULL
		, [MODI1_CODE] NVARCHAR(9) NULL
		, [MODI2_NAME_CODE] NVARCHAR(165) NULL
		, [MODI2_CODE] NVARCHAR(9) NULL
		, [MODI3_NAME_CODE] NVARCHAR(165) NULL
		, [MODI3_CODE] NVARCHAR(9) NULL
		, [MODI4_NAME_CODE] NVARCHAR(165) NULL
		, [MODI4_CODE] NVARCHAR(9) NULL
	);
	
			IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc')) OR (@DescType = 'ShortDesc')
			BEGIN
				INSERT INTO
				@TBL_ANS
				(
					 [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
				SELECT
					 [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
					, (ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [DX_NAME_CODE]
					, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
					, (ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
					, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
					, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
					, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
					, [Claim].[ClaimDiagnosisCPT].[UNIT]
					, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
					, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
				FROM
					[Claim].[ClaimDiagnosis]
				INNER JOIN
					[Diagnosis].[Diagnosis]
				ON
					[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosisCPT]
				ON
					[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
				AND
					[Claim].[ClaimDiagnosisCPT].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPT].[IsActive] ELSE @IsActive END
				LEFT JOIN
					[Diagnosis].[CPT]
				ON
					[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				LEFT JOIN
					[Billing].[FacilityType]
				ON 
					[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
				AND
					[Billing].[FacilityType].[IsActive] = 1
				WHERE
					 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1;
			END
			IF (@DescType = 'MediumDesc')
			BEGIN
				INSERT INTO
				@TBL_ANS
				(
					 [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
				SELECT
					[Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
					, (ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [DX_NAME_CODE]
					, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
					, (ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
					, [Diagnosis].[CPT].[CPTCode] AS[CPT_CODE]
					, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
					, [Billing].[FacilityType].[FacilityTypeCode]AS [FACILITY_TYPE_CODE]
					, [Claim].[ClaimDiagnosisCPT].[UNIT]
					, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
					, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
				FROM
					[Claim].[ClaimDiagnosis]
				INNER JOIN
					[Diagnosis].[Diagnosis]
				ON
					[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosisCPT]
				ON
					[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
				AND
					[Claim].[ClaimDiagnosisCPT].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPT].[IsActive] ELSE @IsActive END
				LEFT JOIN
					[Diagnosis].[CPT]
				ON
					[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				LEFT JOIN
					[Billing].[FacilityType]
				ON 
					[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
				AND
					[Billing].[FacilityType].[IsActive] = 1
				WHERE
					 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1;
			END	
			IF (@DescType = 'LongDesc')
			BEGIN
				INSERT INTO
				@TBL_ANS
				(
					 [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
				SELECT
					[Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
					, (ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [DX_NAME_CODE]
					, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
					, (ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
					, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
					, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
					, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
					, [Claim].[ClaimDiagnosisCPT].[UNIT]
					, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
					, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
				FROM
					[Claim].[ClaimDiagnosis]
				INNER JOIN
					[Diagnosis].[Diagnosis]
				ON
					[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosisCPT]
				ON
					[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
				AND
					[Claim].[ClaimDiagnosisCPT].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPT].[IsActive] ELSE @IsActive END
				LEFT JOIN
					[Diagnosis].[CPT]
				ON
					[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				LEFT JOIN
					[Billing].[FacilityType]
				ON 
					[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
				AND
					[Billing].[FacilityType].[IsActive] = 1
				WHERE
					 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
			END	
			IF (@DescType = 'CustomDesc')
			BEGIN
				INSERT INTO
				@TBL_ANS
				(
					 [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
				SELECT
					[Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
					, (ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [DX_NAME_CODE]
					, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
					, (ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
					, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
					, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
					, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
					, [Claim].[ClaimDiagnosisCPT].[UNIT]
					, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
					, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
				FROM
					[Claim].[ClaimDiagnosis]
				INNER JOIN
					[Diagnosis].[Diagnosis]
				ON
					[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
				LEFT JOIN
					[Diagnosis].[DiagnosisGroup]
				ON
					[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
				AND
					[Diagnosis].[DiagnosisGroup].[IsActive] = 1
				INNER JOIN
					[Claim].[ClaimDiagnosisCPT]
				ON
					[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
				AND
					[Claim].[ClaimDiagnosisCPT].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPT].[IsActive] ELSE @IsActive END
				LEFT JOIN
					[Diagnosis].[CPT]
				ON
					[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
				AND
					[Diagnosis].[CPT].[IsActive] = 1
				LEFT JOIN
					[Billing].[FacilityType]
				ON 
					[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
				AND
					[Billing].[FacilityType].[IsActive] = 1
				WHERE
					 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
				AND
					[Diagnosis].[Diagnosis].[IsActive] = 1
			END	
	
	-- MODIFIERS
	
	DECLARE CUR_TBL CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [CLAIM_DIAGNOSIS_CPT_ID] FROM @TBL_ANS;
	DECLARE @CLAIM_DIAGNOSIS_CPT_ID BIGINT;
	
	OPEN CUR_TBL;
	
	FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @MODIFIER_NAME NVARCHAR(165);
		DECLARE @MODIFIER_CODE NVARCHAR(9);
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPTModifier].[IsActive] ELSE @IsActive END;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI1_NAME_CODE] = @MODIFIER_NAME
			, [MODI1_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 2
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPTModifier].[IsActive] ELSE @IsActive END;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI2_NAME_CODE] = @MODIFIER_NAME
			, [MODI2_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 3
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPTModifier].[IsActive] ELSE @IsActive END;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI3_NAME_CODE] = @MODIFIER_NAME
			, [MODI3_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 4
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosisCPTModifier].[IsActive] ELSE @IsActive END;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI4_NAME_CODE] = @MODIFIER_NAME
			, [MODI4_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
	
		FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	END
	
	CLOSE CUR_TBL;
	DEALLOCATE CUR_TBL;
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;
			
	-- EXEC [Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT] @PatientVisitID = 4333, @IsActive=0, @DescType = 'CustomDesc'
	-- EXEC [Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT] @PatientVisitID = 4333, @IsActive=0
	-- EXEC [Claim].[usp_GetBlockedCpt_ClaimDiagnosisCPT] @PatientVisitID = 4333, @IsActive=1
END

GO

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_Update_PatientVisit]    Script Date: 07/06/2013 14:13:16 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_Update_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_Update_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_Update_PatientVisit]    Script Date: 07/06/2013 14:13:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--Description:This Stored Procedure is used to UPDATE the PatientVisit in the database.
	 
CREATE PROCEDURE [Patient].[usp_Update_PatientVisit]
	@PatientID BIGINT
	, @DOS DATE
	, @IllnessIndicatorID TINYINT
	, @IllnessIndicatorDate DATE
	, @FacilityTypeID TINYINT
	, @FacilityDoneID INT = NULL
	, @PrimaryClaimDiagnosisID BIGINT = NULL
	, @DoctorNoteRelPath NVARCHAR(350) = NULL
	, @SuperBillRelPath NVARCHAR(350) = NULL
	, @PatientVisitDesc NVARCHAR(150) = NULL
	, @StatusIDs NVARCHAR(100)
	, @AssignedTo INT = NULL
	, @TargetBAUserID INT = NULL
	, @TargetQAUserID INT = NULL
	, @TargetEAUserID INT = NULL
	, @PatientVisitComplexity TINYINT
	, @Comment NVARCHAR(4000)
	, @IsActive BIT
	, @LastModifiedBy BIGINT
	, @LastModifiedOn DATETIME
	, @CurrentModificationBy BIGINT
	, @PatientVisitID BIGINT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
	BEGIN TRY
		DECLARE @PatientHospitalizationID BIGINT;		
		SELECT @PatientHospitalizationID = [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NULL AND [Patient].[PatientHospitalization].[IsActive] = 1;
		
		IF @PatientHospitalizationID IS NOT NULL AND @PatientHospitalizationID > 0
		BEGIN
			IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID AND [Patient].[PatientHospitalization].[AdmittedOn] <= @DOS)
			BEGIN
				SELECT @PatientVisitID = -16;
			END
			ELSE
			BEGIN
				SELECT @PatientHospitalizationID = NULL;
			END
		END
		
		IF @PatientVisitID > -1
		BEGIN
		
			DECLARE @CurrentModificationOn DATETIME;
			SELECT @CurrentModificationOn = GETDATE();
			
			DECLARE CUR_STS CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ',');
			
			DECLARE @ClaimStatusID_STR NVARCHAR(100);
			
			OPEN CUR_STS;
			
			FETCH NEXT FROM CUR_STS INTO @ClaimStatusID_STR;
			
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @ClaimStatusID TINYINT;
				SELECT @ClaimStatusID = CAST(@ClaimStatusID_STR AS TINYINT);
				
				DECLARE @PatientVisitID_PREV BIGINT;
				SELECT @PatientVisitID_PREV = [Patient].[ufn_IsExists_PatientVisit] (@PatientID, @PatientHospitalizationID, @DOS, @IllnessIndicatorID, @IllnessIndicatorDate, @FacilityTypeID, @FacilityDoneID, @PrimaryClaimDiagnosisID, @DoctorNoteRelPath, @SuperBillRelPath, @PatientVisitDesc, @ClaimStatusID, @AssignedTo, @TargetBAUserID, @TargetQAUserID, @TargetEAUserID, @PatientVisitComplexity, @Comment, 1);

				DECLARE @IS_ACTIVE_PREV BIT;
			
				IF EXISTS(SELECT [Patient].[PatientVisit].[PatientVisitID] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID AND [Patient].[PatientVisit].[IsActive] = @IsActive)
				BEGIN
					SELECT @IS_ACTIVE_PREV = 1;
				END
				ELSE
				BEGIN
					SELECT @IS_ACTIVE_PREV = 0;
				END		

				IF ((@PatientVisitID_PREV = 0) OR (@IS_ACTIVE_PREV = 0))
				BEGIN
					DECLARE @LAST_MODIFIED_BY BIGINT;
					DECLARE @LAST_MODIFIED_ON DATETIME;
				
					SELECT 
						@LAST_MODIFIED_BY = [Patient].[PatientVisit].[LastModifiedBy]
						, @LAST_MODIFIED_ON =  [Patient].[PatientVisit].[LastModifiedOn]
					FROM 
						[Patient].[PatientVisit] WITH (NOLOCK)
					WHERE
						[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID;
					
					IF (@LAST_MODIFIED_BY = @LastModifiedBy) AND (DATEDIFF(MILLISECOND, @LAST_MODIFIED_ON, @LastModifiedOn) = 0)
					BEGIN
						-- VERIFY @ClaimStatusID STARTS
						
						DECLARE @ClaimStatusID_PREV TINYINT;
						SELECT @ClaimStatusID_PREV = [Patient].[PatientVisit].[ClaimStatusID] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID;
						
						IF @ClaimStatusID_PREV <> @ClaimStatusID
						BEGIN
							-- @ClaimStatusID CHANGED. SO CLAIM PROCESS INSERT REQUIRED
							
							DECLARE @ClaimStatusIDClaimProcess TINYINT;
							DECLARE @AssignedToClaimProcess INT = NULL;
							DECLARE @StatusStartDate DATETIME = NULL;
							DECLARE @StatusEndDate DATETIME;
							DECLARE @StartEndMins BIGINT;
							DECLARE @LogOutLogInMins BIGINT;
							DECLARE @LockUnLockMins BIGINT;
								
							IF EXISTS (SELECT [Claim].[ClaimProcess].[ClaimProcessID] FROM [Claim].[ClaimProcess] WHERE [Claim].[ClaimProcess].[PatientVisitID] = @PatientVisitID)
							BEGIN
								SELECT
									@StatusStartDate = MAX([Claim].[ClaimProcess].[StatusEndDate])
								FROM
									[Claim].[ClaimProcess]
								WHERE
									[Claim].[ClaimProcess].[PatientVisitID] = @PatientVisitID;
							END
							
							SELECT
								@ClaimStatusIDClaimProcess = [Patient].[PatientVisit].[ClaimStatusID]
								, @AssignedToClaimProcess = [Patient].[PatientVisit].[AssignedTo]
								, @StatusStartDate = CASE WHEN @StatusStartDate IS NULL THEN [Patient].[PatientVisit].[DOS] ELSE @StatusStartDate END
							FROM
								[Patient].[PatientVisit]
							WHERE
								[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID;
							
							SELECT @StatusEndDate = @CurrentModificationOn;
							
							SELECT @StartEndMins = DATEDIFF(MINUTE, @StatusStartDate, @StatusEndDate);
							
							IF @AssignedToClaimProcess IS NULL
							BEGIN
								SELECT @LogOutLogInMins = 0;
								SELECT @LockUnLockMins = 0;
							END
							ELSE
							BEGIN
								DECLARE @TBL_LOG_IN TABLE
								(
									[LOG_IN_LOG_OUT_ID] [BIGINT] NOT NULL,
									[LOG_IN_ON] [DATETIME] NOT NULL,
									[LOG_OUT_ON] [DATETIME] NOT NULL,
									[USED_DURATION_MINS] [BIGINT] NOT NULL
								);
								
								INSERT INTO
									@TBL_LOG_IN
								SELECT
									[Audit].[LogInLogOut].[LogInLogOutID] AS [LOG_IN_LOG_OUT_ID]
									, [Audit].[LogInLogOut].[LogInOn] AS [LOG_IN_ON]
									, ISNULL([Audit].[LogInLogOut].[LogOutOn], @StatusEndDate) AS [LOG_OUT_ON]
									, '0' AS [USED_DURATION_MINS]
								FROM
									[Audit].[LogInLogOut]
								WHERE
									[Audit].[LogInLogOut].[UserID] = @AssignedToClaimProcess
								AND
								(
									[Audit].[LogInLogOut].[LogInOn] BETWEEN @StatusStartDate AND @StatusEndDate
								OR
									[Audit].[LogInLogOut].[LogOutOn] BETWEEN @StatusStartDate AND @StatusEndDate
								);
								
								DECLARE @DT_MIN DATETIME;
								
								SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
								IF @DT_MIN IS NULL
								BEGIN
									SELECT @DT_MIN = @StatusStartDate;
								END
								
								IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
								BEGIN
									INSERT INTO
										@TBL_LOG_IN
									SELECT
										'-1' AS [LOG_IN_LOG_OUT_ID]
										, @StatusStartDate AS [LOG_IN_ON]
										, @StatusStartDate AS [LOG_OUT_ON]
										, '0' AS [USED_DURATION_MINS];
								END
								ELSE
								BEGIN
									UPDATE
										@TBL_LOG_IN
									SET
										[LOG_IN_ON] = @StatusStartDate
									WHERE
										[LOG_IN_LOG_OUT_ID] = 
										(
											SELECT
												MIN([LOG_IN_LOG_OUT_ID])
											FROM
												@TBL_LOG_IN
										);
								END
								
								DECLARE @DT_MAX DATETIME;
								
								SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
								IF @DT_MAX IS NULL
								BEGIN
									SELECT @DT_MAX = @StatusEndDate;
								END
								
								IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
								BEGIN
									INSERT INTO
										@TBL_LOG_IN
									SELECT
										'-1' AS [LOG_IN_LOG_OUT_ID]
										, @StatusEndDate AS [LOG_IN_ON]
										, @StatusEndDate AS [LOG_OUT_ON]
										, '0' AS [USED_DURATION_MINS];
								END
								ELSE
								BEGIN
									UPDATE
										@TBL_LOG_IN
									SET
										[LOG_OUT_ON] = @StatusEndDate
									WHERE
										[LOG_IN_LOG_OUT_ID] = 
										(
											SELECT
												MAX([LOG_IN_LOG_OUT_ID])
											FROM
												@TBL_LOG_IN
										);
								END
								
								UPDATE
									@TBL_LOG_IN
								SET
									[USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOG_IN_ON], [LOG_OUT_ON]);
								
								SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
								IF @DT_MIN IS NULL
								BEGIN
									SELECT @DT_MIN = @StatusStartDate;
								END
								
								SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
								IF @DT_MAX IS NULL
								BEGIN
									SELECT @DT_MAX = @StatusEndDate;
								END
								
								SELECT @LogOutLogInMins = DATEDIFF(MINUTE, @DT_MIN, @DT_MAX) - ISNULL((SELECT SUM([USED_DURATION_MINS]) FROM @TBL_LOG_IN), 0);
								
								-- Begin lock unlock table			
							
								DECLARE @TBL_LOCK TABLE 
								(
									[LOCK_UNLOCK_ID] [BIGINT] NOT NULL,
									[LOCK_ON] [DATETIME] NOT NULL,
									[UN_LOCK_ON] [DATETIME] NOT NULL,
									[UN_USED_DURATION_MINS] [BIGINT] NOT NULL
								);
								
								INSERT INTO
									@TBL_LOCK
								SELECT
									[Audit].[LockUnLock].[LockUnLockID] AS [LOCK_UNLOCK_ID]
									, [Audit].[LockUnLock].[LockOn] AS [LOCK_ON]
									, ISNULL([Audit].[LockUnLock].[UnLockOn], @StatusEndDate) AS [UN_LOCK_ON]
									, '0' AS [UN_USED_DURATION_MINS]
								FROM
									[Audit].[LockUnLock]
								WHERE
									[Audit].[LockUnLock].[UserID] = @AssignedToClaimProcess
								AND
								(
									[Audit].[LockUnLock].[LockOn] BETWEEN @StatusStartDate AND @StatusEndDate
								OR
									[Audit].[LockUnLock].[UnLockOn] BETWEEN @StatusStartDate AND @StatusEndDate
								);				
								
								SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
								IF @DT_MIN IS NULL
								BEGIN
									SELECT @DT_MIN = @StatusStartDate;
								END
								
								IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
								BEGIN
									INSERT INTO
										@TBL_LOCK
									SELECT
										'-1' AS [LOCK_UNLOCK_ID]
										, @StatusStartDate AS [LOCK_ON]
										, @StatusStartDate AS [UN_LOCK_ON]
										, '0' AS [UN_USED_DURATION_MINS];
								END
								ELSE
								BEGIN
									UPDATE
										@TBL_LOCK
									SET
										[LOCK_ON] = @StatusStartDate
									WHERE
										[LOCK_UNLOCK_ID] = 
										(
											SELECT
												MIN([LOCK_UNLOCK_ID])
											FROM
												@TBL_LOCK
										);
								END
								
								SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
								IF @DT_MAX IS NULL
								BEGIN
									SELECT @DT_MAX = @StatusEndDate;
								END
								
								IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
								BEGIN
									INSERT INTO
										@TBL_LOCK
									SELECT
										'-1' AS [LOCK_UNLOCK_ID]
										, @StatusEndDate AS [LOCK_ON]
										, @StatusEndDate AS [UN_LOCK_ON]
										, '0' AS [UN_USED_DURATION_MINS];
								END
								ELSE
								BEGIN
									UPDATE
										@TBL_LOCK
									SET
										[LOCK_ON] = @StatusEndDate
									WHERE
										[LOCK_UNLOCK_ID] = 
										(
											SELECT
												MAX([LOCK_UNLOCK_ID])
											FROM
												@TBL_LOCK
										);
								END
								
								UPDATE
									@TBL_LOCK
								SET
									[UN_USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOCK_ON], [UN_LOCK_ON]);
								
								SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
								IF @DT_MIN IS NULL
								BEGIN
									SELECT @DT_MIN = @StatusStartDate;
								END
								
								SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
								IF @DT_MAX IS NULL
								BEGIN
									SELECT @DT_MAX = @StatusEndDate;
								END
								
								SELECT @LockUnlockMins = ISNULL((SELECT SUM([UN_USED_DURATION_MINS]) FROM @TBL_LOCK), 0);
								
								--End Lock Unlock
							END
						
							DECLARE @DurationMins BIGINT;
							SELECT @DurationMins = @StartEndMins - (@LogOutLogInMins + @LockUnLockMins);
							
							DECLARE @CommentClaimProcess NVARCHAR(4000);
							SELECT @CommentClaimProcess = [Patient].[PatientVisit].[Comment] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
						
							INSERT INTO [Claim].[ClaimProcess]
							(
								[PatientVisitID]
								, [ClaimStatusID]
								, [AssignedTo]
								, [StatusStartDate]
								, [StatusEndDate]
								, [StartEndMins]
								, [LogOutLogInMins]
								, [LockUnLockMins]
								, [DurationMins]
								, [Comment]
								, [CreatedBy]
								, [CreatedOn]
								, [LastModifiedBy]
								, [LastModifiedOn]
								, [IsActive]
							)
							VALUES
							(
								@PatientVisitID
								, @ClaimStatusIDClaimProcess
								, @AssignedToClaimProcess
								, @StatusStartDate
								, @StatusEndDate
								, @StartEndMins
								, @LogOutLogInMins
								, @LockUnLockMins
								, @DurationMins
								, @CommentClaimProcess
								, @CurrentModificationBy
								, @CurrentModificationOn
								, @CurrentModificationBy
								, @CurrentModificationOn
								, 1
							);
						END
						
						-- VERIFY @ClaimStatusID ENDS
					
						INSERT INTO 
							[PatientVisitHistory]
							(
								[PatientVisitID]
								, [PatientID]
								, [PatientHospitalizationID]
								, [DOS]
								, [IllnessIndicatorID]
								, [IllnessIndicatorDate]
								, [FacilityTypeID]
								, [FacilityDoneID]
								, [PrimaryClaimDiagnosisID]
								, [DoctorNoteRelPath]
								, [SuperBillRelPath]
								, [PatientVisitDesc]
								, [ClaimStatusID]
								, [AssignedTo]
								, [TargetBAUserID]
								, [TargetQAUserID]
								, [TargetEAUserID]
								, [PatientVisitComplexity]
								, [Comment]
								, [CreatedBy]
								, [CreatedOn]
								, [LastModifiedBy]
								, [LastModifiedOn]
								, [IsActive]
							)
						SELECT
							[Patient].[PatientVisit].[PatientVisitID]
							, [Patient].[PatientVisit].[PatientID]
							, [Patient].[PatientVisit].[PatientHospitalizationID]
							, [Patient].[PatientVisit].[DOS]
							, [Patient].[PatientVisit].[IllnessIndicatorID]
							, [Patient].[PatientVisit].[IllnessIndicatorDate]
							, [Patient].[PatientVisit].[FacilityTypeID]
							, [Patient].[PatientVisit].[FacilityDoneID]
							, [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
							, [Patient].[PatientVisit].[DoctorNoteRelPath]
							, [Patient].[PatientVisit].[SuperBillRelPath]
							, [Patient].[PatientVisit].[PatientVisitDesc]
							, [Patient].[PatientVisit].[ClaimStatusID]
							, [Patient].[PatientVisit].[AssignedTo]
							, [Patient].[PatientVisit].[TargetBAUserID]
							, [Patient].[PatientVisit].[TargetQAUserID]
							, [Patient].[PatientVisit].[TargetEAUserID]
							, [Patient].[PatientVisit].[PatientVisitComplexity]
							, [Patient].[PatientVisit].[Comment]
							, @CurrentModificationBy
							, @CurrentModificationOn
							, @LastModifiedBy
							, @LastModifiedOn
							, [Patient].[PatientVisit].[IsActive]
						FROM 
							[Patient].[PatientVisit]
						WHERE
							[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID;
						
						UPDATE 
							[Patient].[PatientVisit]
						SET
							[Patient].[PatientVisit].[PatientID] = @PatientID
							, [Patient].[PatientVisit].[PatientHospitalizationID] = @PatientHospitalizationID
							, [Patient].[PatientVisit].[DOS] = @DOS
							, [Patient].[PatientVisit].[IllnessIndicatorID] = @IllnessIndicatorID
							, [Patient].[PatientVisit].[IllnessIndicatorDate] = @IllnessIndicatorDate
							, [Patient].[PatientVisit].[FacilityTypeID] = @FacilityTypeID
							, [Patient].[PatientVisit].[FacilityDoneID] = @FacilityDoneID
							, [Patient].[PatientVisit].[PrimaryClaimDiagnosisID] = @PrimaryClaimDiagnosisID
							, [Patient].[PatientVisit].[DoctorNoteRelPath] = @DoctorNoteRelPath
							, [Patient].[PatientVisit].[SuperBillRelPath] = @SuperBillRelPath
							, [Patient].[PatientVisit].[PatientVisitDesc] = @PatientVisitDesc
							, [Patient].[PatientVisit].[ClaimStatusID] = @ClaimStatusID
							, [Patient].[PatientVisit].[AssignedTo] = @AssignedTo
							, [Patient].[PatientVisit].[TargetBAUserID] = @TargetBAUserID
							, [Patient].[PatientVisit].[TargetQAUserID] = @TargetQAUserID
							, [Patient].[PatientVisit].[TargetEAUserID] = @TargetEAUserID
							, [Patient].[PatientVisit].[PatientVisitComplexity] = @PatientVisitComplexity
							, [Patient].[PatientVisit].[Comment] = @Comment
							, [Patient].[PatientVisit].[LastModifiedBy] = @CurrentModificationBy
							, [Patient].[PatientVisit].[LastModifiedOn] = @CurrentModificationOn
							, [Patient].[PatientVisit].[IsActive] = @IsActive
						WHERE
							[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID;
							
						SELECT @LastModifiedBy = @CurrentModificationBy;
						SELECT @LastModifiedOn = @CurrentModificationOn;
					END
					--ELSE
					--BEGIN
					--	SELECT @PatientVisitID = -2;		-- THIS CAN'T BE RETURED IN THIS SP ONLY
					--END
				END
				--ELSE IF @PatientVisitID_PREV <> @PatientVisitID
				--BEGIN			
				--	SELECT @PatientVisitID = -1;			-- THIS CAN'T BE RETURED IN THIS SP ONLY
				--END
				-- ELSE
				-- BEGIN
				--	 SELECT @CurrentModificationOn = @LastModifiedOn;
				-- END
				
				FETCH NEXT FROM CUR_STS INTO @ClaimStatusID_STR;
			END
		END
		
		CLOSE CUR_STS;
		DEALLOCATE CUR_STS;
	END TRY
	BEGIN CATCH
		-- ERROR CATCHING - STARTS
		BEGIN TRY			
			EXEC [Audit].[usp_Insert_ErrorLog];			
			SELECT @PatientVisitID = (MAX([Audit].[ErrorLog].[ErrorLogID]) * -1) FROM [Audit].[ErrorLog];
		END TRY
		BEGIN CATCH
			RAISERROR('Error in [Audit].[usp_Insert_ErrorLog]', -1, -1);
		END CATCH
		-- ERROR CATCHING - ENDS
	END CATCH
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetDashboardSummary_PatientVisit]    Script Date: 07/09/2013 10:11:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetDashboardSummary_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetDashboardSummary_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetDashboardSummary_PatientVisit]    Script Date: 07/09/2013 10:11:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Patient].[usp_GetDashboardSummary_PatientVisit]
	@UserID BIGINT
AS
BEGIN
	-- SET NOCOUNT_BIG ON added to prevent extra result sets from
	-- BIGINTerfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] TINYINT IDENTITY (1, 1) NOT NULL
		, [DESC] NVARCHAR(15) NOT NULL
		, [COUNT1] BIGINT NOT NULL
		, [COUNT7] BIGINT NOT NULL
		, [COUNT30] BIGINT NOT NULL
		, [COUNT31PLUS] BIGINT NOT NULL
		, [COUNTTOTAL] BIGINT NOT NULL
	);
	
	DECLARE @Data1 BIGINT;
	DECLARE @Data7 BIGINT;
	DECLARE @Data30 BIGINT;
	DECLARE @Data31Plus BIGINT;
	DECLARE @DataTotal BIGINT;	
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;	
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Visits'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	--Created COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;	

	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Created'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
--Hold COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK) 
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Hold'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	
--Ready to send COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Ready To Send'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);

--Sent COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Sent'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	--Accepted COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Accepted'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);


	--Rejected COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK) 
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK) 
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Rejected'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);

--Resubmitted COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess] WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess] WITH (NOLOCK) 
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess] WITH (NOLOCK) 
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Re-Submitted'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;		
	
	-- EXEC [Patient].[usp_GetDashboardSummary_PatientVisit] 101
END








GO



-----------------------------------------------------------------------
	
/****** Object:  StoredProcedure [Patient].[usp_GetReport_PatientVisit]    Script Date: 05/20/2013 14:07:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetReport_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetReport_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetReport_PatientVisit]    Script Date: 05/20/2013 14:07:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Patient].[usp_GetReport_PatientVisit]	
     @UserID INT
	
	
AS
BEGIN
	SET NOCOUNT ON;
	
	
	SELECT
	  ROW_NUMBER() OVER (ORDER BY [PatientVisit].[PatientVisitID] ASC) AS [SN]
	  , [Billing].[Clinic].[ClinicName] as [CLINIC_NAME]
	  , (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
	  , (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PATIENT_NAME]
	  , [Patient].[PatientVisit].[DOS] as [DOS]
	  	,[MasterData].[ClaimStatus].[ClaimStatusName] as [CLAIM_STATUS]
		,[Patient].[PatientVisit].[PatientVisitID] as [CASE_NO]
		,([Diagnosis].[Diagnosis].[DiagnosisCode]) as DX_COUNT
		
		
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[Patient].[PatientID]=[Patient].[PatientVisit].[PatientID]
		
		INNER JOIN
		
		[Billing].[Clinic]
		
		ON
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]
		
		INNER JOIN
		
		[Billing].[Provider]
		
		ON
		
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
		
		INNER JOIN
		
		[MasterData].[ClaimStatus]
		
		ON
		
		[MasterData].[ClaimStatus].[ClaimStatusID] = [Patient].[PatientVisit].[ClaimStatusID]
		
		INNER JOIN
		
	[Diagnosis].[Diagnosis]
	
	ON
	
	
		[Diagnosis].[Diagnosis].[DiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		
		WHERE
		
		[Billing].[Clinic].[ClinicID] 
		
		IN
		
		(select [USER].[UserClinic].[ClinicID] from [User].[UserClinic] where [User].[UserClinic].[UserID] = @UserID)
		
		
		
	
	-- EXEC [Patient].[usp_GetReport_PatientVisit]  @UserID = 103
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] 
END






GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetClinicWiseSummary_PatientVisit]    Script Date: 07/09/2013 14:41:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetClinicWiseSummary_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetClinicWiseSummary_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetClinicWiseSummary_PatientVisit]    Script Date: 07/09/2013 14:41:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Patient].[usp_GetClinicWiseSummary_PatientVisit]
	@ClinicID INT
AS
BEGIN
	-- SET NOCOUNT_BIG ON added to prevent extra result sets from
	-- BIGINTerfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] TINYINT IDENTITY (1, 1) NOT NULL
		, [DESC] NVARCHAR(15) NOT NULL
		, [COUNT1] BIGINT NOT NULL
		, [COUNT7] BIGINT NOT NULL
		, [COUNT30] BIGINT NOT NULL
		, [COUNT31PLUS] BIGINT NOT NULL
		, [COUNTTOTAL] BIGINT NOT NULL
	);
	
	DECLARE @Data1 BIGINT;
	DECLARE @Data7 BIGINT;
	DECLARE @Data30 BIGINT;
	DECLARE @Data31Plus BIGINT;
	DECLARE @DataTotal BIGINT;	
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;	
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Visits'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	--Created COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;	

	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Created'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
--Hold COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)	
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Hold'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	
--Ready to send COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)	
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Ready To Send'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);

--Sent COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Sent'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	--Accepted COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Accepted'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);


	--Rejected COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Rejected'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);

--Resubmitted COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Re-Submitted'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;
	
	-- EXEC [Patient].[usp_GetClinicWiseSummary_PatientVisit]  @ClinicID = 1
END





GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetReportClinic_PatientVisit]    Script Date: 05/21/2013 11:42:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetReportClinic_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetReportClinic_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetReportClinic_PatientVisit]    Script Date: 05/21/2013 11:42:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Patient].[usp_GetReportClinic_PatientVisit]	
     @ClinicID INT
	
	
AS
BEGIN
	SET NOCOUNT ON;
	
	
	SELECT
	  ROW_NUMBER() OVER (ORDER BY [PatientVisit].[PatientVisitID] ASC) AS [SN]
	  , [Billing].[Clinic].[ClinicName] as [CLINIC_NAME]
	  , (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
	  , (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PATIENT_NAME]
	  , [Patient].[PatientVisit].[DOS] as [DOS]
	  	,[MasterData].[ClaimStatus].[ClaimStatusName] as [CLAIM_STATUS]
		,[Patient].[PatientVisit].[PatientVisitID] as [CASE_NO]
		,([Diagnosis].[Diagnosis].[DiagnosisCode]) as DX_COUNT
		
		
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[Patient].[PatientID]=[Patient].[PatientVisit].[PatientID]
		
		INNER JOIN
		
		[Billing].[Clinic]
		
		ON
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]
		
		INNER JOIN
		
		[Billing].[Provider]
		
		ON
		
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
		
		INNER JOIN
		
		[MasterData].[ClaimStatus]
		
		ON
		
		[MasterData].[ClaimStatus].[ClaimStatusID] = [Patient].[PatientVisit].[ClaimStatusID]
		
		INNER JOIN
		
	[Diagnosis].[Diagnosis]
	
	ON
	
	
		[Diagnosis].[Diagnosis].[DiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		
		WHERE
		
		[Billing].[Clinic].[ClinicID] = @ClinicID
		
		
		
		
		
	
	-- EXEC [Patient].[usp_GetReport_PatientVisit]  @UserID = 103
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] 
END






GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetClinicWiseVisit_PatientVisit]    Script Date: 06/27/2013 11:22:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetClinicWiseVisit_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetClinicWiseVisit_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetClinicWiseVisit_PatientVisit]    Script Date: 06/27/2013 11:22:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Patient].[usp_GetClinicWiseVisit_PatientVisit]
	@ClinicID INT
	, @Desc VARCHAR(15)
	, @DayCount VARCHAR(12)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	DECLARE @StatusIDs NVARCHAR(100);
	DECLARE @FromDiff INT;
	DECLARE @ToDiff INT;
	
	IF @Desc = 'Visits'
	BEGIN
		SELECT @StatusIDS = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Created'
	BEGIN
		SELECT @StatusIDS = '10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Hold'
	BEGIN
		SELECT @StatusIDS = '6, 7';
	END
	
	IF @Desc = 'Ready To Send'
	BEGIN
		SELECT @StatusIDS = '16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Sent'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Accepted'
	BEGIN
		SELECT @StatusIDS = '29, 30';
	END
	
	IF @Desc = 'Rejected'
	BEGIN
		SELECT @StatusIDS = '26, 27';
	END
	
	IF @Desc = 'Resubmit'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @DayCount = 'SEVEN'
	BEGIN
		SELECT @FromDiff = 1;
		SELECT @ToDiff = 7;
	END
	
	IF @DayCount = 'THIRTY'
	BEGIN
		SELECT @FromDiff = 8;
		SELECT @ToDiff = 30;
	END
		
	IF @Desc = 'Resubmit' 
	BEGIN
		 IF @DayCount = 'ONE'
		 BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'NIENTYPLUS'
		 BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'TOTAL'
		 BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE 
		 BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
	END
---------
	ELSE
	BEGIN
		IF @DayCount = 'ONE'
		BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
			
		ELSE IF @DayCount = 'THIRTYPLUS'
		BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
		
		ELSE IF @DayCount = 'TOTAL'
		BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
		
		ELSE IF @DayCount <> 'ALL'
		BEGIN
			SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
	END
--------------
	IF @Desc = 'Visits' AND @DayCount = 'ALL'
	BEGIN
		SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] > 0
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
	END
	
	ELSE IF @Desc = 'Accepted' AND @DayCount = 'ALL'
	BEGIN
		SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID]  = @ClinicID
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
	END
	
	ELSE IF @Desc = 'Blocked' AND @DayCount = 'ALL'
	BEGIN
		SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[Patient].[ClinicID]  = @ClinicID
		AND
		(
			[Patient].[PatientVisit].[IsActive] = 0
		OR
			[Patient].[Patient].[IsActive] = 0
		);
	END
	
	ELSE IF @Desc = 'NIT' AND @DayCount = 'ALL'
	BEGIN
		SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] IN (3, 5, 8, 12, 14, 18, 20, 24, 27)
		AND
			[Patient].[Patient].[ClinicID] = @ClinicID
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	-- EXEC [Patient].[usp_GetClinicWiseVisit_PatientVisit]  @ClinicID = 1,  @Desc = 'NIT', @DayCount = 'ALL'
	-- EXEC [Patient].[usp_GetClinicWiseVisit_PatientVisit]  @ClinicID = 1,  @Desc = 'Visits', @DayCount = 'ALL'
	
END



GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetDashboardVisit_PatientVisit]    Script Date: 07/09/2013 09:24:57 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetDashboardVisit_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetDashboardVisit_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetDashboardVisit_PatientVisit]    Script Date: 07/09/2013 09:24:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Patient].[usp_GetDashboardVisit_PatientVisit]
	@UserID INT
	, @Desc VARCHAR(15)
	, @DayCount VARCHAR(12)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	DECLARE @StatusIDs NVARCHAR(100);
	DECLARE @FromDiff INT;
	DECLARE @ToDiff INT;
	
	IF @Desc = 'Visits'
	BEGIN
		SELECT @StatusIDS = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Created'
	BEGIN
		SELECT @StatusIDS = '10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Hold'
	BEGIN
		SELECT @StatusIDS = '6, 7';
	END
	
	IF @Desc = 'Ready To Send'
	BEGIN
		SELECT @StatusIDS = '16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Sent'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Accepted'
	BEGIN
		SELECT @StatusIDS = '29, 30';
	END
	
	IF @Desc = 'Rejected'
	BEGIN
		SELECT @StatusIDS = '26, 27';
	END
	
	IF @Desc = 'Resubmit'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @DayCount = 'SEVEN'
	BEGIN
		SELECT @FromDiff = 1;
		SELECT @ToDiff = 7;
	END
	
	IF @DayCount = 'THIRTY'
	BEGIN
		SELECT @FromDiff = 8;
		SELECT @ToDiff = 30;
	END
		
	IF @Desc = 'Resubmit' 
	BEGIN
		 IF @DayCount = 'ONE'
		 BEGIN
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess]  WITH (NOLOCK)
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'THIRTYPLUS'
		 BEGIN
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]						
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess]  WITH (NOLOCK)
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'TOTAL'
		 BEGIN
			
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess]  WITH (NOLOCK)
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE 
		 BEGIN
			
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess]  WITH (NOLOCK)
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
	END
---------
	ELSE
	BEGIN
		IF @DayCount = 'ONE'
		BEGIN
			
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
			
		ELSE IF @DayCount = 'THIRTYPLUS'
		BEGIN
			
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
	-------
	ELSE IF @DayCount = 'TOTAL'
		BEGIN
			
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
	------
		ELSE IF @DayCount <> 'ALL'
		BEGIN
			
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID]
				, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
				, [Patient].[Patient].[ChartNumber]
				, [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit] WITH (NOLOCK)
			INNER JOIN
				[Patient].[Patient] WITH (NOLOCK)
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
	END
--------------
	IF @Desc = 'Visits' AND @DayCount = 'ALL'
	BEGIN
		
		SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
		FROM
			[Patient].[PatientVisit] WITH (NOLOCK)
		INNER JOIN
			[Patient].[Patient] WITH (NOLOCK)
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] > 0
		AND 
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	ELSE IF @Desc = 'Accepted' AND @DayCount = 'ALL'
	BEGIN
		
		SELECT 
		[Patient].[PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		, [Patient].[Patient].[ChartNumber]
		, [Patient].[PatientVisit].[DOS]
		FROM
			[Patient].[PatientVisit] WITH (NOLOCK)
		INNER JOIN
			[Patient].[Patient] WITH (NOLOCK)
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
		AND 
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic] WITH (NOLOCK) 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	ELSE IF @Desc = 'Blocked' AND @DayCount = 'ALL'
	BEGIN
		
		SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
		FROM
			[Patient].[PatientVisit] WITH (NOLOCK)
		INNER JOIN
			[Patient].[Patient] WITH (NOLOCK)
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
		AND
		(
			[Patient].[PatientVisit].[IsActive] = 0
		OR
			[Patient].[Patient].[IsActive] = 0
		);
	END
	
	ELSE IF @Desc = 'NIT' AND @DayCount = 'ALL'
	BEGIN
		
		SELECT 
			[Patient].[PatientVisit].[PatientVisitID]
			, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			, [Patient].[Patient].[ChartNumber]
			, [Patient].[PatientVisit].[DOS]
		FROM
			[Patient].[PatientVisit] WITH (NOLOCK)
		INNER JOIN
			[Patient].[Patient] WITH (NOLOCK)
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] IN (3, 5, 8, 12, 14, 18, 20, 24, 27)
		AND
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT 
						[User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic]  WITH (NOLOCK)
					INNER JOIN
						[Billing].[Clinic]  WITH (NOLOCK)
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
					AND 
						[User].[UserClinic].[IsActive] = 1 
					AND 
						[Billing].[Clinic].[IsActive] = 1
				)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	
	-- EXEC [Patient].[usp_GetDashboardVisit_PatientVisit]  @UserID = 116,  @Desc = 'Blocked', @DayCount = 'ALL'
END






GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetByAZDashboardAgent_User]    Script Date: 07/09/2013 14:34:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByAZDashboardAgent_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByAZDashboardAgent_User]
GO



/****** Object:  StoredProcedure [User].[usp_GetByAZDashboardAgent_User]    Script Date: 07/09/2013 14:34:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [User].[usp_GetByAZDashboardAgent_User]
	@UserID		INT = 0
	, @IsWebAdmin	BIT = 0
AS
BEGIN

	SET NOCOUNT ON;

    DECLARE @TBL_ALL TABLE
    (
		[UserName] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    DECLARE @TBL_USER TABLE
	(
		[USER_ID] INT NOT NULL
	);
	
	IF @IsWebAdmin = 1
	BEGIN
		INSERT INTO
			@TBL_USER
		SELECT
			[User].[User].[UserID]
		FROM
			[User].[User] WITH (NOLOCK);
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_USER
		SELECT
			[User].[User].[UserID]
		FROM
			[User].[User] WITH (NOLOCK)
		WHERE
			[User].[User].[ManagerID] = @UserID;
			
		INSERT INTO
			@TBL_USER
		SELECT
			@UserID;
	END
	
    INSERT INTO
		@TBL_ALL
	SELECT
		[User].[User].[LastName]
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		[User].[User].[UserID] IN (SELECT [USER_ID] FROM @TBL_USER)
	AND
		[User].[User].[IsActive] = 1
	ORDER BY
		[LastName]
	DESC;

		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[UserName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- [User].[usp_GetByAZDashboardAgent_User] @UserID = 101, @IsWebAdmin = 1
	-- [User].[usp_GetByAZDashboardAgent_User] @UserID = 48, @IsWebAdmin = 0
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetDashboardAgent_User]    Script Date: 07/09/2013 14:35:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetDashboardAgent_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetDashboardAgent_User]
GO



/****** Object:  StoredProcedure [User].[usp_GetDashboardAgent_User]    Script Date: 07/09/2013 14:35:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [User].[usp_GetDashboardAgent_User]
	@StartBy		VARCHAR(1) = 'A'
	, @UserID		INT = 0
	, @IsWebAdmin	BIT = 0
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_USER TABLE
	(
		[USER_ID] INT NOT NULL
	);
	
	IF @IsWebAdmin = 1
	BEGIN
		INSERT INTO
			@TBL_USER
		SELECT
			[User].[User].[UserID]
		FROM
			[User].[User] WITH (NOLOCK);
	END
	ELSE
	BEGIN
		INSERT INTO
			@TBL_USER
		SELECT
			[User].[User].[UserID]
		FROM
			[User].[User] WITH (NOLOCK)
		WHERE
			[User].[User].[ManagerID] = @UserID;
			
		INSERT INTO
			@TBL_USER
		SELECT
			@UserID;
	END
	
	IF LEN(LTRIM(RTRIM(@StartBy))) = 0
	BEGIN
		SELECT @StartBy = 'A';
	END
	
	SELECT
		[User].[User].[UserID]
		, (LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL([User].[User].[MiddleName], '')))) AS [Name]
	FROM
		[User].[User] WITH (NOLOCK)
	WHERE
		[User].[User].[LastName] LIKE @StartBy + '%'
	AND
		[User].[User].[UserID] IN (SELECT [USER_ID] FROM @TBL_USER)
	AND
		[User].[User].[IsActive] = 1
	ORDER BY
		[Name]
	DESC;
   
	-- EXEC [User].[usp_GetDashboardAgent_User] @UserID = 101, @IsWebAdmin = 1, @StartBy = ''
	-- EXEC [User].[usp_GetDashboardAgent_User] @UserID = 48, @IsWebAdmin = 0, @StartBy = 'S'
END

GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetAgentWiseSummary_PatientVisit]    Script Date: 07/09/2013 14:39:57 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAgentWiseSummary_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAgentWiseSummary_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetAgentWiseSummary_PatientVisit]    Script Date: 07/09/2013 14:39:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Patient].[usp_GetAgentWiseSummary_PatientVisit]
	@UserID INT
AS
BEGIN
	-- SET NOCOUNT_BIG ON added to prevent extra result sets from
	-- BIGINTerfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] TINYINT IDENTITY (1, 1) NOT NULL
		, [DESC] NVARCHAR(15) NOT NULL
		, [COUNT1] BIGINT NOT NULL
		, [COUNT7] BIGINT NOT NULL
		, [COUNT30] BIGINT NOT NULL
		, [COUNT31PLUS] BIGINT NOT NULL
		, [COUNTTOTAL] BIGINT NOT NULL
	);
	
	DECLARE @Data1 BIGINT;
	DECLARE @Data7 BIGINT;
	DECLARE @Data30 BIGINT;
	DECLARE @Data31Plus BIGINT;
	DECLARE @DataTotal BIGINT;	
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic] WITH (NOLOCK) 
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;	
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Visits'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	--Created COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK) 
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 9
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;	

	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Created'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
--Hold COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)	
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN (
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (6, 7)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Hold'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	
--Ready to send COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)	
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK) 
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 15
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Ready To Send'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);

--Sent COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK) 
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Sent'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	--Accepted COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 28
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30 
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Accepted'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);


	--Rejected COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (26, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Rejected'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);

--Resubmitted COUNT_BIG
	
	SELECT 
		@Data1 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data7 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess] WITH (NOLOCK) 
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 1 AND 7
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
----		
	
	SELECT 
		@Data30 = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN 8 AND 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
	
	----		
	
	SELECT 
		@Data31Plus = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 22
	AND
		[Patient].[PatientVisit].[PatientVisitID] IN
		(
			SELECT 
				[Claim].[ClaimProcess].[PatientVisitID] 
			FROM 
				[Claim].[ClaimProcess]  WITH (NOLOCK)
			WHERE 
				[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
		)
	AND
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	SELECT @DataTotal = @Data1 + @Data7 + @Data30 + @Data31Plus;
	
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		'Re-Submitted'
		, @Data1
		, @Data7
		, @Data30
		, @Data31Plus
		, @DataTotal
	);
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;	
	
	-- EXEC [Patient].[usp_GetAgentWiseSummary_PatientVisit]  @UserID = 116
END





GO



-----------------------------------------------------------------------

-----------------------------------------------------------------------

-----------------------------------------------------------------------

-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetAgentWiseVisit_PatientVisit]    Script Date: 07/05/2013 17:24:34 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAgentWiseVisit_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAgentWiseVisit_PatientVisit]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetAgentWiseVisit_PatientVisit]    Script Date: 07/05/2013 17:24:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Patient].[usp_GetAgentWiseVisit_PatientVisit]
	@UserID INT
	, @Desc VARCHAR(15)
	, @DayCount VARCHAR(12)
	, @SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	DECLARE @StatusIDs NVARCHAR(100);
	DECLARE @FromDiff INT;
	DECLARE @ToDiff INT;
	
	IF @Desc = 'Visits'
	BEGIN
		SELECT @StatusIDS = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Created'
	BEGIN
		SELECT @StatusIDS = '10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Hold'
	BEGIN
		SELECT @StatusIDS = '6, 7';
	END
	
	IF @Desc = 'Ready To Send'
	BEGIN
		SELECT @StatusIDS = '16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Sent'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Accepted'
	BEGIN
		SELECT @StatusIDS = '29, 30';
	END
	
	IF @Desc = 'Rejected'
	BEGIN
		SELECT @StatusIDS = '26, 27';
	END
	
	IF @Desc = 'Resubmit'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @DayCount = 'SEVEN'
	BEGIN
		SELECT @FromDiff = 1;
		SELECT @ToDiff = 7;
	END
	
	IF @DayCount = 'THIRTY'
	BEGIN
		SELECT @FromDiff = 8;
		SELECT @ToDiff = 30;
	END
		
	IF @Desc = 'Resubmit' 
	BEGIN
		 IF @DayCount = 'ONE'
		 BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] 
			INNER JOIN
				[Billing].[Clinic] 
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'THIRTYPLUS'
		 BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic] 
			INNER JOIN
				[Billing].[Clinic] 
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'TOTAL'
		 BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE 
		 BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
	END
---------
	ELSE
	BEGIN
		IF @DayCount = 'ONE'
		BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
			
		ELSE IF @DayCount = 'THIRTYPLUS'
		BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
		
		ELSE IF @DayCount = 'TOTAL'
		BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
		
		ELSE IF @DayCount <> 'ALL'
		BEGIN
			INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
			SELECT
				[Patient].[PatientVisit].[PatientVisitID]
				, ROW_NUMBER() OVER (
					ORDER BY
								
						CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
						CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
								
						CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
						CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
										
						CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
						CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
						CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
						
						CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
						CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
						
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
						CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
						
					) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
	END
--------------
	IF @Desc = 'Visits' AND @DayCount = 'ALL'
	BEGIN
		INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
		SELECT
			[Patient].[PatientVisit].[PatientVisitID]
			, ROW_NUMBER() OVER (
				ORDER BY
							
					CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
					CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
							
					CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
					CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
									
					CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
					CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
					
					CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
					CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
					
					CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
					CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
					
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
					
				) AS ROW_NUM
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] > 0
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
			AND
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
			AND
				(
					[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
				OR
					((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
				OR
					[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
				)
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
	END
	
	ELSE IF @Desc = 'Blocked' AND @DayCount = 'ALL'
	BEGIN
		INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
		SELECT
			[Patient].[PatientVisit].[PatientVisitID]
			, ROW_NUMBER() OVER (
				ORDER BY
							
					CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
					CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
							
					CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
					CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
									
					CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
					CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
					
					CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
					CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
					
					CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
					CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
					
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
					
				) AS ROW_NUM
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
		AND
			([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
		AND
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
		AND
			(
				[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
			OR
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
			OR
				[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
			)
		AND
		(
			[Patient].[PatientVisit].[IsActive] = 0
		OR
			[Patient].[Patient].[IsActive] = 0
		);
	END
	
	ELSE IF @Desc = 'NIT' AND @DayCount = 'ALL'
	BEGIN
		INSERT INTO
				@SEARCH_TMP
				(
					[PK_ID]
					, [ROW_NUM]
				)
		SELECT
			[Patient].[PatientVisit].[PatientVisitID]
			, ROW_NUMBER() OVER (
				ORDER BY
							
					CASE WHEN @OrderByField = 'Name' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
					CASE WHEN @orderByField = 'Name' AND @orderByDirection = 'D' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END DESC,
							
					CASE WHEN @OrderByField = 'ChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
					CASE WHEN @orderByField = 'ChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
									
					CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
					CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
					
					CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
					CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
					
					CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END ASC,
					CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitComplexity] END DESC,
					
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
					CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
					
				) AS ROW_NUM
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] IN (3, 5, 8, 12, 14, 18, 20, 24, 27)
		AND 
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
		AND
			([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
		AND
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
		AND
			(
				[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
			OR
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))) LIKE '%' + @SearchName + '%' 
			OR
				[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
			)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		, [Patient].[Patient].[ChartNumber]
		, [Patient].[PatientVisit].[DOS]
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Patient].[PatientVisit].[PatientVisitID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Patient].[usp_GetAgentWiseVisit_PatientVisit]  @UserID=15 , @Desc = 'Visits', @DayCount = 'THIRTYPLUS'
	-- EXEC [Patient].[usp_GetAgentWiseVisit_PatientVisit]  @UserID=15 , @Desc = 'Visits', @DayCount = 'ALL'
	-- EXEC [Patient].[usp_GetAgentWiseVisit_PatientVisit]  @UserID=15 , @Desc = 'NIT', @DayCount = 'ALL'
	-- EXEC [Patient].[usp_GetAgentWiseVisit_PatientVisit]  @UserID = '15', @Desc = 'Visits', @DayCount = 'THIRTYPLUS', @SearchName  = 'a'
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_DiagnosisGroup]    Script Date: 05/24/2013 16:59:42 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Diagnosis].[usp_GetBySearch_DiagnosisGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Diagnosis].[usp_GetBySearch_DiagnosisGroup]
GO


/****** Object:  StoredProcedure [Diagnosis].[usp_GetBySearch_DiagnosisGroup]    Script Date: 05/24/2013 16:59:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Diagnosis].[usp_GetBySearch_DiagnosisGroup]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[DiagnosisGroup].[DiagnosisGroupID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'DiagnosisGroupDescription' AND @OrderByDirection = 'A' THEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] END ASC,
				CASE WHEN @orderByField = 'DiagnosisGroupDescription' AND @orderByDirection = 'D' THEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] END DESC,
						
				CASE WHEN @OrderByField = 'DiagnosisGroupCode' AND @OrderByDirection = 'A' THEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] END ASC,
				CASE WHEN @orderByField = 'DiagnosisGroupCode' AND @orderByDirection = 'D' THEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Diagnosis].[DiagnosisGroup].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Diagnosis].[DiagnosisGroup].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Diagnosis].[DiagnosisGroup]
	WHERE
		[Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] LIKE @StartBy + '%' 
	AND
	(
		[Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription] LIKE '%' + @SearchName + '%' 
	OR
		[Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Diagnosis].[DiagnosisGroup].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Diagnosis].[DiagnosisGroup].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[DiagnosisGroup].[DiagnosisGroupID], [DiagnosisGroup].[DiagnosisGroupCode], [DiagnosisGroup].[DiagnosisGroupDescription], [DiagnosisGroup].[IsActive]
	FROM
		[DiagnosisGroup] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [DiagnosisGroup].[DiagnosisGroupID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Diagnosis].[usp_GetBySearch_DiagnosisGroup] @SearchName  = '36'
	-- EXEC [Diagnosis].[usp_GetBySearch_DiagnosisGroup] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetAgentEAReport_PatientVisit]    Script Date: 05/24/2013 17:48:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAgentEAReport_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAgentEAReport_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetAgentEAReport_PatientVisit]    Script Date: 05/24/2013 17:48:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Patient].[usp_GetAgentEAReport_PatientVisit]	

	
	
AS
BEGIN
	SET NOCOUNT ON;
	
	
	SELECT
	  ROW_NUMBER() OVER (ORDER BY [PatientVisit].[PatientVisitID] ASC) AS [SN]
	  , [Billing].[Clinic].[ClinicName] as [CLINIC_NAME]
	  , (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
	  , (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PATIENT_NAME]
	  , [Patient].[PatientVisit].[DOS] as [DOS]
	  	,[MasterData].[ClaimStatus].[ClaimStatusName] as [CLAIM_STATUS]
		,[Patient].[PatientVisit].[PatientVisitID] as [CASE_NO]
		,([Diagnosis].[Diagnosis].[DiagnosisCode]) as DX_COUNT
		
		
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[Patient].[PatientID]=[Patient].[PatientVisit].[PatientID]
		
		INNER JOIN
		
		[Billing].[Clinic]
		
		ON
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]
		
		INNER JOIN
		
		[Billing].[Provider]
		
		ON
		
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
		
		INNER JOIN
		
		[MasterData].[ClaimStatus]
		
		ON
		
		[MasterData].[ClaimStatus].[ClaimStatusID] = [Patient].[PatientVisit].[ClaimStatusID]
		
		INNER JOIN
		
	[Diagnosis].[Diagnosis]
	
	ON
	
	
		[Diagnosis].[Diagnosis].[DiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		
		WHERE
		
		[Patient].[PatientVisit].[TargetEAUserID] IS NOT NULL
		
		
	
	-- EXEC [Patient].[usp_GetAgentQAReport_PatientVisit]  
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] 
END







GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetAgentQAReport_PatientVisit]    Script Date: 05/24/2013 17:48:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAgentQAReport_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAgentQAReport_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetAgentQAReport_PatientVisit]    Script Date: 05/24/2013 17:48:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Patient].[usp_GetAgentQAReport_PatientVisit]	

	
	
AS
BEGIN
	SET NOCOUNT ON;
	
	
	SELECT
	  ROW_NUMBER() OVER (ORDER BY [PatientVisit].[PatientVisitID] ASC) AS [SN]
	  , [Billing].[Clinic].[ClinicName] as [CLINIC_NAME]
	  , (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
	  , (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PATIENT_NAME]
	  , [Patient].[PatientVisit].[DOS] as [DOS]
	  	,[MasterData].[ClaimStatus].[ClaimStatusName] as [CLAIM_STATUS]
		,[Patient].[PatientVisit].[PatientVisitID] as [CASE_NO]
		,([Diagnosis].[Diagnosis].[DiagnosisCode]) as DX_COUNT
		
		
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[Patient].[PatientID]=[Patient].[PatientVisit].[PatientID]
		
		INNER JOIN
		
		[Billing].[Clinic]
		
		ON
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]
		
		INNER JOIN
		
		[Billing].[Provider]
		
		ON
		
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
		
		INNER JOIN
		
		[MasterData].[ClaimStatus]
		
		ON
		
		[MasterData].[ClaimStatus].[ClaimStatusID] = [Patient].[PatientVisit].[ClaimStatusID]
		
		INNER JOIN
		
	[Diagnosis].[Diagnosis]
	
	ON
	
	
		[Diagnosis].[Diagnosis].[DiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		
		WHERE
		
		[Patient].[PatientVisit].[TargetQAUserID] IS NOT NULL
		
		
	
	-- EXEC [Patient].[usp_GetAgentBAReport_PatientVisit]  
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] 
END







GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetAgentBAReport_PatientVisit]    Script Date: 05/24/2013 17:49:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAgentBAReport_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAgentBAReport_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetAgentBAReport_PatientVisit]    Script Date: 05/24/2013 17:49:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Patient].[usp_GetAgentBAReport_PatientVisit]	

	
	
AS
BEGIN
	SET NOCOUNT ON;
	
	
	SELECT
	  ROW_NUMBER() OVER (ORDER BY [PatientVisit].[PatientVisitID] ASC) AS [SN]
	  , [Billing].[Clinic].[ClinicName] as [CLINIC_NAME]
	  , (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
	  , (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PATIENT_NAME]
	  , [Patient].[PatientVisit].[DOS] as [DOS]
	  	,[MasterData].[ClaimStatus].[ClaimStatusName] as [CLAIM_STATUS]
		,[Patient].[PatientVisit].[PatientVisitID] as [CASE_NO]
		,([Diagnosis].[Diagnosis].[DiagnosisCode]) as DX_COUNT
		
		
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[Patient].[PatientID]=[Patient].[PatientVisit].[PatientID]
		
		INNER JOIN
		
		[Billing].[Clinic]
		
		ON
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]
		
		INNER JOIN
		
		[Billing].[Provider]
		
		ON
		
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
		
		INNER JOIN
		
		[MasterData].[ClaimStatus]
		
		ON
		
		[MasterData].[ClaimStatus].[ClaimStatusID] = [Patient].[PatientVisit].[ClaimStatusID]
		
		INNER JOIN
		
	[Diagnosis].[Diagnosis]
	
	ON
	
	
		[Diagnosis].[Diagnosis].[DiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		
		WHERE
		
		[Patient].[PatientVisit].[TargetBAUserID] IS NOT NULL
		
		
	
	-- EXEC [Patient].[usp_GetAgentBAReport_PatientVisit]  
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] 
END







GO



-----------------------------------------------------------------------





-----------------------------------------------------------------------

-----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetByManagerID_User]    Script Date: 06/18/2013 15:24:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByManagerID_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByManagerID_User]
GO


/****** Object:  StoredProcedure [User].[usp_GetByManagerID_User]    Script Date: 06/18/2013 15:24:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [User].[usp_GetByManagerID_User]
	
	 @SelManagerID INT 
	
AS
BEGIN

SELECT 
	(LTRIM(RTRIM([User].[User].[LastName] + ' ' + [User].[User].[FirstName] + ' ' + ISNULL ([User].[User].[MiddleName], '')))) AS [USER_DISP_NAME]
	, *
 FROM [User].[User] where [USER].[ManagerID] = @SelManagerID
	
	
END

-- EXEC [User].[usp_GetByManagerID_User] @SelManagerID = 48




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetManagerClinic_User]    Script Date: 05/28/2013 13:59:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetManagerClinic_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetManagerClinic_User]
GO


/****** Object:  StoredProcedure [User].[usp_GetManagerClinic_User]    Script Date: 05/28/2013 13:59:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select all records from the table

CREATE PROCEDURE [User].[usp_GetManagerClinic_User] 
	@IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;



DECLARE @TBL_ALL TABLE
    (
		[UserID] INT
    );
    
    	
    
    INSERT INTO @TBL_ALL
    
    

SELECT
		
 [User].[User].[UserID]
		
	FROM
		[User].[User]
		
		INNER JOIN
		[User].[UserRole]
		ON
		[User].[User].[UserID] = [User].[UserRole].[UserID]
		
		
		
WHERE
	 [User].[UserRole].[RoleID] = 2
	 
	 	ORDER BY [User].[User].[UserID] DESC
	 	
	DECLARE @TBL_NEW TABLE
    (
		[Manager] INT
    );
	 	
	 	INSERT INTO @TBL_NEW
	 	
	 	SELECT ManagerID FROM [User].[User] 
	 	INNER JOIN 
	 	@TBL_ALL 
	 	ON
	 	[USER].[ManagerID] = [@TBL_ALL].[UserID]
	 	
	SELECT TOP 1
		
		[User].[User].[UserID]
		,([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE] FROM 
	[User].[User] 
	INNER JOIN
	@TBL_NEW
	
	ON
	[User].[User].[UserID] = [@TBL_NEW].[Manager]
	
	--INNER JOIN
	
	--[Billing].[Clinic]
	
	--ON
	
	--[USER].[User].[UserID] = [Billing].[Clinic].[ManagerID]
	
	WHERE
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END
	
	ORDER BY [User].[User].[UserID] DESC
	 	
	 	
	 	
	 	
	 
			
	-- EXEC [User].[usp_GetManager_User] NULL
	-- EXEC [User].[usp_GetManager_User] 1
	-- EXEC [User].[usp_GetManager_User] 0
END




GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetByAZClinic_UserRole]    Script Date: 05/28/2013 14:27:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByAZClinic_UserRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByAZClinic_UserRole]
GO


/****** Object:  StoredProcedure [User].[usp_GetByAZClinic_UserRole]    Script Date: 05/28/2013 14:27:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [User].[usp_GetByAZClinic_UserRole]
	@WebAdminRoleID TINYINT = 1
	, @ManagerRoleID TINYINT = 2
	, @SelManagerID INT = 2
	, @SearchName NVARCHAR(450) = NULL
	, @IsActive BIT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[SearchName] [nvarchar](40) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	SELECT
		[User].[User].[LastName]
	FROM
		[User].[User]
		
		--INNER JOIN
		--[Billing].[Clinic]
		
		--ON
		
		--[User].[User].[ManagerID] = [Billing].[Clinic].[ManagerID]
		
	WHERE
	(
		[User].[User].[LastName] LIKE '%' + @SearchName + '%'
	OR
		[User].[User].[FirstName] LIKE '%' + @SearchName + '%'
	OR
		(
			[User].[User].[MiddleName] IS NOT NULL
		AND
			[User].[User].[MiddleName] LIKE '%' + @SearchName + '%'
		)
	OR
		[User].[User].[Email] LIKE '%' + @SearchName + '%'
	)
	AND
		[User].[User].[UserID] NOT IN
		(
			SELECT
				[User].[UserRole].[UserID]
			FROM
				[User].[UserRole]
			WHERE
				[User].[UserRole].[RoleID] IN (@WebAdminRoleID, @ManagerRoleID)
			AND
				[User].[UserRole].[IsActive] = 1
		)
	AND
		[User].[User].[ManagerID] = @SelManagerID
	AND
		[User].[User].[IsActive] = CASE WHEN @IsActive IS NULL THEN [User].[User].[IsActive] ELSE @IsActive END;	
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[SearchName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- [User].[usp_GetByAZ_UserRole] @SelManagerID = 15
END





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByAZDashVisits_PatientVisit]    Script Date: 07/07/2013 14:05:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByAZDashVisits_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByAZDashVisits_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByAZDashVisits_PatientVisit]    Script Date: 07/07/2013 14:05:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Patient].[usp_GetByAZDashVisits_PatientVisit]
	@UserID INT
	, @Desc VARCHAR(15)
	, @DayCount VARCHAR(12)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	DECLARE @StatusIDs NVARCHAR(100);
	DECLARE @FromDiff INT;
	DECLARE @ToDiff INT;
	
	IF @Desc = 'Visits'
	BEGIN
		SELECT @StatusIDS = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Created'
	BEGIN
		SELECT @StatusIDS = '10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Hold'
	BEGIN
		SELECT @StatusIDS = '6, 7';
	END
	
	IF @Desc = 'Ready To Send'
	BEGIN
		SELECT @StatusIDS = '16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Sent'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @Desc = 'Accepted'
	BEGIN
		SELECT @StatusIDS = '29, 30';
	END
	
	IF @Desc = 'Rejected'
	BEGIN
		SELECT @StatusIDS = '26, 27';
	END
	
	IF @Desc = 'Resubmit'
	BEGIN
		SELECT @StatusIDS = '23, 24, 25, 26, 27, 28, 29, 30';
	END
	
	IF @DayCount = 'SEVEN'
	BEGIN
		SELECT @FromDiff = 1;
		SELECT @ToDiff = 7;
	END
	
	IF @DayCount = 'THIRTY'
	BEGIN
		SELECT @FromDiff = 8;
		SELECT @ToDiff = 30;
	END
	
	
	
	 DECLARE @TBL_ALL TABLE
    (
		[ChartNumber] [nvarchar](350) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    
			
	IF @Desc = 'Resubmit' 
	BEGIN
		 IF @DayCount = 'ONE'
		 BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'THIRTYPLUS'
		 BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE IF @DayCount = 'TOTAL'
		 BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
		
		ELSE 
		 BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[PatientVisitID] IN
				(
					SELECT 
						[Claim].[ClaimProcess].[PatientVisitID] 
					FROM 
						[Claim].[ClaimProcess] 
					WHERE 
						[Claim].[ClaimProcess].[ClaimStatusID] IN (26, 27)
				)
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1
		END
	END
---------
	ELSE
	BEGIN
		IF @DayCount = 'ONE'
		BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) < 1
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
			
		ELSE IF @DayCount = 'THIRTYPLUS'
		BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) > 30
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
		
		ELSE IF @DayCount = 'TOTAL'
		BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
		
		ELSE IF @DayCount <> 'ALL'
		BEGIN
			INSERT INTO
				@TBL_ALL
			SELECT 
				(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
			FROM
				[Patient].[PatientVisit]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND 
				[Patient].[Patient].[ClinicID] IN 
				(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) BETWEEN @FromDiff AND @ToDiff
			AND
				[Patient].[PatientVisit].[IsActive] = 1
			AND
				[Patient].[Patient].[IsActive] = 1;
		END
	END
--------------
	IF @Desc = 'Visits' AND @DayCount = 'ALL'
	BEGIN
		INSERT INTO
			@TBL_ALL
		SELECT 
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] > 0
		AND 
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	ELSE IF @Desc = 'Accepted' AND @DayCount = 'ALL'
	BEGIN
		INSERT INTO
			@TBL_ALL
		SELECT 
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
		AND 
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	ELSE IF @Desc = 'Blocked' AND @DayCount = 'ALL'
	BEGIN
		INSERT INTO
			@TBL_ALL
		SELECT 
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
		AND
			[Patient].[PatientVisit].[IsActive] = 0
		OR
			[Patient].[Patient].[IsActive] = 0;
	END
	
	ELSE IF @Desc = 'NIT' AND @DayCount = 'ALL'
	BEGIN
		INSERT INTO
			@TBL_ALL
		SELECT 
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [Name]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		WHERE
			[Patient].[PatientVisit].[ClaimStatusID] IN (3, 5, 8, 12, 14, 18, 20, 24, 27)
		AND
			[Patient].[Patient].[ClinicID] IN 
			(
					SELECT [User].[UserClinic].[ClinicID] 
					FROM 
						[User].[UserClinic] 
					INNER JOIN
						[Billing].[Clinic] 
					ON
						[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
					WHERE 
						[User].[UserClinic].[UserID] = @UserID 
						AND [User].[UserClinic].[IsActive] = 1 
						AND [Billing].[Clinic].[IsActive] = 1
				)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1;
	END
	
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ChartNumber] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	-- EXEC [Patient].[usp_GetByAZDashVisits_PatientVisit]  @UserID = 101,  @Desc = 'Visits', @DayCount = 'TOTAL'
END



GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetMaxID_ClaimProcess]    Script Date: 05/28/2013 16:43:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetMaxID_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetMaxID_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetMaxID_ClaimProcess]    Script Date: 05/28/2013 16:43:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select the particular record

CREATE PROCEDURE [Claim].[usp_GetMaxID_ClaimProcess] 
	@PatientVisitID	BIGINT
	, @ClaimStatusID TINYINT
AS
BEGIN
	SET NOCOUNT ON;
	
	SELECT
		ISNULL(MAX([Claim].[ClaimProcess].[ClaimProcessID]), 0) AS [MAX_ID]
	FROM
		[Claim].[ClaimProcess]
	WHERE
		@PatientVisitID = [Claim].[ClaimProcess].[PatientVisitID]
	AND
		[Claim].[ClaimProcess].[ClaimStatusID] = @ClaimStatusID
	AND
		[Claim].[ClaimProcess].[IsActive] = 1

	-- [Claim].[usp_GetMaxID_ClaimProcess]  4337 , 22
END

GO

-----------------------------------------------------------------------


/****** Object:  StoredProcedure [EDI].[usp_GetSentFile_EDIFile]    Script Date: 07/06/2013 15:03:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetSentFile_EDIFile]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetSentFile_EDIFile]
GO

/****** Object:  StoredProcedure [EDI].[usp_GetSentFile_EDIFile]    Script Date: 07/06/2013 15:03:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [EDI].[usp_GetSentFile_EDIFile] 
	@ClinicID	INT
	, @StatusIDs NVARCHAR(100)
	, @UserID INT
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
AS
BEGIN
	SET NOCOUNT ON;

	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END	
	
	SELECT
		[EDIFile].[EDIFileID]
		,[EDIFile].[X12FileRelPath]
		,[EDIFile].[RefFileRelPath]
		,[EDIFile].[CreatedOn]		
	FROM
		[EDI].[EDIFile]	
	WHERE
		DATEDIFF(DAY, [EDI].[EDIFile].[CreatedOn], @DateFrom) <= 0 AND DATEDIFF(DAY, [EDI].[EDIFile].[CreatedOn], @DateTo) >= 0
	AND
		[EDI].[EDIFile].[EDIFileID] IN
		(
			SELECT
				[Claim].[ClaimProcessEDIFile].[EDIFileID]
			FROM
				[Claim].[ClaimProcessEDIFile]
			INNER JOIN
				[Claim].[ClaimProcess]
			ON
				[Claim].[ClaimProcess].[ClaimProcessID] = [Claim].[ClaimProcessEDIFile].[ClaimProcessID]
			INNER JOIN
				[Patient].[PatientVisit]
			ON
				[Patient].[PatientVisit].[PatientVisitID] = [Claim].[ClaimProcess].[PatientVisitID]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[Patient].[ClinicID] = @ClinicID
			AND
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[AssignedTo] = @UserID
			AND
				[Patient].[PatientVisit].[IsActive] = 1	
			AND
				[Patient].[Patient].[IsActive] = 1
			AND
				[Claim].[ClaimProcess].[IsActive] = 1	
			AND
				[Claim].[ClaimProcessEDIFile].[IsActive] = 1	
		)
	AND
		[EDI].[EDIFile].[IsActive] = 1
	ORDER BY
		[EDIFile].[LastModifiedOn]
	DESC;
			
			
	-- EXEC [EDI].[usp_GetSentFile_EDIFile] @ClinicID=1, @StatusIDs = '23,24', @UserID = 101,@DateFrom ='1900-01-01',@DateTo='2013-07-11'

END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetByID_ClaimProcessEDIFile]    Script Date: 05/29/2013 16:08:58 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByID_ClaimProcessEDIFile]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByID_ClaimProcessEDIFile]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetByID_ClaimProcessEDIFile]    Script Date: 05/29/2013 16:08:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Claim].[usp_GetByID_ClaimProcessEDIFile]
    @EDIFileID INT 
    , @ClinicID INT
    , @UserID INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		 [PatientVisitID] BIGINT NOT NULL
		, [PatName] NVARCHAR(500) NOT NULL
		, [ChartNumber] NVARCHAR(20) NOT NULL
		, [DOS] DATE NOT NULL
		, [ClinicID] INT NOT NULL
		, [AssignToMe] BIT NOT NULL
	);
	
	INSERT INTO
		@TBL_ANS
	SELECT
		 [PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PatName]
		, [Patient].[ChartNumber]
		, [PatientVisit].[DOS]
		, [Patient].[ClinicID]
		, CAST('1' AS BIT) AS [AssignToMe]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	INNER JOIN
		[Claim].[ClaimProcess]
	ON
		[Claim].[ClaimProcess].[PatientVisitID]	= [Patient].[PatientVisit].[PatientVisitID]
	INNER JOIN
		[Claim].[ClaimProcessEDIFile]
	ON
		[Claim].[ClaimProcessEDIFile].[ClaimProcessID] = [Claim].[ClaimProcess].[ClaimProcessID]
	INNER JOIN
		[EDI].[EDIFile]
	ON
		[EDI].[EDIFile].[EDIFileID] = [Claim].[ClaimProcessEDIFile].[EDIFileID]
	WHERE
		[EDI].[EDIFile].[EDIFileID] = @EDIFileID
	AND
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[AssignedTo] = @UserID

	
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Claim].[usp_GetByID_ClaimProcessEDIFile] @EDIFileID  = 8052 , @ClinicID = 1, @UserID = 101
END




GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearchClinic_Provider]    Script Date: 05/29/2013 17:11:57 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearchClinic_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearchClinic_Provider]
GO


/****** Object:  StoredProcedure [Billing].[usp_GetBySearchClinic_Provider]    Script Date: 05/29/2013 17:11:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Billing].[usp_GetBySearchClinic_Provider]
	@StartBy VARCHAR(1) = NULL
	, @ClinicID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
		
		, [Billing].[Provider].[ProviderID]
		
	FROM
		[Billing].[Provider]   	
	WHERE 
	[Billing].[Provider].[LastName]	
	LIKE 
		@StartBy + '%'
	AND
		[Billing].[Provider].[ClinicID] = @ClinicID
	AND
		[Billing].[Provider].[IsActive] = 1
	ORDER BY
		1 ASC;
	
	-- EXEC [Billing].[usp_GetBySearch_Clinic] @UserID = 101 , @StartBy='A'
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetAutocomplete_User]    Script Date: 06/27/2013 15:01:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetAutocomplete_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetAutocomplete_User]
GO



/****** Object:  StoredProcedure [User].[usp_GetAutocomplete_User]    Script Date: 06/27/2013 15:01:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- Select all records from the table

CREATE PROCEDURE [User].[usp_GetAutocomplete_User] 
	@stats	NVARCHAR (150) = NULL
	, @ManagerRoleID TINYINT
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	DECLARE @USER_TMP TABLE
	(
		[USER_ID] INT NOT NULL
	);
	
	INSERT INTO
		@USER_TMP
	SELECT 
		[User].[UserRole].[UserID]
	FROM 
		[User].[UserRole]
	WHERE
		[User].[UserRole].[RoleID] = @ManagerRoleID
	AND
		[User].[UserRole].[IsActive] = 1;
	
	DELETE FROM
		@USER_TMP
	WHERE
		[USER_ID] IN
		(
			SELECT 
				[User].[UserRole].[UserID]
			FROM 
				[User].[UserRole]
			WHERE
				[User].[UserRole].[RoleID] < @ManagerRoleID
			AND
				[User].[UserRole].[IsActive] = 1
		)
	OR
		[USER_ID] IN
		(
			SELECT 
				[User].[User].[UserID]
			FROM 
				[User].[User]
			WHERE
				[User].[User].[ManagerID] IS NOT NULL
			AND
				[User].[User].[IsActive] = 1
		);
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT
			([User].[User].[LastName] +[User].[User].[FirstName] + ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
		FROM
			[User].[User]
		WHERE
			[User].[User].[UserID] IN
			(
				SELECT
					[User].[UserClinic].[UserID]
				FROM
					[User].[UserClinic]
				WHERE
					[User].[UserClinic].[IsActive] = 1
			)
		AND
			[User].[User].[UserID] IN
			(
				SELECT 
					[USER_ID]
				FROM 
					@USER_TMP
			)
		AND
			[User].[User].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
		FROM
			[User].[User]
		WHERE
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') LIKE @stats ESCAPE '\'		
		AND
			[User].[User].[UserID] IN
			(
				SELECT
					[User].[UserClinic].[UserID]
				FROM
					[User].[UserClinic]
				WHERE
					[User].[UserClinic].[IsActive] = 1
			)
		AND
			[User].[User].[UserID] IN
			(
				SELECT 
					[USER_ID]
				FROM 
					@USER_TMP
			)
		AND
			[User].[User].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT  TOP 10
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
			FROM
				[User].[User]
			WHERE
				[User].[User].[UserName] LIKE @stats ESCAPE '\'
			AND
				[User].[User].[UserID] IN
				(
					SELECT
						[User].[UserClinic].[UserID]
					FROM
						[User].[UserClinic]
					WHERE
						[User].[UserClinic].[IsActive] = 1
				)
			AND
				[User].[User].[UserID] IN
				(
					SELECT 
						[USER_ID]
					FROM 
						@USER_TMP
				)
			AND
				[User].[User].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT 	TOP 10
				([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
			FROM
				[User].[User]
			WHERE
				([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') LIKE @stats ESCAPE '\'
			AND
				[User].[User].[UserID] IN
				(
					SELECT
						[User].[UserClinic].[UserID]
					FROM
						[User].[UserClinic]
					WHERE
						[User].[UserClinic].[IsActive] = 1
				)
			AND
				[User].[User].[UserID] IN
				(
					SELECT 
						[USER_ID]
					FROM 
						@USER_TMP
				)
			AND
				[User].[User].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
		
	SELECT * FROM @TBL_ANS;	
	
	-- EXEC [User].[usp_GetAutoComplete_User] @stats = 'R', @ManagerRoleID = 2
	-- EXEC [User].[usp_GetAutoComplete_User] @stats = '', @ManagerRoleID = 2
END


GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetByAZClinic_Provider]    Script Date: 06/04/2013 14:54:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetByAZClinic_Provider]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetByAZClinic_Provider]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetByAZClinic_Provider]    Script Date: 06/04/2013 14:54:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--For providerwise reports

CREATE PROCEDURE [Billing].[usp_GetByAZClinic_Provider] 

@ClinicID      int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    DECLARE @TBL_ALL TABLE
    (
		[ClinicName] [nvarchar](400) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	 SELECT
		(LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
	FROM
		[Billing].[Provider]  
		
	WHERE
	
	[Billing].[Provider].[ClinicID] = @ClinicID
		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ClinicName] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Billing].[usp_GetByAZ_Clinic]
END


GO




-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Patient].[usp_GetReportProvider_PatientVisit]    Script Date: 06/03/2013 14:09:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetReportProvider_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetReportProvider_PatientVisit]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetReportProvider_PatientVisit]    Script Date: 06/03/2013 14:09:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Patient].[usp_GetReportProvider_PatientVisit]	
    @ProviderID INT
	
	
AS
BEGIN
	SET NOCOUNT ON;
	
	
	SELECT
	  ROW_NUMBER() OVER (ORDER BY [PatientVisit].[PatientVisitID] ASC) AS [SN]
	  , [Billing].[Clinic].[ClinicName] as [CLINIC_NAME]
	  , (LTRIM(RTRIM([Billing].[Provider].[LastName] + ' ' + [Billing].[Provider].[FirstName] + ' ' + ISNULL ([Billing].[Provider].[MiddleName], '')))) AS [PROVIDER_NAME]
	  , (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PATIENT_NAME]
	  , [Patient].[PatientVisit].[DOS] as [DOS]
	  	,[MasterData].[ClaimStatus].[ClaimStatusName] as [CLAIM_STATUS]
		,[Patient].[PatientVisit].[PatientVisitID] as [CASE_NO]
		,([Diagnosis].[Diagnosis].[DiagnosisCode]) as DX_COUNT
		
		
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[Patient].[PatientID]=[Patient].[PatientVisit].[PatientID]
		
		INNER JOIN
		
		[Billing].[Clinic]
		
		ON
		[Billing].[Clinic].[ClinicID] = [Patient].[Patient].[ClinicID]
		
		INNER JOIN
		
		[Billing].[Provider]
		
		ON
		
		[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
		
		INNER JOIN
		
		[MasterData].[ClaimStatus]
		
		ON
		
		[MasterData].[ClaimStatus].[ClaimStatusID] = [Patient].[PatientVisit].[ClaimStatusID]
		
		INNER JOIN
		
	[Diagnosis].[Diagnosis]
	
	ON
	
	
		[Diagnosis].[Diagnosis].[DiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
		
		WHERE
		
		[Billing].[Provider].[ProviderID] = @ProviderID
		
		
		
		
		
	
	-- EXEC [Patient].[usp_GetReport_PatientVisit]  @UserID = 103
	-- EXEC [Patient].[usp_GetBySearch_PatientVisit] 
END







GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Billing].[usp_GetBySearchAd_Clinic]    Script Date: 07/04/2013 15:23:47 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Billing].[usp_GetBySearchAd_Clinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Billing].[usp_GetBySearchAd_Clinic]
GO

/****** Object:  StoredProcedure [Billing].[usp_GetBySearchAd_Clinic]    Script Date: 07/04/2013 15:23:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Billing].[usp_GetBySearchAd_Clinic]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Billing].[Clinic].[ClinicID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'ClinicName' AND @OrderByDirection = 'A' THEN [Billing].[Clinic].[ClinicName] END ASC,
				CASE WHEN @orderByField = 'ClinicName' AND @orderByDirection = 'D' THEN [Billing].[Clinic].[ClinicName] END DESC,
				
				CASE WHEN @OrderByField = 'ClinicCode' AND @OrderByDirection = 'A' THEN [Billing].[Clinic].[ClinicCode] END ASC,
				CASE WHEN @orderByField = 'ClinicCode' AND @orderByDirection = 'D' THEN [Billing].[Clinic].[ClinicCode] END DESC,
				
				CASE WHEN @OrderByField = 'IPAName' AND @OrderByDirection = 'A' THEN [Billing].[IPA].[IPAName] END ASC,
				CASE WHEN @orderByField = 'IPAName' AND @orderByDirection = 'D' THEN [Billing].[IPA].[IPAName] END DESC,
				
				CASE WHEN @OrderByField = 'EntityTypeQualifierName' AND @OrderByDirection = 'A' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] END ASC,
				CASE WHEN @orderByField = 'EntityTypeQualifierName' AND @orderByDirection = 'D' THEN [Transaction].[EntityTypeQualifier].[EntityTypeQualifierName] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Billing].[Clinic].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Billing].[Clinic].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
			
			FROM
	   [Billing].[Clinic]
	 
     INNER JOIN
	     [Billing].[IPA]
	ON
	    [Billing].[Clinic].[IPAID]= [Billing].[IPA].[IPAID]
INNER JOIN
	     [Transaction].[EntityTypeQualifier]
	ON
	    [Billing].[Clinic].EntityTypeQualifierID = [Transaction].[EntityTypeQualifier].[EntityTypeQualifierID]  
	WHERE
		[Billing].[Clinic].[ClinicName] LIKE @StartBy + '%' 
	AND
	(
		[Billing].[Clinic].[ClinicName] LIKE '%' + @SearchName + '%' 
	OR
		[Billing].[Clinic].[ClinicCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Billing].[Clinic].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Billing].[Clinic].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT 
		[Clinic].[ClinicID], [Clinic].[ClinicCode], [Clinic].[ClinicName], [Billing].[IPA].[IPAName], [Transaction].[EntityTypeQualifier].[EntityTypeQualifierName], [Clinic].[IsActive]
	FROM
		[Clinic] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [Clinic].[ClinicID]
		
	
		
INNER JOIN
	     [Billing].[IPA]
	ON
	    [Billing].[Clinic].[IPAID]= [Billing].[IPA].[IPAID]
INNER JOIN
	     [Transaction].[EntityTypeQualifier]
	ON
	    [Billing].[Clinic].EntityTypeQualifierID = [Transaction].[EntityTypeQualifier].[EntityTypeQualifierID]
	WHERE
	
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	
END

-- EXEC [Billing].[usp_GetBySearchAd_Clinic] @UserID  = 1 ,  @StartBy='A'
	-- EXEC [Billing].[usp_GetBySearchAd_Clinic] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'





GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetNameByID_ClaimDiagnosis]    Script Date: 06/05/2013 10:15:21 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetNameByID_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetNameByID_ClaimDiagnosis]
GO

/****** Object:  StoredProcedure [Claim].[usp_GetNameByID_ClaimDiagnosis]    Script Date: 06/05/2013 10:15:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Claim].[usp_GetNameByID_ClaimDiagnosis] 
	@PatientVisitID BIGINT
	, @IsActive BIT 
	, @DescType NVARCHAR(15) = NULL
	
AS
BEGIN
	SET NOCOUNT ON;
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc')) OR (@DescType = 'ShortDesc')
	BEGIN
		SELECT
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[PatientVisitID] = [Patient].[PatientVisit].[PatientVisitID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosis].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosis].[IsActive] ELSE @IsActive END
		
	END			
	IF (@DescType = 'MediumDesc')
	BEGIN
		SELECT
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[PatientVisitID] = [Patient].[PatientVisit].[PatientVisitID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosis].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosis].[IsActive] ELSE @IsActive END
	END	
	IF (@DescType = 'LongDesc')
	BEGIN
		SELECT
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[PatientVisitID] = [Patient].[PatientVisit].[PatientVisitID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosis].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosis].[IsActive] ELSE @IsActive END
	END	
	IF (@DescType = 'CustomDesc')
	BEGIN
		SELECT
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			, (ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - DG' + ISNULL([Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode], '**') + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']') AS [NAME_CODE]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Claim].[ClaimDiagnosis]
		ON
			[Claim].[ClaimDiagnosis].[PatientVisitID] = [Patient].[PatientVisit].[PatientVisitID]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Claim].[ClaimDiagnosis].[DiagnosisID] = [Diagnosis].[Diagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosis].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Claim].[ClaimDiagnosis].[IsActive] ELSE @IsActive END
	END			
	
	-- EXEC [Claim].[usp_GetNameByID_ClaimDiagnosis] @PatientVisitID = 22690, @IsActive=1, @DescType = 'LongDesc'
	-- EXEC [Claim].[usp_GetNameByID_ClaimDiagnosis] @PatientVisitID = 2, @IsActive=0
	-- EXEC [Claim].[usp_GetNameByID_ClaimDiagnosis] @PatientVisitID = 4333, @IsActive=1
END






GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT]    Script Date: 06/25/2013 14:49:58 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT]    Script Date: 06/25/2013 14:49:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT]
	@PatientVisitID	BIGINT 
	, @ClaimNumber BIGINT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT
		SUM([Claim].[ClaimDiagnosisCPT].[ChargePerUnit] * [Claim].[ClaimDiagnosisCPT].[Unit]) AS [SUM_CHARGE]
	FROM
		[Claim].[ClaimDiagnosisCPT]
	INNER JOIN
		[Claim].[ClaimDiagnosis]
	ON
		[Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
	WHERE
		[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
	AND
		[Claim].[ClaimDiagnosis].[ClaimNumber] IN (@ClaimNumber, '-1')
	AND
		[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
	
	-- EXEC [Claim].[usp_GetAnsi837TotalCharge_ClaimDiagnosisCPT] @PatientVisitID = 23199, @ClaimNumber=5
END





GO



-----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetPkId_ClaimDiagnosis]    Script Date: 06/06/2013 13:49:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetPkId_ClaimDiagnosis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetPkId_ClaimDiagnosis]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetPkId_ClaimDiagnosis]    Script Date: 06/06/2013 13:49:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetPkId_ClaimDiagnosis] 
	@PatientVisitID	BIGINT
	, @DiagnosisID INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [ClaimDiagnosisID] BIGINT 
	);
	
	INSERT INTO
		@TBL_RES
	SELECT
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] AS [ClaimDiagnosisID]
	FROM
		[Claim].[ClaimDiagnosis]
	WHERE
		@PatientVisitID = [Claim].[ClaimDiagnosis].[PatientVisitID]
	AND
		@DiagnosisID = [Claim].[ClaimDiagnosis].[DiagnosisID]
	AND
		[Claim].[ClaimDiagnosis].[IsActive] = 0
		
	SELECT * FROM @TBL_RES;

	-- EXEC [Claim].[usp_GetPkId_ClaimDiagnosis] 1, NULL
	-- EXEC [Claim].[usp_GetPkId_ClaimDiagnosis] 1, 1
	-- EXEC [Claim].[usp_GetPkId_ClaimDiagnosis] 1, 0
END

GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT]    Script Date: 06/11/2013 19:31:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT]    Script Date: 06/11/2013 19:31:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT]
	@PatientVisitID	BIGINT 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @PRIMARY_DIAGNOSIS_ID BIGINT;
				
	DECLARE @DIAGNOSIS_ID BIGINT;
	DECLARE @CLAIM_NUMBER BIGINT;
	
	SELECT 
		@PRIMARY_DIAGNOSIS_ID = [Claim].[ClaimDiagnosis].[DiagnosisID]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Claim].[ClaimDiagnosis]
	ON
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
	WHERE
		[Patient].[PatientVisit].[PrimaryClaimDiagnosisID] IS NOT NULL
	AND
		[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
	AND 
		[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
	IF @PRIMARY_DIAGNOSIS_ID IS NOT NULL AND @PRIMARY_DIAGNOSIS_ID > 0
	BEGIN
		DECLARE @DIAG_COUNT INT;
		
		SELECT 
			@DIAG_COUNT = COUNT([Claim].[ClaimDiagnosis].[DiagnosisID]) 
		FROM 
			[Claim].[ClaimDiagnosis] 
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND
			 [Claim].[ClaimDiagnosis].[DiagnosisID] <> @PRIMARY_DIAGNOSIS_ID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
		IF @DIAG_COUNT = 0
		BEGIN
			SELECT @PRIMARY_DIAGNOSIS_ID = 0;
		END
	END
		
	DECLARE @TBL_DIAG TABLE
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [DIAGNOSIS_ID] BIGINT NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
	);
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
		, [DX_CODE] NVARCHAR(9) NOT NULL
		, [ICD_FORMAT] TINYINT NOT NULL
		, [CLAIM_DIAGNOSIS_CPT_ID] BIGINT NULL
		, [CPT_CODE] NVARCHAR(9) NULL
		, [FACILITY_TYPE_CODE] NVARCHAR(9) NULL
		, [UNIT] INT NULL
		, [CHARGE_PER_UNIT] DECIMAL(9,2) NULL
		, [IS_HCPCS_CODE] BIT NOT NULL
		, [CPT_DOS] DATE NULL
		, [MODI1_CODE] NVARCHAR(9) NULL
		, [MODI2_CODE] NVARCHAR(9) NULL
		, [MODI3_CODE] NVARCHAR(9) NULL
		, [MODI4_CODE] NVARCHAR(9) NULL
	);
		
	IF @PRIMARY_DIAGNOSIS_ID IS NULL OR @PRIMARY_DIAGNOSIS_ID = 0
	BEGIN
		INSERT INTO
			@TBL_DIAG
		SELECT
			[Claim].[ClaimDiagnosis].[DiagnosisID]
			, [Claim].[ClaimDiagnosis].[ClaimNumber] 
		FROM 
			[Claim].[ClaimDiagnosis]
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1
		ORDER BY
			[Claim].[ClaimDiagnosis].[ClaimNumber]
		ASC
			, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
		ASC;
	END
	ELSE
	BEGIN
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[Claim].[ClaimDiagnosis].[DiagnosisID]
				, [Claim].[ClaimDiagnosis].[ClaimNumber] 
			FROM 
				[Claim].[ClaimDiagnosis]
			WHERE 
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] != @PRIMARY_DIAGNOSIS_ID
			AND 
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
		DECLARE @CLAIM_NUMBER_PREV BIGINT;
		
		SELECT @CLAIM_NUMBER_PREV = -1;
				
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @CLAIM_NUMBER_PREV != @CLAIM_NUMBER
			BEGIN
				INSERT INTO
					@TBL_DIAG
				SELECT
					@PRIMARY_DIAGNOSIS_ID
					, @CLAIM_NUMBER;
					
				SELECT @CLAIM_NUMBER_PREV = @CLAIM_NUMBER;
			END
			
			INSERT INTO
				@TBL_DIAG
			SELECT
				@DIAGNOSIS_ID
				, @CLAIM_NUMBER;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
    
    DECLARE 
		CUR_DIAG 
	CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
		SELECT
			[DIAGNOSIS_ID]
			, [CLAIM_NUMBER]
		FROM 
			@TBL_DIAG
		ORDER BY
			[ID]
		ASC;
		
	OPEN CUR_DIAG;
	
	FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
			(
				[CLAIM_NUMBER]
				, [CLAIM_DIAGNOSIS_CPT_ID]
				, [DX_CODE]
				, [ICD_FORMAT]
				, [CPT_CODE]
				, [IS_HCPCS_CODE]
				, [FACILITY_TYPE_CODE]
				, [UNIT]
				, [CHARGE_PER_UNIT]
				, [CPT_DOS]
			)
		SELECT
			@CLAIM_NUMBER AS [CLAIM_NUMBER]
			, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
			, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
			, [Diagnosis].[Diagnosis].[ICDFormat] AS [ICD_FORMAT]
			, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
			, ISNULL([Diagnosis].[CPT].[IsHCPCSCode], 0) AS [IS_HCPCS_CODE]
			, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
			, [Claim].[ClaimDiagnosisCPT].[UNIT]
			, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
			, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
		FROM
			[Claim].[ClaimDiagnosis]
		INNER JOIN
			[Diagnosis].[Diagnosis]
		ON
			[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
		LEFT JOIN
			[Diagnosis].[DiagnosisGroup]
		ON
			[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
		AND
			[Diagnosis].[DiagnosisGroup].[IsActive] = 1
		LEFT JOIN
			[Claim].[ClaimDiagnosisCPT]
		ON
			[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
		AND
			[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
		LEFT JOIN
			[Diagnosis].[CPT]
		ON
			[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
		AND
			[Diagnosis].[CPT].[IsActive] = 1
		LEFT JOIN
			[Billing].[FacilityType]
		ON 
			[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
		AND
			[Billing].[FacilityType].[IsActive] = 1
		WHERE
			 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND
			[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
		AND
			[Diagnosis].[Diagnosis].[IsActive] = 1
		ORDER BY
			[Claim].[ClaimDiagnosis].[ClaimNumber]
		ASC
			, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
		ASC;
	
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
	END
	
	CLOSE CUR_DIAG;
	DEALLOCATE CUR_DIAG;
	
	-- MODIFIERS
	
	DECLARE CUR_TBL CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [CLAIM_DIAGNOSIS_CPT_ID] FROM @TBL_ANS;
	DECLARE @CLAIM_DIAGNOSIS_CPT_ID BIGINT;
	
	OPEN CUR_TBL;
	
	FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @MODIFIER_CODE NVARCHAR(9);
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI1_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 2
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI2_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 3
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI3_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 4
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI4_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
	
		FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	END
	
	CLOSE CUR_TBL;
	DEALLOCATE CUR_TBL;
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;
	
	-- EXEC [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT] @PatientVisitID = 22943
	-- EXEC [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT] @PatientVisitID = 8569
	-- EXEC [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT] @PatientVisitID = 8569
	-- EXEC [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT] @PatientVisitID = 8569
	-- EXEC [Claim].[usp_GetAnsi837Visit_ClaimDiagnosisCPT] @PatientVisitID = 8569
END






GO



-----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetByPkId_PatientVisit]    Script Date: 06/10/2013 19:45:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetByPkId_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetByPkId_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetByPkId_PatientVisit]    Script Date: 06/10/2013 19:45:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select the particular record

CREATE PROCEDURE [Patient].[usp_GetByPkId_PatientVisit] 
	@PatientVisitID	BIGINT
	, @IsActive	BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[Patient].[PatientVisit].*
		, (SELECT
				COUNT([Claim].[ClaimDiagnosis].[ClaimDiagnosisID])
			FROM
				[Claim].[ClaimDiagnosis]
			WHERE
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[IsActive] = 1
		) AS [DX_COUNT]
	FROM
		[Patient].[PatientVisit]
	WHERE
		@PatientVisitID = [Patient].[PatientVisit].[PatientVisitID]
	AND
		[Patient].[PatientVisit].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Patient].[PatientVisit].[IsActive] ELSE @IsActive END;

	-- EXEC [Patient].[usp_GetByPkId_PatientVisit] 1, NULL
	-- EXEC [Patient].[usp_GetByPkId_PatientVisit] 1, 1
	-- EXEC [Patient].[usp_GetByPkId_PatientVisit] 1, 0
END

GO



----------------------------------------------------------------------

----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetNameCode_EDIReceiver]    Script Date: 06/28/2013 19:22:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetNameCode_EDIReceiver]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetNameCode_EDIReceiver]
GO



/****** Object:  StoredProcedure [EDI].[usp_GetNameCode_EDIReceiver]    Script Date: 06/28/2013 19:22:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [EDI].[usp_GetNameCode_EDIReceiver] 
	@ClinicID INT
	, @StatusIDs NVARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		[EDI].[EDIReceiver].[EDIReceiverID]
		, [EDI].[EDIReceiver].[EDIReceiverName] + ' [' + [EDI].[EDIReceiver].[EDIReceiverCode] +']' AS [NAME_CODE]
		, (SELECT
		COUNT ([Patient].[PatientVisit].[PatientVisitID]) AS [EDIReceiver837Count]
		FROM
			[Patient].[PatientVisit]
		INNER JOIN
			[Patient].[Patient]
		ON
			[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
		INNER JOIN
			[Billing].[Provider]
		ON
			[Billing].[Provider].[ProviderID] = [Patient].[Patient].[ProviderID]
		INNER JOIN
			[Insurance].[Insurance]
		ON
			[Insurance].[Insurance].[InsuranceID] = [Patient].[Patient].[InsuranceID]
		WHERE
			[Patient].[Patient].[ClinicID] = @ClinicID
		AND
			[Insurance].[Insurance].[EDIReceiverID] = [EDI].[EDIReceiver].[EDIReceiverID]
		AND
			[Patient].[PatientVisit].[ClaimStatusID] IN
			(
				SELECT 
					[Data] 
				FROM 
					[dbo].[ufn_StringSplit] (@StatusIDs, ',')
			)
		AND
			[Patient].[PatientVisit].[IsActive] = 1
		AND
			[Patient].[Patient].[IsActive] = 1
		AND
			[Insurance].[Insurance].[IsActive] = 1) AS [ClaimCount]
	FROM
		[EDI].[EDIReceiver]
	WHERE
		[EDI].[EDIReceiver].[IsActive] = 1;
			
	-- EXEC [EDI].[usp_GetNameCode_EDIReceiver]  @ClinicID = 1 , @StatusIDs ='16,17,18,19,20'
	-- EXEC [EDI].[usp_GetNameCode_EDIReceiver] 
	-- EXEC [EDI].[usp_GetNameCode_EDIReceiver] 
END



GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT]    Script Date: 06/11/2013 12:29:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT]    Script Date: 06/11/2013 12:29:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT]
	@PatientVisitID	BIGINT 
	, @DescType NVARCHAR(15) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	DECLARE @PRIMARY_DIAGNOSIS_ID BIGINT;
				
	DECLARE @DIAGNOSIS_ID BIGINT;
	DECLARE @CLAIM_NUMBER BIGINT;
	
	SELECT 
		@PRIMARY_DIAGNOSIS_ID = [Claim].[ClaimDiagnosis].[DiagnosisID]
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Claim].[ClaimDiagnosis]
	ON
		[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
	WHERE
		[Patient].[PatientVisit].[PrimaryClaimDiagnosisID] IS NOT NULL
	AND
		[Patient].[PatientVisit].[PatientVisitID] = @PatientVisitID
	AND 
		[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
	IF @PRIMARY_DIAGNOSIS_ID IS NOT NULL AND @PRIMARY_DIAGNOSIS_ID > 0
	BEGIN
		DECLARE @DIAG_COUNT INT;
		
		SELECT 
			@DIAG_COUNT = COUNT([Claim].[ClaimDiagnosis].[DiagnosisID]) 
		FROM 
			[Claim].[ClaimDiagnosis] 
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND
			 [Claim].[ClaimDiagnosis].[DiagnosisID] <> @PRIMARY_DIAGNOSIS_ID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1;
		
		IF @DIAG_COUNT = 0
		BEGIN
			SELECT @PRIMARY_DIAGNOSIS_ID = 0;
		END
	END
		
	DECLARE @TBL_DIAG TABLE
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [DIAGNOSIS_ID] BIGINT NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
	);
	
	DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [CLAIM_NUMBER] BIGINT NOT NULL
		, [DX_NAME_CODE] NVARCHAR(900) NOT NULL
		, [DX_CODE] NVARCHAR(9) NOT NULL
		, [CLAIM_DIAGNOSIS_CPT_ID] BIGINT NOT NULL
		, [CPT_NAME_CODE] NVARCHAR(400) NOT NULL
		, [CPT_CODE] NVARCHAR(9) NOT NULL
		, [FACILITY_TYPE_NAME_CODE] NVARCHAR(400) NOT NULL
		, [FACILITY_TYPE_CODE] NVARCHAR(9) NOT NULL
		, [UNIT] INT NOT NULL
		, [CHARGE_PER_UNIT] DECIMAL(9,2) NOT NULL
		, [CPT_DOS] DATE NOT NULL
		, [MODI1_NAME_CODE] NVARCHAR(165) NULL
		, [MODI1_CODE] NVARCHAR(9) NULL
		, [MODI2_NAME_CODE] NVARCHAR(165) NULL
		, [MODI2_CODE] NVARCHAR(9) NULL
		, [MODI3_NAME_CODE] NVARCHAR(165) NULL
		, [MODI3_CODE] NVARCHAR(9) NULL
		, [MODI4_NAME_CODE] NVARCHAR(165) NULL
		, [MODI4_CODE] NVARCHAR(9) NULL
	);
	
	IF (@DescType IS NULL) OR (NOT (@DescType = 'ShortDesc' OR @DescType = 'MediumDesc' OR @DescType = 'LongDesc' OR @DescType = 'CustomDesc'))
	BEGIN
		SELECT @DescType = 'ShortDesc';
	END
		
	IF @PRIMARY_DIAGNOSIS_ID IS NULL OR @PRIMARY_DIAGNOSIS_ID = 0
	BEGIN
		INSERT INTO
			@TBL_DIAG
		SELECT
			[Claim].[ClaimDiagnosis].[DiagnosisID]
			, [Claim].[ClaimDiagnosis].[ClaimNumber] 
		FROM 
			[Claim].[ClaimDiagnosis]
		WHERE 
			[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
		AND 
			[Claim].[ClaimDiagnosis].[IsActive] = 1
		ORDER BY
			[Claim].[ClaimDiagnosis].[ClaimNumber]
		ASC
			, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
		ASC;
	END
	ELSE
	BEGIN
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[Claim].[ClaimDiagnosis].[DiagnosisID]
				, [Claim].[ClaimDiagnosis].[ClaimNumber] 
			FROM 
				[Claim].[ClaimDiagnosis]
			WHERE 
				[Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] != @PRIMARY_DIAGNOSIS_ID
			AND 
				[Claim].[ClaimDiagnosis].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
		DECLARE @CLAIM_NUMBER_PREV BIGINT;
		
		SELECT @CLAIM_NUMBER_PREV = -1;
				
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @CLAIM_NUMBER_PREV != @CLAIM_NUMBER
			BEGIN
				INSERT INTO
					@TBL_DIAG
				SELECT
					@PRIMARY_DIAGNOSIS_ID
					, @CLAIM_NUMBER;
					
				SELECT @CLAIM_NUMBER_PREV = @CLAIM_NUMBER;
			END
			
			INSERT INTO
				@TBL_DIAG
			SELECT
				@DIAGNOSIS_ID
				, @CLAIM_NUMBER;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
    
    IF @DescType = 'ShortDesc'		-- ShortDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[ShortDesc], '*NO SHORT DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
				, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[ShortDesc], '*NO SHORT DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			INNER JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			INNER JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			INNER JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			AND
				[Billing].[FacilityType].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'MediumDesc'		-- MediumDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[MediumDesc], '*NO MEDIUM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
				, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[MediumDesc], '*NO MEDIUM DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS[CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode]AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			INNER JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			INNER JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			INNER JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			AND
				[Billing].[FacilityType].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'LongDesc'		-- LongDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[LongDesc], '*NO LONG DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
				, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[LongDesc], '*NO LONG DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			INNER JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			INNER JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			INNER JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			AND
				[Billing].[FacilityType].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	ELSE IF @DescType = 'CustomDesc'		-- CustomDesc STARTS
	BEGIN	
		DECLARE 
			CUR_DIAG 
		CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT
				[DIAGNOSIS_ID]
				, [CLAIM_NUMBER]
			FROM 
				@TBL_DIAG
			ORDER BY
				[ID]
			ASC;
			
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO
				@TBL_ANS
				(
					[CLAIM_NUMBER]
					, [CLAIM_DIAGNOSIS_CPT_ID]
					, [DX_NAME_CODE]
					, [DX_CODE]
					, [CPT_NAME_CODE]
					, [CPT_CODE]
					, [FACILITY_TYPE_NAME_CODE]
					, [FACILITY_TYPE_CODE]
					, [UNIT]
					, [CHARGE_PER_UNIT]
					, [CPT_DOS]
				)
			SELECT
				@CLAIM_NUMBER AS [CLAIM_NUMBER]
				, [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisCPTID] AS [CLAIM_DIAGNOSIS_CPT_ID]
				, CASE WHEN [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] IS NULL 
					THEN 
						ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: **'
					ELSE 
						ISNULL([Diagnosis].[Diagnosis].[CustomDesc], '*NO CUSTOM DESC*') + ' - ' + [Diagnosis].[Diagnosis].[DiagnosisCode] + ' - ICD' + CAST([Diagnosis].[Diagnosis].[ICDFormat] AS NVARCHAR(3)) + ' [' + CAST([Diagnosis].[Diagnosis].[DiagnosisID] AS NVARCHAR) + ']' + ' | DG: ' + [Diagnosis].[DiagnosisGroup].[DiagnosisGroupDescription]+ ' - $' + CAST ([Diagnosis].[DiagnosisGroup].[Amount] AS NVARCHAR(15)) + ' ['+ [Diagnosis].[DiagnosisGroup].[DiagnosisGroupCode] +']'
					END 
				AS [NAME_CODE]
				, [Diagnosis].[Diagnosis].[DiagnosisCode] AS [DX_CODE]
				, (ISNULL([Diagnosis].[CPT].[CustomDesc], '*NO CUSTOM DESC*') + ' [' + [Diagnosis].[CPT].[CPTCode] + ']' )  AS [CPT_NAME_CODE]
				, [Diagnosis].[CPT].[CPTCode] AS [CPT_CODE]
				, [Billing].[FacilityType].[FacilityTypeName] + ' [' +[Billing].[FacilityType].[FacilityTypeCode] + ']' AS [FACILITY_TYPE_NAME_CODE]
				, [Billing].[FacilityType].[FacilityTypeCode] AS [FACILITY_TYPE_CODE]
				, [Claim].[ClaimDiagnosisCPT].[UNIT]
				, [Claim].[ClaimDiagnosisCPT].[ChargePerUnit]
				, [Claim].[ClaimDiagnosisCPT].[CPTDOS]
			FROM
				[Claim].[ClaimDiagnosis]
			INNER JOIN
				[Diagnosis].[Diagnosis]
			ON
				[Diagnosis].[Diagnosis].[DiagnosisID] = [Claim].[ClaimDiagnosis].[DiagnosisID]
			INNER JOIN
				[Claim].[ClaimDiagnosisCPT]
			ON
				[Claim].[ClaimDiagnosis].[ClaimDiagnosisID] = [Claim].[ClaimDiagnosisCPT].[ClaimDiagnosisID]
			INNER JOIN
				[Diagnosis].[CPT]
			ON
				[Diagnosis].[CPT].[CPTID] = [Claim].[ClaimDiagnosisCPT].[CPTID]
			INNER JOIN
				[Billing].[FacilityType]
			ON 
				[Billing].[FacilityType].[FacilityTypeID] = [Claim].[ClaimDiagnosisCPT].[FacilityTypeID]
			LEFT JOIN
				[Diagnosis].[DiagnosisGroup]
			ON
				[Diagnosis].[DiagnosisGroup].[DiagnosisGroupID] = [Diagnosis].[Diagnosis].[DiagnosisGroupID]
			AND
				[Diagnosis].[DiagnosisGroup].[IsActive] = 1
			WHERE
				 [Claim].[ClaimDiagnosis].[PatientVisitID] = @PatientVisitID
			AND
				[Claim].[ClaimDiagnosis].[DiagnosisID] = @DIAGNOSIS_ID
			AND
				[Diagnosis].[Diagnosis].[IsActive] = 1
			AND
				[Claim].[ClaimDiagnosisCPT].[IsActive] = 1
			AND
				[Diagnosis].[CPT].[IsActive] = 1
			AND
				[Billing].[FacilityType].[IsActive] = 1
			ORDER BY
				[Claim].[ClaimDiagnosis].[ClaimNumber]
			ASC
				, [Claim].[ClaimDiagnosis].[ClaimDiagnosisID]
			ASC;
		
			FETCH NEXT FROM CUR_DIAG INTO @DIAGNOSIS_ID, @CLAIM_NUMBER;
		END
		
		CLOSE CUR_DIAG;
		DEALLOCATE CUR_DIAG;
	END
	
	-- MODIFIERS
	
	DECLARE CUR_TBL CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [CLAIM_DIAGNOSIS_CPT_ID] FROM @TBL_ANS;
	DECLARE @CLAIM_DIAGNOSIS_CPT_ID BIGINT;
	
	OPEN CUR_TBL;
	
	FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @MODIFIER_NAME NVARCHAR(165);
		DECLARE @MODIFIER_CODE NVARCHAR(9);
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI1_NAME_CODE] = @MODIFIER_NAME
			, [MODI1_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 2
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI2_NAME_CODE] = @MODIFIER_NAME
			, [MODI2_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 3
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI3_NAME_CODE] = @MODIFIER_NAME
			, [MODI3_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
		
		SELECT @MODIFIER_NAME = NULL;
		SELECT @MODIFIER_CODE = NULL;
		
		SELECT
			@MODIFIER_NAME = [Diagnosis].[Modifier].[ModifierName] + ' [' +[Diagnosis].[Modifier].[ModifierCode] + ']' 
			, @MODIFIER_CODE = [Diagnosis].[Modifier].[ModifierCode]
		FROM
			[Diagnosis].[Modifier]
		INNER JOIN
			[Claim].[ClaimDiagnosisCPTModifier]
		ON
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierID] = [Diagnosis].[Modifier].[ModifierID]
		WHERE
			[Claim].[ClaimDiagnosisCPTModifier].[ModifierLevel] = 4
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[ClaimDiagnosisCPTID] = @CLAIM_DIAGNOSIS_CPT_ID
		AND
			[Diagnosis].[Modifier].[IsActive] = 1
		AND
			[Claim].[ClaimDiagnosisCPTModifier].[IsActive] = 1;
			
		UPDATE
			@TBL_ANS
		SET
			[MODI4_NAME_CODE] = @MODIFIER_NAME
			, [MODI4_CODE] = @MODIFIER_CODE
		WHERE
			[CLAIM_DIAGNOSIS_CPT_ID] = @CLAIM_DIAGNOSIS_CPT_ID;
	
		FETCH NEXT FROM CUR_TBL INTO @CLAIM_DIAGNOSIS_CPT_ID;
	END
	
	CLOSE CUR_TBL;
	DEALLOCATE CUR_TBL;
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;
	
	-- EXEC [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT] @PatientVisitID = 4333
	-- EXEC [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'ShortDesc'
	-- EXEC [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'MediumDesc'
	-- EXEC [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'LongDesc'
	-- EXEC [Claim].[usp_GetByPatVisitDx_ClaimDiagnosisCPT] @PatientVisitID = 8569, @DescType= 'CustomDesc'
END






GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier]    Script Date: 06/12/2013 14:42:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier]
GO



/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier]    Script Date: 06/12/2013 14:42:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier] 
	@InterchangeIDQualifierCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [InterchangeIDQualifier_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierID]
	FROM
		[Transaction].[InterchangeIDQualifier]
	WHERE
		@InterchangeIDQualifierCode = [Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode]
	AND
		[Transaction].[InterchangeIDQualifier].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier] 1, NULL
	-- EXEC [Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier] 1, 1
	-- EXEC [Transaction].[usp_GetIDAutoComplete_InterchangeIDQualifier] 1, 0
END




GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_InterchangeIDQualifier]    Script Date: 06/12/2013 14:50:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_InterchangeIDQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_InterchangeIDQualifier]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_InterchangeIDQualifier]    Script Date: 06/12/2013 14:50:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_InterchangeIDQualifier] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] + ' [' +[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[InterchangeIDQualifier]
		WHERE
			[Transaction].[InterchangeIDQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] + ' [' +[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[InterchangeIDQualifier]
		WHERE
			([Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] + ' [' +[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[InterchangeIDQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] + ' [' +[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[InterchangeIDQualifier]
			WHERE
				[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[InterchangeIDQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] + ' [' +[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[InterchangeIDQualifier]
			WHERE
				([Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] + ' [' +[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[InterchangeIDQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_InterchangeIDQualifier] ' '
	-- EXEC [Transaction].[usp_GetAutoComplete_InterchangeIDQualifier] 'I'
END


GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode]    Script Date: 06/12/2013 15:09:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode]    Script Date: 06/12/2013 15:09:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode] 
	@EntityIdentifierCodeCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [EntityIdentifierCode_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeID]
	FROM
		[Transaction].[EntityIdentifierCode]
	WHERE
		@EntityIdentifierCodeCode = [Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode]
	AND
		[Transaction].[EntityIdentifierCode].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode] '01', NULL
	-- EXEC [Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode] 1, 1
	-- EXEC [Transaction].[usp_GetIDAutoComplete_EntityIdentifierCode] 1, 0
END




GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_EntityIdentifierCode]    Script Date: 06/12/2013 15:10:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_EntityIdentifierCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_EntityIdentifierCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_EntityIdentifierCode]    Script Date: 06/12/2013 15:10:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_EntityIdentifierCode] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] + ' [' +[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[EntityIdentifierCode]
		WHERE
			[Transaction].[EntityIdentifierCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] + ' [' +[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[EntityIdentifierCode]
		WHERE
			([Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] + ' [' +[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[EntityIdentifierCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] + ' [' +[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[EntityIdentifierCode]
			WHERE
				[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[EntityIdentifierCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] + ' [' +[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[EntityIdentifierCode]
			WHERE
				([Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] + ' [' +[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[EntityIdentifierCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_EntityIdentifierCode] ' '
	-- EXEC [Transaction].[usp_GetAutoComplete_EntityIdentifierCode] 'I'
END


GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_CurrencyCode]    Script Date: 06/12/2013 15:10:37 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_CurrencyCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_CurrencyCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_CurrencyCode]    Script Date: 06/12/2013 15:10:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_CurrencyCode] 
	@CurrencyCodeCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [CurrencyCode_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[CurrencyCode].[CurrencyCodeID]
	FROM
		[Transaction].[CurrencyCode]
	WHERE
		@CurrencyCodeCode = [Transaction].[CurrencyCode].[CurrencyCodeCode]
	AND
		[Transaction].[CurrencyCode].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_CurrencyCode] '85'
	
END




GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_CurrencyCode]    Script Date: 06/12/2013 15:11:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_CurrencyCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_CurrencyCode]
GO



/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_CurrencyCode]    Script Date: 06/12/2013 15:11:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_CurrencyCode] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[CurrencyCode].[CurrencyCodeName] + ' [' +[Transaction].[CurrencyCode].[CurrencyCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[CurrencyCode]
		WHERE
			[Transaction].[CurrencyCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[CurrencyCode].[CurrencyCodeName] + ' [' +[Transaction].[CurrencyCode].[CurrencyCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[CurrencyCode]
		WHERE
			([Transaction].[CurrencyCode].[CurrencyCodeName] + ' [' +[Transaction].[CurrencyCode].[CurrencyCodeCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[CurrencyCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[CurrencyCode].[CurrencyCodeName] + ' [' +[Transaction].[CurrencyCode].[CurrencyCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[CurrencyCode]
			WHERE
				[Transaction].[CurrencyCode].[CurrencyCodeCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[CurrencyCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[CurrencyCode].[CurrencyCodeName] + ' [' +[Transaction].[CurrencyCode].[CurrencyCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[CurrencyCode]
			WHERE
				([Transaction].[CurrencyCode].[CurrencyCodeName] + ' [' +[Transaction].[CurrencyCode].[CurrencyCodeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[CurrencyCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_CurrencyCode] ' '
	
END


GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_CommunicationNumberQualifier]    Script Date: 06/12/2013 15:11:36 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_CommunicationNumberQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_CommunicationNumberQualifier]
GO



/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_CommunicationNumberQualifier]    Script Date: 06/12/2013 15:11:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_CommunicationNumberQualifier] 
	@CommunicationNumberQualifierCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [CommunicationNumberQualifier_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierID]
	FROM
		[Transaction].[CommunicationNumberQualifier]
	WHERE
		@CommunicationNumberQualifierCode = [Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode]
	AND
		[Transaction].[CommunicationNumberQualifier].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_CommunicationNumberQualifier] 'E'
	
END




GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_CommunicationNumberQualifier]    Script Date: 06/12/2013 15:11:58 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_CommunicationNumberQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_CommunicationNumberQualifier]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_CommunicationNumberQualifier]    Script Date: 06/12/2013 15:11:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_CommunicationNumberQualifier] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] + ' [' +[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[CommunicationNumberQualifier]
		WHERE
			[Transaction].[CommunicationNumberQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] + ' [' +[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[CommunicationNumberQualifier]
		WHERE
			([Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] + ' [' +[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[CommunicationNumberQualifier].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] + ' [' +[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[CommunicationNumberQualifier]
			WHERE
				[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[CommunicationNumberQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] + ' [' +[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[CommunicationNumberQualifier]
			WHERE
				([Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] + ' [' +[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[CommunicationNumberQualifier].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_CommunicationNumberQualifier] ' '
	
END


GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode]    Script Date: 06/13/2013 10:41:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode]
GO



/****** Object:  StoredProcedure [Transaction].[usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode]    Script Date: 06/13/2013 10:41:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Select all records from the table

CREATE PROCEDURE [Transaction].[usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode] 
	@stats	NVARCHAR (150) = NULL

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			([Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] + ' [' +[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[PayerResponsibilitySequenceNumberCode]
		WHERE
			[Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 
			([Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] + ' [' +[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] + ']') AS [NAME_CODE]
		FROM
			[Transaction].[PayerResponsibilitySequenceNumberCode]
		WHERE
			([Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] + ' [' +[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] + ']') LIKE @stats ESCAPE '\'
		AND
			[Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] + ' [' +[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[PayerResponsibilitySequenceNumberCode]
			WHERE
				[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] LIKE @stats ESCAPE '\'
			AND
				[Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				([Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] + ' [' +[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] + ']') AS [NAME_CODE]
			FROM
				[Transaction].[PayerResponsibilitySequenceNumberCode]
			WHERE
				([Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] + ' [' +[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] + ']') LIKE @stats ESCAPE '\'
			AND
				[Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
			END
		
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Transaction].[usp_GetAutoComplete_PayerResponsibilitySequenceNumberCode] ' '
	
END


GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode]    Script Date: 06/13/2013 10:42:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode]    Script Date: 06/13/2013 10:42:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- Select the particular record

CREATE PROCEDURE [Transaction].[usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode] 
	@PayerResponsibilitySequenceNumberCodeCode	nvarchar(3)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_RES TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [PayerResponsibilitySequenceNumberCode_ID] INT NOT NULL
	);

	INSERT INTO
		@TBL_RES
	SELECT
		[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeID]
	FROM
		[Transaction].[PayerResponsibilitySequenceNumberCode]
	WHERE
		@PayerResponsibilitySequenceNumberCodeCode = [Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode]
	AND
		[Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] = 1;
	
	SELECT * FROM @TBL_RES;

	-- EXEC [Transaction].[usp_GetIDAutoComplete_PayerResponsibilitySequenceNumberCode] 'E'
	
END




GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetByUserID_UserClinic]    Script Date: 06/14/2013 16:59:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByUserID_UserClinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByUserID_UserClinic]
GO



/****** Object:  StoredProcedure [User].[usp_GetByUserID_UserClinic]    Script Date: 06/14/2013 16:59:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [User].[usp_GetByUserID_UserClinic]
	@UserID	int 
	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT *
		
	FROM
		 [User].[UserClinic]
	WHERE
	
	 [User].[UserClinic].[UserID] = @UserID
	

	
	-- EXEC [User].[usp_GetByUserID_UserClinic] @UserID = 15
END




GO



----------------------------------------------------------------------

--/****** Object:  StoredProcedure [Configuration].[usp_GetAll_Password]    Script Date: 06/14/2013 17:42:03 ******/
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Configuration].[usp_GetAll_Password]') AND type in (N'P', N'PC'))
--DROP PROCEDURE [Configuration].[usp_GetAll_Password]
--GO


--/****** Object:  StoredProcedure [Configuration].[usp_GetAll_Password]    Script Date: 06/14/2013 17:42:03 ******/
--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

---- Select all records from the table

--CREATE PROCEDURE [Configuration].[usp_GetAll_Password] 
--	@IsActive	BIT = NULL
--AS
--BEGIN
--	SET NOCOUNT ON;

--	SELECT
--		[Configuration].[Password].*
--	FROM
--		[Configuration].[Password]
--	WHERE
--		[Configuration].[Password].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Configuration].[Password].[IsActive] ELSE @IsActive END;
			
--	-- EXEC [Configuration].[usp_GetAll_Password] NULL
--	-- EXEC [Configuration].[usp_GetAll_Password] 1
--	-- EXEC [Configuration].[usp_GetAll_Password] 0
--END

--GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetAgentWiseSummaryNIT_PatientVisit]    Script Date: 07/09/2013 14:41:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAgentWiseSummaryNIT_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAgentWiseSummaryNIT_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetAgentWiseSummaryNIT_PatientVisit]    Script Date: 07/09/2013 14:41:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Patient].[usp_GetAgentWiseSummaryNIT_PatientVisit]
	@UserID INT
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [NIT] BIGINT NOT NULL
		, [BLOCKED] BIGINT NOT NULL
		, [TOTAL] BIGINT NOT NULL

	);
	
	DECLARE @NIT BIGINT;
	DECLARE @Blocked BIGINT;
	DECLARE @TOTAL BIGINT;
	
	
	SELECT 
		@NIT = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit]  WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]  WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (3, 5, 8, 12, 14, 18, 20, 24, 27)
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]   WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK) 
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
-------------
	SELECT 
		@Blocked = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit]  WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]  WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]   WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]   WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
	(
			[Patient].[PatientVisit].[IsActive] = 0
		OR
			[Patient].[Patient].[IsActive] = 0
	);
	
	--	
	
	SELECT 
		@TOTAL = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit]  WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient]  WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT [User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]   WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]   WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
				AND [User].[UserClinic].[IsActive] = 1 
				AND [Billing].[Clinic].[IsActive] = 1
		)
	AND
		([Patient].[PatientVisit].[TargetBAUserID] = @UserID OR [Patient].[PatientVisit].[TargetQAUserID] = @UserID or [Patient].[PatientVisit].[TargetEAUserID] = @UserID)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;	
	
	--
				
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		 @NIT
		, @Blocked
		, @TOTAL
	)
	
	SELECT * FROM @TBL_ANS;		
	
	-- EXEC [Patient].[usp_GetAgentWiseSummaryNIT_PatientVisit] @UserID=116
END





GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetClinicWiseSummaryNIT_PatientVisit]    Script Date: 07/09/2013 14:45:16 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetClinicWiseSummaryNIT_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetClinicWiseSummaryNIT_PatientVisit]
GO

/****** Object:  StoredProcedure [Patient].[usp_GetClinicWiseSummaryNIT_PatientVisit]    Script Date: 07/09/2013 14:45:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Patient].[usp_GetClinicWiseSummaryNIT_PatientVisit]
	@ClinicID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @TBL_ANS TABLE 
	(
		[ID] BIGINT IDENTITY (1, 1) NOT NULL
		, [NIT] BIGINT NOT NULL
		, [BLOCKED] BIGINT NOT NULL
		, [TOTAL] BIGINT NOT NULL

	);
	
	DECLARE @NIT BIGINT;
	DECLARE @Blocked BIGINT;
	DECLARE @TOTAL BIGINT;
	
	SELECT 
		@NIT = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (3, 5, 8, 12, 14, 18, 20, 24, 27)
	AND
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
-------------
	SELECT 
		@Blocked = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
	(
			[Patient].[PatientVisit].[IsActive] = 0
		OR
			[Patient].[Patient].[IsActive] = 0
	);
	
--
	
	SELECT 
		@TOTAL = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;	
	
	--
				
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		 @NIT
		, @Blocked
		, @TOTAL
	)
	
	SELECT * FROM @TBL_ANS;		
	
	-- EXEC [Patient].[usp_GetClinicWiseSummaryNIT_PatientVisit] 1
END





GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetDashboardSummaryNIT_PatientVisit]    Script Date: 07/09/2013 10:08:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetDashboardSummaryNIT_PatientVisit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetDashboardSummaryNIT_PatientVisit]
GO


/****** Object:  StoredProcedure [Patient].[usp_GetDashboardSummaryNIT_PatientVisit]    Script Date: 07/09/2013 10:08:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Patient].[usp_GetDashboardSummaryNIT_PatientVisit]
	@UserID BIGINT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- BIGINTerfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @TBL_ANS TABLE 
	(
		[ID] TINYINT IDENTITY (1, 1) NOT NULL
		, [BLOCKED] BIGINT NOT NULL
		, [NIT] BIGINT NOT NULL
		, [TOTAL] BIGINT NOT NULL
	);
	
	DECLARE @BLOCKED BIGINT;
	DECLARE @NIT BIGINT;
	DECLARE @TOTAL BIGINT;
	
	--
	
	SELECT 
		@BLOCKED = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
	(
			[Patient].[PatientVisit].[IsActive] = 0
		OR
			[Patient].[Patient].[IsActive] = 0
	);	
	
	--
	
	SELECT 
		@NIT = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] IN (3, 5, 8, 12, 14, 18, 20, 24, 27)
	AND
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	--	
	
	SELECT 
		@TOTAL = COUNT_BIG([Patient].[PatientVisit].[PatientVisitID])
	FROM
		[Patient].[PatientVisit] WITH (NOLOCK)
	INNER JOIN
		[Patient].[Patient] WITH (NOLOCK)
	ON
		[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
	WHERE
		[Patient].[PatientVisit].[ClaimStatusID] > 0
	AND 
		[Patient].[Patient].[ClinicID] IN 
		(
			SELECT 
				[User].[UserClinic].[ClinicID] 
			FROM 
				[User].[UserClinic]  WITH (NOLOCK)
			INNER JOIN
				[Billing].[Clinic]  WITH (NOLOCK)
			ON
				[User].[UserClinic].[ClinicID] = [Billing].[Clinic].[ClinicID]
			WHERE 
				[User].[UserClinic].[UserID] = @UserID 
			AND 
				[User].[UserClinic].[IsActive] = 1 
			AND 
				[Billing].[Clinic].[IsActive] = 1
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;	
	
	--
			
	INSERT INTO
		@TBL_ANS
	VALUES
	(
		@BLOCKED
		, @NIT
		, @TOTAL
	);
	
	SELECT * FROM @TBL_ANS ORDER BY [ID] ASC;		
	
	-- EXEC [Patient].[usp_GetDashboardSummaryNIT_PatientVisit] 101
END







GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [User].[usp_GetByUserID_UserRole]    Script Date: 06/17/2013 11:59:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByUserID_UserRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByUserID_UserRole]
GO


/****** Object:  StoredProcedure [User].[usp_GetByUserID_UserRole]    Script Date: 06/17/2013 11:59:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--Created by sai for Assign Manager


CREATE PROCEDURE [User].[usp_GetByUserID_UserRole]
	@UserID	int 
	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
    SELECT *
		
	FROM
		 [User].[UserRole]
	WHERE
	
	 [User].[UserRole].[UserID] = @UserID
	

	
	-- EXEC [User].[usp_GetByUserID_UserClinic] @UserID = 15
END





GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837EDIReceiver_ClaimProcess]    Script Date: 06/24/2013 18:09:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAnsi837EDIReceiver_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAnsi837EDIReceiver_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837EDIReceiver_ClaimProcess]    Script Date: 06/24/2013 18:09:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Claim].[usp_GetAnsi837EDIReceiver_ClaimProcess]
	@EDIReceiverID INT
AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT
		 [EDI].[EDIReceiver].[EDIReceiverID]
		, [EDI].[EDIReceiver].[EDIReceiverCode]
		, [EDI].[EDIReceiver].[EDIReceiverName]
		, [EDI].[EDIReceiver].[AuthorizationInformationQualifierID]
		, [EDI].[EDIReceiver].[AuthorizationInformation]
		, [EDI].[EDIReceiver].[SecurityInformationQualifierID]
		, [EDI].[EDIReceiver].[SecurityInformation]
		, [EDI].[EDIReceiver].[SecurityInformationQualifierUserName]
		, [EDI].[EDIReceiver].[SecurityInformationQualifierPassword]
		, [EDI].[EDIReceiver].[LastInterchangeControlNumber]
		, [EDI].[EDIReceiver].[SenderInterchangeIDQualifierID]
		, [EDI].[EDIReceiver].[SenderInterchangeID]
		, [EDI].[EDIReceiver].[ReceiverInterchangeIDQualifierID]
		, [EDI].[EDIReceiver].[ReceiverInterchangeID]
		, [EDI].[EDIReceiver].[TransactionSetPurposeCodeID]
		, [EDI].[EDIReceiver].[TransactionTypeCodeID]
		, [EDI].[EDIReceiver].[IsGroupPractice]
		, [EDI].[EDIReceiver].[ClaimMediaID]
		, [EDI].[EDIReceiver].[FunctionalIdentifierCode]
		, [EDI].[EDIReceiver].[ApplicationSenderCode]
		, [EDI].[EDIReceiver].[ApplicationReceiverCode]
		, [EDI].[EDIReceiver].[InterchangeUsageIndicatorID]
		, [EDI].[EDIReceiver].[SubmitterEntityIdentifierCodeID]
		, [EDI].[EDIReceiver].[ReceiverEntityIdentifierCodeID]
		, [EDI].[EDIReceiver].[BillingProviderEntityIdentifierCodeID]
		, [EDI].[EDIReceiver].[SubscriberEntityIdentifierCodeID]
		, [EDI].[EDIReceiver].[PayerEntityIdentifierCodeID]
		, [EDI].[EDIReceiver].[EntityTypeQualifierID]
		, [EDI].[EDIReceiver].[CurrencyCodeID]
		, [EDI].[EDIReceiver].[PayerResponsibilitySequenceNumberCodeID]
		, [EDI].[EDIReceiver].[EmailCommunicationNumberQualifierID]
		, [EDI].[EDIReceiver].[FaxCommunicationNumberQualifierID]
		, [EDI].[EDIReceiver].[PhoneCommunicationNumberQualifierID]
		, [EDI].[EDIReceiver].[PatientEntityTypeQualifierID]
		, [EDI].[EDIReceiver].[ProviderEntityTypeQualifierID]
		, [EDI].[EDIReceiver].[InsuranceEntityTypeQualifierID]
		, [EDI].[EDIReceiver].[Comment]
		, [EDI].[EDIReceiver].[IsActive]
		, [EDI].[EDIReceiver].[LastModifiedBy]
		, [EDI].[EDIReceiver].[LastModifiedOn]
		, [EDI].[EDIReceiver].[CreatedBy]
		, [EDI].[EDIReceiver].[CreatedOn]
		
		, [Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierCode]
		, [SENDER].[InterchangeIDQualifierCode] AS [SenderInterchangeIDQualifierCode]
		, [RECEIVER].[InterchangeIDQualifierCode] AS [ReceiverInterchangeIDQualifierCode]
		, [Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeCode]
		, [Transaction].[TransactionTypeCode].[TransactionTypeCodeCode]
		, [Transaction].[ClaimMedia].[ClaimMediaCode]
		, [Transaction].[ClaimMedia].[MaxDiagnosis]
		, [Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorCode]
		, [SUBMITTER].[EntityIdentifierCodeCode] AS [SubmitterEntityIdentifierCodeCode]
		, [RECEIVER1].[EntityIdentifierCodeCode] AS [ReceiverEntityIdentifierCodeCode]
		, [BILLING_PROVIDER].[EntityIdentifierCodeCode] AS [BillingProviderEntityIdentifierCodeCode]
		, [SUBSCRIBER].[EntityIdentifierCodeCode] AS [SubscriberEntityIdentifierCodeCode]
		, [PAYER].[EntityIdentifierCodeCode] AS [PayerEntityIdentifierCodeCode]
		, [PROVIDER].[EntityTypeQualifierCode] AS [ProviderEntityTypeQualifierCode]
		, [Transaction].[EntityTypeQualifier].[EntityTypeQualifierCode]
		, [Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode]
		, [EMAIL].[CommunicationNumberQualifierCode] AS [EmailCommunicationNumberQualifierCode]
		, [FAX].[CommunicationNumberQualifierCode] AS [FaxCommunicationNumberQualifierCode]
		, [PHONE].[CommunicationNumberQualifierCode] AS [PhoneCommunicationNumberQualifierCode]
		, [PATIENT].[EntityTypeQualifierCode] AS [PatientEntityTypeQualifierCode]
		, [INSURANCE].[EntityTypeQualifierCode] AS [InsuranceEntityTypeQualifierCode]
	FROM
		[EDI].[EDIReceiver]
	INNER JOIN
		[Transaction].[AuthorizationInformationQualifier]
	ON
		[Transaction].[AuthorizationInformationQualifier].[AuthorizationInformationQualifierID] = [EDI].[EDIReceiver].[AuthorizationInformationQualifierID]
	INNER JOIN
		[Transaction].[InterchangeIDQualifier] SENDER
	ON
		[SENDER].[InterchangeIDQualifierID] = [EDI].[EDIReceiver].[SenderInterchangeIDQualifierID]
	INNER JOIN
		[Transaction].[InterchangeIDQualifier] RECEIVER
	ON
		[RECEIVER].[InterchangeIDQualifierID] = [EDI].[EDIReceiver].[ReceiverInterchangeIDQualifierID]
	INNER JOIN
		[Transaction].[TransactionSetPurposeCode]
	ON
		[Transaction].[TransactionSetPurposeCode].[TransactionSetPurposeCodeID] = [EDI].[EDIReceiver].[TransactionSetPurposeCodeID]
	INNER JOIN
		[Transaction].[TransactionTypeCode]
	ON
		[Transaction].[TransactionTypeCode].[TransactionTypeCodeID] = [EDI].[EDIReceiver].[TransactionTypeCodeID]
	INNER JOIN
		[Transaction].[ClaimMedia]
	ON
		[Transaction].[ClaimMedia].[ClaimMediaID] = [EDI].[EDIReceiver].[ClaimMediaID]
	INNER JOIN 
		[Transaction].[InterchangeUsageIndicator]
	ON
		[Transaction].[InterchangeUsageIndicator].[InterchangeUsageIndicatorID] = [EDI].[EDIReceiver].[InterchangeUsageIndicatorID]
	INNER JOIN
		[Transaction].[EntityIdentifierCode] SUBMITTER
	ON
		[SUBMITTER].[EntityIdentifierCodeID] = [EDI].[EDIReceiver].[SubmitterEntityIdentifierCodeID]
	INNER JOIN
		[Transaction].[EntityIdentifierCode] RECEIVER1
	ON
		[RECEIVER1].[EntityIdentifierCodeID] = [EDI].[EDIReceiver].[ReceiverEntityIdentifierCodeID]
	INNER JOIN
		[Transaction].[EntityIdentifierCode] BILLING_PROVIDER
	ON
		[BILLING_PROVIDER].[EntityIdentifierCodeID] = [EDI].[EDIReceiver].[BillingProviderEntityIdentifierCodeID]
	INNER JOIN
		[Transaction].[EntityIdentifierCode] SUBSCRIBER
	ON
		[SUBSCRIBER].[EntityIdentifierCodeID] = [EDI].[EDIReceiver].[SubscriberEntityIdentifierCodeID]
	INNER JOIN
		[Transaction].[EntityIdentifierCode] PAYER
	ON
		[PAYER].[EntityIdentifierCodeID] = [EDI].[EDIReceiver].[PayerEntityIdentifierCodeID]
	INNER JOIN
		[Transaction].[EntityTypeQualifier] PROVIDER
	ON
		[PROVIDER].[EntityTypeQualifierID] = [EDI].[EDIReceiver].[ProviderEntityTypeQualifierID]
	INNER JOIN
		[Transaction].[EntityTypeQualifier] 
	ON
		[Transaction].[EntityTypeQualifier].[EntityTypeQualifierID] = [EDI].[EDIReceiver].[EntityTypeQualifierID]
	INNER JOIN
		[Transaction].[PayerResponsibilitySequenceNumberCode]
	ON
		[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeID] = [EDI].[EDIReceiver].[PayerResponsibilitySequenceNumberCodeID]
	INNER JOIN
		[Transaction].[CommunicationNumberQualifier] EMAIL
	ON
		[EMAIL].[CommunicationNumberQualifierID] = [EDI].[EDIReceiver].[EmailCommunicationNumberQualifierID]
	INNER JOIN
		[Transaction].[CommunicationNumberQualifier] FAX
	ON
		[FAX].[CommunicationNumberQualifierID] = [EDI].[EDIReceiver].[FaxCommunicationNumberQualifierID]
	INNER JOIN
		[Transaction].[CommunicationNumberQualifier] PHONE
	ON
		[PHONE].[CommunicationNumberQualifierID] = [EDI].[EDIReceiver].[PhoneCommunicationNumberQualifierID]
	INNER JOIN
		[Transaction].[EntityTypeQualifier] PATIENT
	ON
		[PATIENT].[EntityTypeQualifierID] = [EDI].[EDIReceiver].[PatientEntityTypeQualifierID]
	INNER JOIN
		[Transaction].[EntityTypeQualifier] INSURANCE
	ON
		[INSURANCE].[EntityTypeQualifierID] = [EDI].[EDIReceiver].[InsuranceEntityTypeQualifierID]
		
	WHERE
		[EDI].[EDIReceiver].[EDIReceiverID] = @EDIReceiverID
	AND
		[EDI].[EDIReceiver].[IsActive] = 1
	AND
		[Transaction].[AuthorizationInformationQualifier].[IsActive] = 1
	AND
		[SENDER].[IsActive] = 1
	AND
		[RECEIVER].[IsActive] = 1
	AND
		[Transaction].[TransactionSetPurposeCode].[IsActive] = 1
	AND
		[Transaction].[TransactionTypeCode].[IsActive] = 1
	AND
		[Transaction].[ClaimMedia].[IsActive] = 1
	AND
		[Transaction].[InterchangeUsageIndicator].[IsActive] = 1
	AND
		[SUBMITTER].[IsActive] = 1
	AND
		[RECEIVER1].[IsActive] = 1
	AND
		[BILLING_PROVIDER].[IsActive] = 1
	AND
		[SUBSCRIBER].[IsActive] = 1
	AND
		[PAYER].[IsActive] = 1
	AND
		[PROVIDER].[IsActive] = 1
	AND
		[Transaction].[EntityTypeQualifier].[IsActive] = 1
	AND
		[Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] = 1
	AND
		[EMAIL].[IsActive] = 1
	AND
		[FAX].[IsActive] = 1
	AND
		[PHONE].[IsActive] = 1
	AND
		[PATIENT].[IsActive] = 1
	AND
		[INSURANCE].[IsActive] = 1
		
	-- EXEC [Claim].[usp_GetAnsi837EDIReceiver_ClaimProcess] 1
END





GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Clinic_ClaimProcess]    Script Date: 06/19/2013 13:24:47 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAnsi837Clinic_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAnsi837Clinic_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Clinic_ClaimProcess]    Script Date: 06/19/2013 13:24:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetAnsi837Clinic_ClaimProcess]
	@ClinicID INT
AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT
		[Billing].[Clinic].[ClinicID]
		, [Billing].[Clinic].[ClinicCode]
		, [Billing].[Clinic].[ClinicName]
		, [Billing].[Clinic].[ContactPersonLastName]
		, [Billing].[Clinic].[ContactPersonFirstName]
		, [Billing].[Clinic].[ContactPersonMiddleName]
		, [Billing].[Clinic].[ContactPersonEmail]
		, [Billing].[Clinic].[ContactPersonPhoneNumber]
		, [Billing].[Clinic].[ContactPersonFax]
		, [Billing].[Clinic].[NPI] AS [CLINIC_NPI]
		, [Billing].[Clinic].[TaxID] AS [CLINIC_TAX_ID]
		
		, [Billing].[IPA].[IPAName]
		, [Billing].[IPA].[NPI] AS [IPA_NPI]
		, [Billing].[IPA].[StreetName]
		, [Billing].[IPA].[TaxID] AS [IPA_TAX_ID]
		, [CLINIC_ENTITY_TYPE].[EntityTypeQualifierCode] AS [ClinicEntityTypeQualifierCode]
		, [IPA_ENTITY_TYPE].[EntityTypeQualifierCode] AS [IPAEntityTypeQualifierCode]
		, [MasterData].[City].[CityName] AS [IPACityName]
		, [MasterData].[City].[ZipCode] AS [IPAZipCode]
		, [MasterData].[State].[StateCode] AS [IPAStateCode]
		, [MasterData].[Country].[CountryCode] AS [IPACountryCode]
		
	FROM
		[Billing].[Clinic]
	INNER JOIN
		[Billing].[IPA]
	ON
		[Billing].[IPA].[IPAID] = [Billing].[Clinic].[IPAID]
	INNER JOIN
		[Transaction].[EntityTypeQualifier] CLINIC_ENTITY_TYPE
	ON
		[CLINIC_ENTITY_TYPE].[EntityTypeQualifierID] = [Billing].[Clinic].[EntityTypeQualifierID]
	INNER JOIN
		[Transaction].[EntityTypeQualifier] IPA_ENTITY_TYPE
	ON
		[IPA_ENTITY_TYPE].[EntityTypeQualifierID] = [Billing].[IPA].[EntityTypeQualifierID]
	INNER JOIN
		[MasterData].[City]
	ON
		[MasterData].[City].[CityID] = [Billing].[IPA].[CityID]
	INNER JOIN
		[MasterData].[State]
	ON
		[MasterData].[State].[StateID] = [Billing].[IPA].[StateID]
	INNER JOIN
		[MasterData].[Country]
	ON
		[MasterData].[Country].[CountryID] = [Billing].[IPA].[CountryID]
	WHERE
		[Billing].[Clinic].[ClinicID] = @ClinicID
	AND
		[Billing].[Clinic].[IsActive] = 1
	AND
		[Billing].[IPA].[IsActive] = 1
	AND
		[CLINIC_ENTITY_TYPE].[IsActive] = 1
	AND
		[IPA_ENTITY_TYPE].[IsActive] = 1
	AND
		[MasterData].[City].[IsActive] = 1
	AND
		[MasterData].[State].[IsActive] = 1
	AND
		[MasterData].[Country].[IsActive] = 1
		
	-- EXEC [Claim].[usp_GetAnsi837Clinic_ClaimProcess] 1
END



GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetByClinicID_UserClinic]    Script Date: 06/28/2013 17:41:01 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetByClinicID_UserClinic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetByClinicID_UserClinic]
GO



/****** Object:  StoredProcedure [User].[usp_GetByClinicID_UserClinic]    Script Date: 06/28/2013 17:41:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--Created by sai for displaying manager name in Clinic setup - edit


CREATE PROCEDURE [User].[usp_GetByClinicID_UserClinic]
	@ClinicID	int
   
	
	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    
 DECLARE @USER_TMP TABLE
	(
		[USER_ID] INT NOT NULL
	);
	
	INSERT INTO
		@USER_TMP
	SELECT 
		[User].[UserRole].[UserID]
	FROM 
		[User].[UserRole]
	WHERE
		[User].[UserRole].[RoleID] = 2
	AND
		[User].[UserRole].[IsActive] = 1;
	
	DELETE FROM
		@USER_TMP
	WHERE
		[USER_ID] IN
		(
			SELECT 
				[User].[UserRole].[UserID]
			FROM 
				[User].[UserRole]
			WHERE
				[User].[UserRole].[RoleID] < 2
			AND
				[User].[UserRole].[IsActive] = 1
		)
	OR
		[USER_ID] IN
		(
			SELECT 
				[User].[User].[UserID]
			FROM 
				[User].[User]
			WHERE
				[User].[User].[ManagerID] IS NOT NULL
			AND
				[User].[User].[IsActive] = 1
		);   
   
    
   SELECT (
		[User].[User].[LastName] +[User].[User].[FirstName] + ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
		, [User].[User].[UserID] , [User].[UserClinic].[UserClinicID]
			
	FROM
		 [User].[UserClinic]
		 
		 INNER JOIN
		 
		 [User].[User] 
		 
		 ON
		 
		 [User].[UserClinic].[UserID] = [User].[User].[UserID]
		 
		
		 
	  WHERE
	 
	 [User].[UserClinic].[ClinicID] = @ClinicID
	 
	AND
			[User].[User].[UserID] IN
			(
				SELECT 
					[USER_ID]
				FROM 
					@USER_TMP
			)
	 
	
	
	-- EXEC [User].[usp_GetByClinicID_UserClinic] @ClinicID = 2
END








GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837FacilityDone_ClaimProcess]    Script Date: 06/20/2013 11:50:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAnsi837FacilityDone_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAnsi837FacilityDone_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837FacilityDone_ClaimProcess]    Script Date: 06/20/2013 11:50:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetAnsi837FacilityDone_ClaimProcess]
	@FacilityDoneID INT
AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT
		[Billing].[FacilityDone].[FacilityDoneName]
		, [Billing].[FacilityDone].[NPI]
		, [Billing].[FacilityDone].[TaxID]
		, [Billing].[FacilityDone].[StreetName]
		, [MasterData].[City].[CityName]
		, ISNULL([MasterData].[City].[ZipCode], '') AS [ZipCode]
		, [MasterData].[State].[StateCode]
		, [MasterData].[Country].[CountryCode]
	FROM
		[Billing].[FacilityDone]
	LEFT JOIN
		[MasterData].[City]
	ON
		[MasterData].[City].[CityID] = [Billing].[FacilityDone].[CityID]
	LEFT JOIN
		[MasterData].[State]
	ON
		[MasterData].[State].[StateID] = [Billing].[FacilityDone].[StateID]
	LEFT JOIN
		[MasterData].[Country]
	ON
		[MasterData].[Country].[CountryID] = [Billing].[FacilityDone].[CountryID]
	WHERE
		[Billing].[FacilityDone].[FacilityDoneID] = @FacilityDoneID
	AND
		[Billing].[FacilityDone].[IsActive] = 1
	AND
		[MasterData].[City].[IsActive] = 1
	AND
		[MasterData].[State].[IsActive] = 1
	AND
		[MasterData].[Country].[IsActive] = 1
	
		
	-- EXEC [Claim].[usp_GetAnsi837FacilityDone_ClaimProcess] 1
END




GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_PayerResponsibilitySequenceNumberCode]    Script Date: 06/20/2013 14:16:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_PayerResponsibilitySequenceNumberCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_PayerResponsibilitySequenceNumberCode]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_PayerResponsibilitySequenceNumberCode]    Script Date: 06/20/2013 14:16:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Transaction].[usp_GetBySearch_PayerResponsibilitySequenceNumberCode]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'PayerResponsibilitySequenceNumberCodeName' AND @OrderByDirection = 'A' THEN [Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] END ASC,
				CASE WHEN @orderByField = 'PayerResponsibilitySequenceNumberCodeName' AND @orderByDirection = 'D' THEN [Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] END DESC,
				
				CASE WHEN @OrderByField = 'PayerResponsibilitySequenceNumberCodeCode' AND @OrderByDirection = 'A' THEN [Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] END ASC,
				CASE WHEN @orderByField = 'PayerResponsibilitySequenceNumberCodeCode' AND @orderByDirection = 'D' THEN [Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[PayerResponsibilitySequenceNumberCode].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[PayerResponsibilitySequenceNumberCode].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[PayerResponsibilitySequenceNumberCode]
	WHERE
		[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[PayerResponsibilitySequenceNumberCode].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeID], [PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeCode], [PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeName], [PayerResponsibilitySequenceNumberCode].[IsActive]
	FROM
		[PayerResponsibilitySequenceNumberCode] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [PayerResponsibilitySequenceNumberCode].[PayerResponsibilitySequenceNumberCodeID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_PayerResponsibilitySequenceNumberCode] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_PayerResponsibilitySequenceNumberCode] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_CurrencyCode]    Script Date: 06/20/2013 14:36:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_CurrencyCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_CurrencyCode]
GO

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_CurrencyCode]    Script Date: 06/20/2013 14:36:18 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Transaction].[usp_GetBySearch_CurrencyCode]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[CurrencyCode].[CurrencyCodeID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'CurrencyCodeName' AND @OrderByDirection = 'A' THEN [Transaction].[CurrencyCode].[CurrencyCodeName] END ASC,
				CASE WHEN @orderByField = 'CurrencyCodeName' AND @orderByDirection = 'D' THEN [Transaction].[CurrencyCode].[CurrencyCodeName] END DESC,
				
				CASE WHEN @OrderByField = 'CurrencyCodeCode' AND @OrderByDirection = 'A' THEN [Transaction].[CurrencyCode].[CurrencyCodeCode] END ASC,
				CASE WHEN @orderByField = 'CurrencyCodeCode' AND @orderByDirection = 'D' THEN [Transaction].[CurrencyCode].[CurrencyCodeCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[CurrencyCode].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[CurrencyCode].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[CurrencyCode]
	WHERE
		[Transaction].[CurrencyCode].[CurrencyCodeName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[CurrencyCode].[CurrencyCodeName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[CurrencyCode].[CurrencyCodeCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[CurrencyCode].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[CurrencyCode].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[CurrencyCode].[CurrencyCodeID], [CurrencyCode].[CurrencyCodeCode], [CurrencyCode].[CurrencyCodeName], [CurrencyCode].[IsActive]
	FROM
		[CurrencyCode] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [CurrencyCode].[CurrencyCodeID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_CurrencyCode] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_CurrencyCode] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_CommunicationNumberQualifier]    Script Date: 06/20/2013 14:36:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_CommunicationNumberQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_CommunicationNumberQualifier]
GO


/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_CommunicationNumberQualifier]    Script Date: 06/20/2013 14:36:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Transaction].[usp_GetBySearch_CommunicationNumberQualifier]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'CommunicationNumberQualifierName' AND @OrderByDirection = 'A' THEN [Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] END ASC,
				CASE WHEN @orderByField = 'CommunicationNumberQualifierName' AND @orderByDirection = 'D' THEN [Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] END DESC,
				
				CASE WHEN @OrderByField = 'CommunicationNumberQualifierCode' AND @OrderByDirection = 'A' THEN [Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] END ASC,
				CASE WHEN @orderByField = 'CommunicationNumberQualifierCode' AND @orderByDirection = 'D' THEN [Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[CommunicationNumberQualifier].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[CommunicationNumberQualifier].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[CommunicationNumberQualifier]
	WHERE
		[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[CommunicationNumberQualifier].[CommunicationNumberQualifierCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[CommunicationNumberQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[CommunicationNumberQualifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[CommunicationNumberQualifier].[CommunicationNumberQualifierID], [CommunicationNumberQualifier].[CommunicationNumberQualifierCode], [CommunicationNumberQualifier].[CommunicationNumberQualifierName], [CommunicationNumberQualifier].[IsActive]
	FROM
		[CommunicationNumberQualifier] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [CommunicationNumberQualifier].[CommunicationNumberQualifierID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_CommunicationNumberQualifier] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_CommunicationNumberQualifier] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_InterchangeIDQualifier]    Script Date: 06/20/2013 14:37:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_InterchangeIDQualifier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_InterchangeIDQualifier]
GO



/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_InterchangeIDQualifier]    Script Date: 06/20/2013 14:37:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Transaction].[usp_GetBySearch_InterchangeIDQualifier]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'InterchangeIDQualifierName' AND @OrderByDirection = 'A' THEN [Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] END ASC,
				CASE WHEN @orderByField = 'InterchangeIDQualifierName' AND @orderByDirection = 'D' THEN [Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] END DESC,
				
				CASE WHEN @OrderByField = 'InterchangeIDQualifierCode' AND @OrderByDirection = 'A' THEN [Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] END ASC,
				CASE WHEN @orderByField = 'InterchangeIDQualifierCode' AND @orderByDirection = 'D' THEN [Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[InterchangeIDQualifier].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[InterchangeIDQualifier].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[InterchangeIDQualifier]
	WHERE
		[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[InterchangeIDQualifier].[InterchangeIDQualifierCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[InterchangeIDQualifier].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[InterchangeIDQualifier].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[InterchangeIDQualifier].[InterchangeIDQualifierID], [InterchangeIDQualifier].[InterchangeIDQualifierCode], [InterchangeIDQualifier].[InterchangeIDQualifierName], [InterchangeIDQualifier].[IsActive]
	FROM
		[InterchangeIDQualifier] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [InterchangeIDQualifier].[InterchangeIDQualifierID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_InterchangeIDQualifier] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_InterchangeIDQualifier] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_EntityIdentifierCode]    Script Date: 06/26/2013 17:34:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Transaction].[usp_GetBySearch_EntityIdentifierCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Transaction].[usp_GetBySearch_EntityIdentifierCode]
GO



/****** Object:  StoredProcedure [Transaction].[usp_GetBySearch_EntityIdentifierCode]    Script Date: 06/26/2013 17:34:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Transaction].[usp_GetBySearch_EntityIdentifierCode]
	@SearchName NVARCHAR(150) = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SET @SearchName = '';
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeID]
		, ROW_NUMBER() OVER (
			ORDER BY
						
				CASE WHEN @OrderByField = 'EntityIdentifierCodeName' AND @OrderByDirection = 'A' THEN [Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] END ASC,
				CASE WHEN @orderByField = 'EntityIdentifierCodeName' AND @orderByDirection = 'D' THEN [Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] END DESC,
				
				CASE WHEN @OrderByField = 'EntityIdentifierCodeCode' AND @OrderByDirection = 'A' THEN [Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] END ASC,
				CASE WHEN @orderByField = 'EntityIdentifierCodeCode' AND @orderByDirection = 'D' THEN [Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] END DESC,
				
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Transaction].[EntityIdentifierCode].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Transaction].[EntityIdentifierCode].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Transaction].[EntityIdentifierCode]
	WHERE
		[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] LIKE @StartBy + '%' 
	AND
	(
		[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeName] LIKE '%' + @SearchName + '%' 
	OR
		[Transaction].[EntityIdentifierCode].[EntityIdentifierCodeCode] LIKE '%' + @SearchName + '%' 
	)
	AND
		[Transaction].[EntityIdentifierCode].[IsActive] = CASE WHEN @IsActive IS NULL THEN [Transaction].[EntityIdentifierCode].[IsActive] ELSE @IsActive END;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	SELECT
		[EntityIdentifierCode].[EntityIdentifierCodeID], [EntityIdentifierCode].[EntityIdentifierCodeCode], [EntityIdentifierCode].[EntityIdentifierCodeName], [EntityIdentifierCode].[IsActive]
	FROM
		[EntityIdentifierCode] WITH (NOLOCK)
	INNER JOIN
		@SEARCH_TMP
	ON
		[PK_ID] = [EntityIdentifierCode].[EntityIdentifierCodeID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[ID]
	ASC;
	
	-- EXEC [Transaction].[usp_GetBySearch_EntityIdentifierCode] @SearchName  = '45'
	-- EXEC [Transaction].[usp_GetBySearch_EntityIdentifierCode] @SearchName  = NULL, @StartBy = NULL, @IsActive = NULL, @CurrPageNumber = 1, @RecordsPerPage = 200, @OrderByField = 'LastModifiedOn', @OrderByDirection = 'D'
END






GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [EDI].[usp_GetCount835_EDIFile]    Script Date: 07/06/2013 15:14:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EDI].[usp_GetCount835_EDIFile]') AND type in (N'P', N'PC'))
DROP PROCEDURE [EDI].[usp_GetCount835_EDIFile]
GO



/****** Object:  StoredProcedure [EDI].[usp_GetCount835_EDIFile]    Script Date: 07/06/2013 15:14:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [EDI].[usp_GetCount835_EDIFile]
	@ClinicID int
	, @StatusIDs NVARCHAR(100)
	, @UserID INT
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @TBL_ANS TABLE
	(
		[ID] INT NOT NULL IDENTITY (1, 1)
		, [CLAIM_COUNT] INT NOT NULL
	);

	INSERT INTO
		@TBL_ANS
	SELECT
		COUNT ([EDI].[EDIFile].[EDIFileID]) AS [CLAIM_COUNT]
	FROM
		[EDI].[EDIFile]	
	WHERE
		[EDI].[EDIFile].[EDIFileID] IN
		(
			SELECT
				[Claim].[ClaimProcessEDIFile].[EDIFileID]
			FROM
				[Claim].[ClaimProcessEDIFile]
			INNER JOIN
				[Claim].[ClaimProcess]
			ON
				[Claim].[ClaimProcess].[ClaimProcessID] = [Claim].[ClaimProcessEDIFile].[ClaimProcessID]
			INNER JOIN
				[Patient].[PatientVisit]
			ON
				[Patient].[PatientVisit].[PatientVisitID] = [Claim].[ClaimProcess].[PatientVisitID]
			INNER JOIN
				[Patient].[Patient]
			ON
				[Patient].[Patient].[PatientID] = [Patient].[PatientVisit].[PatientID]
			WHERE
				[Patient].[Patient].[ClinicID] = @ClinicID
			AND
				[Patient].[PatientVisit].[ClaimStatusID] IN (SELECT [Data] FROM [dbo].[ufn_StringSplit] (@StatusIDs, ','))
			AND
				[Patient].[PatientVisit].[AssignedTo] = @UserID
			AND
				[Patient].[PatientVisit].[IsActive] = 1	
			AND
				[Patient].[Patient].[IsActive] = 1
			AND
				[Claim].[ClaimProcess].[IsActive] = 1	
			AND
				[Claim].[ClaimProcessEDIFile].[IsActive] = 1	
		)
	AND
		[EDI].[EDIFile].[IsActive] = 1;
		
	SELECT * FROM @TBL_ANS;
		
	-- EXEC [EDI].[usp_GetCount835_EDIFile] @ClinicID=1, @StatusIDs = '23,24', @UserID=101
END








GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_Insert_PatientHospitalization]    Script Date: 07/01/2013 21:37:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_Insert_PatientHospitalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_Insert_PatientHospitalization]
GO



/****** Object:  StoredProcedure [Patient].[usp_Insert_PatientHospitalization]    Script Date: 07/01/2013 21:37:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Inserts the record into the table without repeatation

CREATE PROCEDURE [Patient].[usp_Insert_PatientHospitalization]
	@PatientID BIGINT
	, @FacilityDoneHospitalID INT
	, @AdmittedOn DATE
	, @DischargedOn DATE = NULL
	, @Comment NVARCHAR(4000) = NULL
	, @CurrentModificationBy BIGINT
	, @PatientHospitalizationID BIGINT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
	BEGIN TRY
		DECLARE @CurrentModificationOn DATETIME;
		SELECT @CurrentModificationOn = GETDATE();
		
		SELECT @PatientHospitalizationID = [Patient].[ufn_IsExists_PatientHospitalization] (@PatientID, @FacilityDoneHospitalID, @AdmittedOn, @DischargedOn, @Comment, 0);
		
		IF @PatientHospitalizationID = 0
		BEGIN
			IF @DischargedOn IS NULL -- CURRENT NO DISCHARGE
			BEGIN
				IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NULL AND [Patient].[PatientHospitalization].[IsActive] = 1)
				BEGIN
					SELECT @PatientHospitalizationID = -3;
				END
				ELSE IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NOT NULL AND (@AdmittedOn BETWEEN [Patient].[PatientHospitalization].[AdmittedOn] AND [Patient].[PatientHospitalization].[DischargedOn]) AND [Patient].[PatientHospitalization].[DischargedOn] <> @AdmittedOn AND [Patient].[PatientHospitalization].[IsActive] = 1)
				BEGIN
					SELECT @PatientHospitalizationID = -4;
				END
				ELSE IF EXISTS (SELECT [Patient].[PatientVisit].[PatientVisitID] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientID] = @PatientID AND [Patient].[PatientVisit].[DOS] >= @AdmittedOn AND [Patient].[PatientVisit].[IsActive] = 1)
				BEGIN
					SELECT @PatientHospitalizationID = -5;
				END
			END
			ELSE
			BEGIN
				IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NOT NULL AND (@AdmittedOn BETWEEN [Patient].[PatientHospitalization].[AdmittedOn] AND [Patient].[PatientHospitalization].[DischargedOn]) AND [Patient].[PatientHospitalization].[DischargedOn] <> @AdmittedOn AND [Patient].[PatientHospitalization].[IsActive] = 1)
				BEGIN
					SELECT @PatientHospitalizationID = -6;
				END
				ELSE IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NOT NULL AND (@DischargedOn BETWEEN [Patient].[PatientHospitalization].[AdmittedOn] AND [Patient].[PatientHospitalization].[DischargedOn]) AND [Patient].[PatientHospitalization].[AdmittedOn] <> @DischargedOn AND [Patient].[PatientHospitalization].[IsActive] = 1)
				BEGIN
					SELECT @PatientHospitalizationID = -7;
				END
				ELSE IF EXISTS (SELECT [Patient].[PatientVisit].[PatientVisitID] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientID] = @PatientID AND [Patient].[PatientVisit].[DOS] BETWEEN @AdmittedOn AND @DischargedOn AND [Patient].[PatientVisit].[IsActive] = 1)
				BEGIN
					SELECT @PatientHospitalizationID = -8;
				END
			END
			
			IF @PatientHospitalizationID = 0
			BEGIN
				INSERT INTO [Patient].[PatientHospitalization]
				(
					[PatientID]
					, [FacilityDoneHospitalID]
					, [AdmittedOn]
					, [DischargedOn]
					, [Comment]
					, [CreatedBy]
					, [CreatedOn]
					, [LastModifiedBy]
					, [LastModifiedOn]
					, [IsActive]
				)
				VALUES
				(
					@PatientID
					, @FacilityDoneHospitalID
					, @AdmittedOn
					, @DischargedOn
					, @Comment
					, @CurrentModificationBy
					, @CurrentModificationOn
					, @CurrentModificationBy
					, @CurrentModificationOn
					, 1
				);
				
				SELECT @PatientHospitalizationID = MAX([Patient].[PatientHospitalization].[PatientHospitalizationID]) FROM [Patient].[PatientHospitalization];
			END
		END
		ELSE
		BEGIN			
			SELECT @PatientHospitalizationID = -1;
		END		
	END TRY
	BEGIN CATCH
		-- ERROR CATCHING - STARTS
		BEGIN TRY
			EXEC [Audit].[usp_Insert_ErrorLog];
			SELECT @PatientHospitalizationID = (MAX([Audit].[ErrorLog].[ErrorLogID]) * -1) FROM [Audit].[ErrorLog];
		END TRY
		BEGIN CATCH
			RAISERROR('Error in [Audit].[usp_Insert_ErrorLog]', -1, -1);
		END CATCH
		-- ERROR CATCHING - ENDS
	END CATCH	
END

GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_Update_PatientHospitalization]    Script Date: 07/05/2013 19:05:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_Update_PatientHospitalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_Update_PatientHospitalization]
GO



/****** Object:  StoredProcedure [Patient].[usp_Update_PatientHospitalization]    Script Date: 07/05/2013 19:05:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--Description:This Stored Procedure is used to UPDATE the PatientHospitalization in the database.
	 
CREATE PROCEDURE [Patient].[usp_Update_PatientHospitalization]
	@PatientID BIGINT
	, @FacilityDoneHospitalID INT
	, @AdmittedOn DATE
	, @DischargedOn DATE = NULL
	, @Comment NVARCHAR(4000) = NULL
	, @IsActive BIT
	, @LastModifiedBy BIGINT
	, @LastModifiedOn DATETIME
	, @CurrentModificationBy BIGINT
	, @PatientHospitalizationID BIGINT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	
	BEGIN TRY
		DECLARE @CurrentModificationOn DATETIME;
		SELECT @CurrentModificationOn = GETDATE();

		DECLARE @PatientHospitalizationID_PREV BIGINT;
		SELECT @PatientHospitalizationID_PREV = [Patient].[ufn_IsExists_PatientHospitalization] (@PatientID, @FacilityDoneHospitalID, @AdmittedOn, @DischargedOn, @Comment, 1);

		DECLARE @IS_ACTIVE_PREV BIT;
		
		IF EXISTS(SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID AND [Patient].[PatientHospitalization].[IsActive] = @IsActive)
		BEGIN
			SELECT @IS_ACTIVE_PREV = 1;
		END
		ELSE
		BEGIN
			SELECT @IS_ACTIVE_PREV = 0;
		END		

		IF ((@PatientHospitalizationID_PREV = 0) OR (@IS_ACTIVE_PREV = 0))
		BEGIN
			DECLARE @LAST_MODIFIED_BY BIGINT;
			DECLARE @LAST_MODIFIED_ON DATETIME;
		
			SELECT 
				@LAST_MODIFIED_BY = [Patient].[PatientHospitalization].[LastModifiedBy]
				, @LAST_MODIFIED_ON =  [Patient].[PatientHospitalization].[LastModifiedOn]
			FROM 
				[Patient].[PatientHospitalization] WITH (NOLOCK)
			WHERE
				[Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID;
			
			IF (@LAST_MODIFIED_BY = @LastModifiedBy) AND (DATEDIFF(MILLISECOND, @LAST_MODIFIED_ON, @LastModifiedOn) = 0)
			BEGIN
				IF @DischargedOn IS NULL -- CURRENT NO DISCHARGE
				BEGIN
					IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NULL AND [Patient].[PatientHospitalization].[PatientHospitalizationID] <> @PatientHospitalizationID AND [Patient].[PatientHospitalization].[IsActive] = 1)
					BEGIN
						SELECT @PatientHospitalizationID = -9;
					END
					ELSE IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NOT NULL AND (@AdmittedOn BETWEEN [Patient].[PatientHospitalization].[AdmittedOn] AND [Patient].[PatientHospitalization].[DischargedOn]) AND [Patient].[PatientHospitalization].[DischargedOn] <> @AdmittedOn AND [Patient].[PatientHospitalization].[PatientHospitalizationID] <> @PatientHospitalizationID AND [Patient].[PatientHospitalization].[IsActive] = 1)
					BEGIN
						SELECT @PatientHospitalizationID = -10;
					END
					ELSE IF EXISTS (SELECT [Patient].[PatientVisit].[PatientHospitalizationID] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientHospitalizationID] = @PatientHospitalizationID AND [Patient].[PatientVisit].[IsActive] = 1)
					BEGIN
						SELECT @PatientHospitalizationID = -11;
					END
				END
				ELSE
				BEGIN
					IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NOT NULL AND (@AdmittedOn BETWEEN [Patient].[PatientHospitalization].[AdmittedOn] AND [Patient].[PatientHospitalization].[DischargedOn]) AND [Patient].[PatientHospitalization].[DischargedOn] <> @AdmittedOn AND [Patient].[PatientHospitalization].[PatientHospitalizationID] <> @PatientHospitalizationID AND [Patient].[PatientHospitalization].[IsActive] = 1)
					BEGIN
						SELECT @PatientHospitalizationID = -12;
					END
					ELSE IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NOT NULL AND (@DischargedOn BETWEEN [Patient].[PatientHospitalization].[AdmittedOn] AND [Patient].[PatientHospitalization].[DischargedOn]) AND [Patient].[PatientHospitalization].[AdmittedOn] <> @DischargedOn AND [Patient].[PatientHospitalization].[PatientHospitalizationID] <> @PatientHospitalizationID AND [Patient].[PatientHospitalization].[IsActive] = 1)
					BEGIN
						SELECT @PatientHospitalizationID = -13;		
					END
					ELSE IF EXISTS (SELECT [Patient].[PatientHospitalization].[PatientHospitalizationID] FROM [Patient].[PatientHospitalization] WHERE [Patient].[PatientHospitalization].[PatientID] = @PatientID AND [Patient].[PatientHospitalization].[DischargedOn] IS NULL AND [Patient].[PatientHospitalization].[AdmittedOn] < @DischargedOn AND [Patient].[PatientHospitalization].[AdmittedOn] <> @DischargedOn AND [Patient].[PatientHospitalization].[PatientHospitalizationID] <> @PatientHospitalizationID AND [Patient].[PatientHospitalization].[IsActive] = 1)
					BEGIN
						SELECT @PatientHospitalizationID = -14;		
					END
					ELSE IF EXISTS (SELECT [Patient].[PatientVisit].[PatientHospitalizationID] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientHospitalizationID] = @PatientHospitalizationID AND [Patient].[PatientVisit].[IsActive] = 1)
					BEGIN
						SELECT @PatientHospitalizationID = -15;
					END
				END
			
				IF @PatientHospitalizationID > 0
				BEGIN
					INSERT INTO 
						[Patient].[PatientHospitalizationHistory]
						(
							[PatientHospitalizationID]
							, [PatientID]
							, [FacilityDoneHospitalID]
							, [AdmittedOn]
							, [DischargedOn]
							, [Comment]
							, [CreatedBy]
							, [CreatedOn]
							, [LastModifiedBy]
							, [LastModifiedOn]
							, [IsActive]
						)
					SELECT
						[Patient].[PatientHospitalization].[PatientHospitalizationID]
						, [Patient].[PatientHospitalization].[PatientID]
						, [Patient].[PatientHospitalization].[FacilityDoneHospitalID]
						, [Patient].[PatientHospitalization].[AdmittedOn]
						, [Patient].[PatientHospitalization].[DischargedOn]
						, [Patient].[PatientHospitalization].[Comment]
						, @CurrentModificationBy
						, @CurrentModificationOn
						, @LastModifiedBy
						, @LastModifiedOn
						, [Patient].[PatientHospitalization].[IsActive]
					FROM 
						[Patient].[PatientHospitalization]
					WHERE
						[Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID;
					
					UPDATE 
						[Patient].[PatientHospitalization]
					SET
						[Patient].[PatientHospitalization].[PatientID] = @PatientID
						, [Patient].[PatientHospitalization].[FacilityDoneHospitalID] = @FacilityDoneHospitalID
						, [Patient].[PatientHospitalization].[AdmittedOn] = @AdmittedOn
						, [Patient].[PatientHospitalization].[DischargedOn] = @DischargedOn
						, [Patient].[PatientHospitalization].[Comment] = @Comment
						, [Patient].[PatientHospitalization].[LastModifiedBy] = @CurrentModificationBy
						, [Patient].[PatientHospitalization].[LastModifiedOn] = @CurrentModificationOn
						, [Patient].[PatientHospitalization].[IsActive] = @IsActive
					WHERE
						[Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID;
				END				
			END
			ELSE
			BEGIN
				SELECT @PatientHospitalizationID = -2;
			END
		END
		ELSE IF @PatientHospitalizationID_PREV <> @PatientHospitalizationID
		BEGIN			
			SELECT @PatientHospitalizationID = -1;			
		END
		-- ELSE
		-- BEGIN
		--	 SELECT @CurrentModificationOn = @LastModifiedOn;
		-- END
	END TRY
	BEGIN CATCH
		-- ERROR CATCHING - STARTS
		BEGIN TRY			
			EXEC [Audit].[usp_Insert_ErrorLog];			
			SELECT @PatientHospitalizationID = (MAX([Audit].[ErrorLog].[ErrorLogID]) * -1) FROM [Audit].[ErrorLog];
		END TRY
		BEGIN CATCH
			RAISERROR('Error in [Audit].[usp_Insert_ErrorLog]', -1, -1);
		END CATCH
		-- ERROR CATCHING - ENDS
	END CATCH
END



GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Hosp_ClaimProcess]    Script Date: 07/01/2013 11:56:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetAnsi837Hosp_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetAnsi837Hosp_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetAnsi837Hosp_ClaimProcess]    Script Date: 07/01/2013 11:56:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Claim].[usp_GetAnsi837Hosp_ClaimProcess]
	@PatientHospitalizationID BIGINT
AS
BEGIN

	SET NOCOUNT ON;
	
	SELECT
		[Patient].[PatientHospitalization].[AdmittedOn]
		, [Patient].[PatientHospitalization].[DischargedOn]
		
	FROM
		[Patient].[PatientHospitalization]
	WHERE
		[Patient].[PatientHospitalization].[PatientHospitalizationID] = @PatientHospitalizationID
	AND
		[Patient].[PatientHospitalization].[IsActive] = 1
		
	-- EXEC [Claim].[usp_GetAnsi837Hosp_ClaimProcess] 1
END




GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetBySearchCaseReopen_ClaimProcess]    Script Date: 07/06/2013 18:31:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetBySearchCaseReopen_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetBySearchCaseReopen_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetBySearchCaseReopen_ClaimProcess]    Script Date: 07/06/2013 18:31:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Claim].[usp_GetBySearchCaseReopen_ClaimProcess]
	  @ClinicID INT
	, @AssignedTo INT = NULL
	, @SearchName NVARCHAR(150) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
	, @StartBy NVARCHAR(1) = NULL
	, @CurrPageNumber BIGINT = 1
	, @RecordsPerPage SMALLINT = 200
	, @OrderByField NVARCHAR(250) = 'LastModifiedOn'
	, @OrderByDirection	NVARCHAR(1) = 'D'
	, @IsActive BIT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
	
	IF @StartBy IS NULL
	BEGIN
		SET @StartBy = '';
	END
	DECLARE @SEARCH_TMP  TABLE
	(
		[ID] INT IDENTITY (1, 1)
		, [PK_ID] INT NOT NULL
		, [ROW_NUM] INT NOT NULL
	);
	
	INSERT INTO
		@SEARCH_TMP
		(
			[PK_ID]
			, [ROW_NUM]
		)
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, ROW_NUMBER() OVER (
			ORDER BY
			
				CASE WHEN @OrderByField = 'PatName' AND @OrderByDirection = 'A' THEN (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) END ASC,
				CASE WHEN @orderByField = 'PatName' AND @orderByDirection = 'D' THEN [Patient].[Patient].[LastName] END DESC,
							
				CASE WHEN @OrderByField = 'PatChartNumber' AND @OrderByDirection = 'A' THEN [Patient].[Patient].[ChartNumber] END ASC,
				CASE WHEN @orderByField = 'PatChartNumber' AND @orderByDirection = 'D' THEN [Patient].[Patient].[ChartNumber] END DESC,
								
				CASE WHEN @OrderByField = 'DOS' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[DOS] END ASC,
				CASE WHEN @orderByField = 'DOS' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[DOS] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitID' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitID' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,
				
				CASE WHEN @OrderByField = 'PatientVisitComplexity' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[PatientVisitID] END ASC,
				CASE WHEN @orderByField = 'PatientVisitComplexity' AND @orderByDirection = 'D' THEN [Patient].[PatientVisit].[PatientVisitID] END DESC,

				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'A' THEN [Patient].[PatientVisit].[LastModifiedOn] END ASC,
				CASE WHEN @OrderByField = 'LastModifiedOn' AND @OrderByDirection = 'D' THEN [Patient].[PatientVisit].[LastModifiedOn] END DESC
				
			) AS ROW_NUM
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
		ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]
	INNER JOIN
	    [Claim].[ClaimProcess]
	ON
	    [Claim].[ClaimProcess].[PatientVisitID] = [Patient].[PatientVisit].[PatientVisitID]    	
		
	WHERE
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE @StartBy + '%' 
	AND
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) LIKE '%' + @SearchName + '%' 
		OR
			[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
		)
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND	
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[ClaimProcess].[ClaimStatusID] > 25 --If anything happens we need to change this to 21
	--AND
	--  	[ClaimProcess].[ClaimStatusID] < 30 
	AND
		CAST([Patient].[PatientVisit].[ClaimStatusID] as INT) !=30
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		(
			[Patient].[PatientVisit].[AssignedTo] = @AssignedTo 
		OR
			@AssignedTo IS NULL
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;
		
	DECLARE @FIRST_ROW_NUM BIGINT;
	DECLARE @LAST_ROW_NUM BIGINT;
	DECLARE @REC_CNT BIGINT;
	
	SET @FIRST_ROW_NUM = ((@CurrPageNumber * @RecordsPerPage) - @RecordsPerPage) + 1;
	SET @LAST_ROW_NUM = (@FIRST_ROW_NUM + @RecordsPerPage) - 1;
	SELECT @REC_CNT = COUNT([ID]) FROM @SEARCH_TMP;
	
	DECLARE @TBL_ANS TABLE
	(
		 [PatientVisitID] BIGINT NOT NULL
		, [PatName] NVARCHAR(500) NOT NULL
		, [PatChartNumber] NVARCHAR(20) NOT NULL
		, [DOS] DATE NOT NULL
		, [PatientVisitComplexity] TINYINT NOT NULL
		, [AssignToMe] BIT NOT NULL
	);
	
	INSERT INTO
		@TBL_ANS
	SELECT
		[Patient].[PatientVisit].[PatientVisitID]
		, (LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], '')))) AS [PatName]
		, [Patient].[Patient].[ChartNumber] AS [PatChartNumber] 
		, [Patient].[PatientVisit].[DOS]
		, [Patient].[PatientVisit].[PatientVisitComplexity]
		, CAST('1' AS BIT) AS [AssignToMe]
	FROM
		@SEARCH_TMP
	INNER JOIN
		[Patient].[PatientVisit]
	ON 
		[PK_ID] = [Patient].[PatientVisit].[PatientVisitID]
	INNER JOIN
		[Patient].[Patient]
	ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]
	WHERE
		[ROW_NUM] BETWEEN @FIRST_ROW_NUM AND @LAST_ROW_NUM
	ORDER BY
		[Patient].[PatientVisit].[LastModifiedOn]
	DESC;
	
	SELECT * FROM @TBL_ANS;
	
	-- EXEC [Claim].[usp_GetBySearch_ClaimProcess] @ClinicID = 1, @StatusIDs = '3,5', @AssignedTo= 101
	-- [Claim].[usp_GetBySearchCaseReopen_ClaimProcess] @ClinicID = 1, @StatusIDs = '8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25', @SearchName = 'DVORAK VIRGINIA M'	-- CREATED
	-- EXEC [Claim].[usp_GetBySearch_ClaimProcess] @ClinicID = 1, @StatusIDs = '3'
END





GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [User].[usp_GetAutocompleteNew_User]    Script Date: 07/03/2013 16:22:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User].[usp_GetAutocompleteNew_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [User].[usp_GetAutocompleteNew_User]
GO



/****** Object:  StoredProcedure [User].[usp_GetAutocompleteNew_User]    Script Date: 07/03/2013 16:22:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






-- Select all records from the table
--Created by sai for displaying agents in case agent autocomplete

CREATE PROCEDURE [User].[usp_GetAutocompleteNew_User] 
	@stats	NVARCHAR (150) = NULL
	, @ManagerRoleID TINYINT
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	DECLARE @USER_TMP TABLE
	(
		[USER_ID] INT NOT NULL
	);
	
		INSERT INTO
			@USER_TMP
		SELECT 
			[User].[UserRole].[UserID]
		FROM 
			[User].[UserRole]
		WHERE
			[User].[UserRole].[RoleID] >= 3
		AND
			[User].[UserRole].[IsActive] = 1;
			
		
		DELETE FROM
			@USER_TMP
		WHERE
			[USER_ID] IN
			(
				SELECT 
					[User].[UserRole].[UserID]
				FROM 
					[User].[UserRole]
				WHERE
					[User].[UserRole].[RoleID] < 3
				AND
					[User].[UserRole].[IsActive] = 1
			)
		OR
			[USER_ID] IN
			(
				SELECT 
					[User].[User].[UserID]
				FROM 
					[User].[User]
				WHERE
					[User].[User].[ManagerID] IS NULL
				AND
					[User].[User].[IsActive] = 1
			);
	
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT
			([User].[User].[LastName] +[User].[User].[FirstName] + ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
		FROM
			[User].[User]
		WHERE
			[User].[User].[UserID] IN
			(
				SELECT
					[User].[UserClinic].[UserID]
				FROM
					[User].[UserClinic]
				WHERE
					[User].[UserClinic].[IsActive] = 1
			)
			
		  AND  
			[User].[User].[UserID] IN
			(
				SELECT 
					[USER_ID]
				FROM 
					@USER_TMP
			)
		AND
			[User].[User].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
		FROM
			[User].[User]
		WHERE
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') LIKE @stats ESCAPE '\'		
		AND
			[User].[User].[UserID] IN
			(
				SELECT
					[User].[UserClinic].[UserID]
				FROM
					[User].[UserClinic]
				WHERE
					[User].[UserClinic].[IsActive] = 1
			)
		AND
			[User].[User].[UserID] IN
			(
				SELECT 
					[USER_ID]
				FROM 
					@USER_TMP
			)
		AND
			[User].[User].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT  TOP 10
			([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
			FROM
				[User].[User]
			WHERE
				[User].[User].[UserName] LIKE @stats ESCAPE '\'
			AND
				[User].[User].[UserID] IN
				(
					SELECT
						[User].[UserClinic].[UserID]
					FROM
						[User].[UserClinic]
					WHERE
						[User].[UserClinic].[IsActive] = 1
				)
			AND
				[User].[User].[UserID] IN
				(
					SELECT 
						[USER_ID]
					FROM 
						@USER_TMP
				)
			AND
				[User].[User].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT 	TOP 10
				([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') AS [NAME_CODE]
			FROM
				[User].[User]
			WHERE
				([User].[User].[LastName] +[User].[User].[FirstName]+ ' [' +[User].[User].[UserName] + ']') LIKE @stats ESCAPE '\'
			AND
				[User].[User].[UserID] IN
				(
					SELECT
						[User].[UserClinic].[UserID]
					FROM
						[User].[UserClinic]
					WHERE
						[User].[UserClinic].[IsActive] = 1
				)
			AND
				[User].[User].[UserID] IN
				(
					SELECT 
						[USER_ID]
					FROM 
						@USER_TMP
				)
			AND
				[User].[User].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
	END
	
	SELECT * FROM @TBL_ANS;	
	
	
	-- EXEC [User].[usp_GetAutoCompleteNew_User] @stats = 'R', @ManagerRoleID = 3
	-- EXEC [User].[usp_GetAutoCompleteNew_User] @stats = '', @ManagerRoleID = 3
END



GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetByAZCaseReopen_ClaimProcess]    Script Date: 07/06/2013 18:32:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetByAZCaseReopen_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetByAZCaseReopen_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetByAZCaseReopen_ClaimProcess]    Script Date: 07/06/2013 18:32:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetByAZCaseReopen_ClaimProcess] 
	 @ClinicID INT
	, @AssignedTo INT = NULL
	, @SearchName NVARCHAR(350) = NULL
	, @DateFrom DATE = NULL
	, @DateTo DATE = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF @SearchName IS NULL
	BEGIN
		SELECT @SearchName = '';
	END
	
	DECLARE @PatientVisitID BIGINT;
	BEGIN TRY
		SELECT @PatientVisitID = CAST (@SearchName AS BIGINT);
	END TRY
	BEGIN CATCH
		SELECT @PatientVisitID = 0;
	END CATCH
	
	IF @DateFrom IS NULL
	BEGIN
		SELECT @DateFrom = CAST('1900-01-01' AS DATE);
	END
	
	IF @DateTo IS NULL
	BEGIN
		SELECT @DateTo = DATEADD(MONTH, 1, GETDATE());
	END
    
    DECLARE @TBL_ALL TABLE
    (
		[ChartNumber] [nvarchar](350) NULL
    );
    
    DECLARE @TBL_AZ TABLE
    (
		[AZ] [varchar](1) PRIMARY KEY NOT NULL,
		[AZ_COUNT] INT NOT NULL
    );
    
    INSERT INTO
		@TBL_ALL
	
	SELECT
		(LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL ([Patient].[Patient].[MiddleName], ''))))
	FROM
		[Patient].[PatientVisit]
	INNER JOIN
		[Patient].[Patient]
		ON 
		[Patient].[PatientVisit].[PatientID]=[Patient].[Patient].[PatientID]
	INNER JOIN
	    [Claim].[ClaimProcess]
	ON
	    [Claim].[ClaimProcess].[PatientVisitID] = [Patient].[PatientVisit].[PatientVisitID]
	WHERE
		(
			[Patient].[Patient].[ChartNumber] LIKE '%' + @SearchName + '%' 
		OR
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] ))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE '%' + @SearchName + '%' 
		OR
			[Patient].[PatientVisit].[PatientVisitID] =  @PatientVisitID
		)
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND	
		[Patient].[Patient].[ClinicID] = @ClinicID
	AND
		[ClaimProcess].[ClaimStatusID] > 25 --If anything happens we need to change this to 21
	--AND
	--  	[ClaimProcess].[ClaimStatusID] < 30 
	AND
		CAST([Patient].[PatientVisit].[ClaimStatusID] as INT) !=30
	AND
		[Patient].[PatientVisit].[DOS] BETWEEN @DateFrom AND @DateTo
	AND
		(
			[Patient].[PatientVisit].[AssignedTo] = @AssignedTo 
		OR
			@AssignedTo IS NULL
		)
	AND
		[Patient].[PatientVisit].[IsActive] = 1
	AND
		[Patient].[Patient].[IsActive] = 1;

		
	DECLARE @AZ_TMP VARCHAR(26);
	SELECT @AZ_TMP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	DECLARE @AZ_LOOP INT;
	SELECT 	@AZ_LOOP = 1;
	DECLARE @AZ_CNT INT;
	SELECT @AZ_CNT = LEN(@AZ_TMP);
	DECLARE @AZ_CHR VARCHAR(1);
	SELECT @AZ_CHR = '';
	
	WHILE @AZ_LOOP <= @AZ_CNT
	BEGIN
		SELECT @AZ_CHR = SUBSTRING(@AZ_TMP, @AZ_LOOP, 1);
		
		INSERT INTO
			@TBL_AZ
		SELECT
			@AZ_CHR	AS [AZ]
			, COUNT(*) AS [AZ_COUNT]
		FROM
			@TBL_ALL
		WHERE
			[ChartNumber] LIKE @AZ_CHR + '%';
	
		SELECT @AZ_LOOP = @AZ_LOOP + 1;
	END
	
	SELECT * FROM @TBL_AZ ORDER BY 1 ASC;
	
	-- EXEC [Claim].[usp_GetByAZ_ClaimProcess] @ClinicID = 1, @StatusIDs = '8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25', @SearchName = ''	-- CREATED
	
END


GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetAutoCompleteVisit_Patient]    Script Date: 07/05/2013 18:25:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetAutoCompleteVisit_Patient]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetAutoCompleteVisit_Patient]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetAutoCompleteVisit_Patient]    Script Date: 07/05/2013 18:25:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- Select all records from the table

CREATE PROCEDURE [Patient].[usp_GetAutoCompleteVisit_Patient] 
	@ClinicID int
	, @stats	NVARCHAR (150) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @TBL_ANS TABLE ([ID] INT NOT NULL IDENTITY (1, 1), [NAME_CODE] NVARCHAR(165) NOT NULL);
	
	DECLARE @TBL_HOSP TABLE
	(
		[PATIENT_ID] BIGINT NOT NULL
	);

	INSERT INTO 
		@TBL_HOSP
	SELECT
		[PatientID]
	FROM
		[Patient].[PatientHospitalization]
	WHERE
		[DischargedOn] IS NULL
	AND
		[Patient].[PatientHospitalization].[IsActive] = 1;
		
	IF @stats IS NULL
	BEGIN
		SELECT @stats = '';
	END
	ELSE
	BEGIN
		SELECT @stats = LTRIM(RTRIM(@stats));
	END
	
	IF LEN(@stats) = 0
	BEGIN
		INSERT INTO
			@TBL_ANS
		SELECT TOP 50 
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
		FROM
			[Patient].[Patient]
		WHERE
			[Patient].[Patient].[ClinicID] = @ClinicID
		AND
			[Patient].[Patient].[PatientID] NOT IN (SELECT	[PatientID] FROM @TBL_HOSP)
		AND
			[Patient].[Patient].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
	END
	ELSE
	BEGIN
		SELECT @stats = REPLACE(@stats, '[', '\[');
		SELECT @stats = @stats + '%';
		
		INSERT INTO
			@TBL_ANS
		SELECT TOP 10 	
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
		FROM
			[Patient].[Patient]
		WHERE
			((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE @stats ESCAPE '\'
		AND
			[Patient].[Patient].[ClinicID] = @ClinicID
		AND
			[Patient].[Patient].[PatientID] NOT IN (SELECT	[PatientID] FROM @TBL_HOSP)
		AND
			[Patient].[Patient].[IsActive] = 1
		ORDER BY 
			[NAME_CODE] 
		ASC;
		
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
			FROM
				[Patient].[Patient]
			WHERE
				[Patient].[Patient].[ChartNumber] LIKE @stats ESCAPE '\'
			AND
				[Patient].[Patient].[ClinicID] = @ClinicID
			AND
				[Patient].[Patient].[PatientID] NOT IN (SELECT	[PatientID] FROM @TBL_HOSP)
			AND
				[Patient].[Patient].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
		END
		IF NOT EXISTS (SELECT [ID] FROM @TBL_ANS)
		BEGIN
			SELECT @stats = '%' + @stats;
			
			INSERT INTO
				@TBL_ANS
			SELECT TOP 10 		
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') AS [NAME_CODE]
			FROM
				[Patient].[Patient]
			WHERE
				((LTRIM(RTRIM([Patient].[Patient].[LastName] + ' ' + [Patient].[Patient].[FirstName] + ' ' + ISNULL([Patient].[Patient].[MiddleName], '')))) + ' [' +[Patient].[Patient].[ChartNumber] + ']') LIKE @stats ESCAPE '\'
			AND
				[Patient].[Patient].[ClinicID] = @ClinicID
			AND
				[Patient].[Patient].[PatientID] NOT IN (SELECT	[PatientID] FROM @TBL_HOSP)
			AND
				[Patient].[Patient].[IsActive] = 1
			ORDER BY 
				[NAME_CODE] 
			ASC;
			END
	END
		
	SELECT * FROM @TBL_ANS;	
	-- EXEC [Patient].[usp_GetAutoCompleteVisit_Patient] @ClinicID = '2', @stats = 'XAVC'
	-- EXEC [Patient].[usp_GetAutoCompleteVisit_Patient] @ClinicID = '2', @stats = ' '
END






GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Patient].[usp_GetIsDischarged_PatientHospitalization]    Script Date: 07/05/2013 20:28:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Patient].[usp_GetIsDischarged_PatientHospitalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Patient].[usp_GetIsDischarged_PatientHospitalization]
GO



/****** Object:  StoredProcedure [Patient].[usp_GetIsDischarged_PatientHospitalization]    Script Date: 07/05/2013 20:28:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Patient].[usp_GetIsDischarged_PatientHospitalization] 
	@PatientID	BIGINT
AS
BEGIN
	SET NOCOUNT ON;

DECLARE @TBL_HOSP TABLE
(
	[ID] INT IDENTITY(1, 1) NOT NULL
	, [PATIENT_ID] BIGINT NOT NULL
);

INSERT INTO 
	@TBL_HOSP ([PATIENT_ID])
SELECT
	[PatientID]
FROM
	[Patient].[PatientHospitalization]
WHERE
	[DischargedOn] IS NULL
AND
	[Patient].[PatientHospitalization].[PatientID] = @PatientID
AND
	[Patient].[PatientHospitalization].[IsActive] = 1;

SELECT * FROM @TBL_HOSP

	-- EXEC [Patient].[usp_GetIsDischarged_PatientHospitalization] 4019
	-- EXEC [Patient].[usp_GetIsDischarged_PatientHospitalization] 3784
END

GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus1EOB_ClaimProcess]    Script Date: 07/07/2013 12:52:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetSetStatus1EOB_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetSetStatus1EOB_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus1EOB_ClaimProcess]    Script Date: 07/07/2013 12:52:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [Claim].[usp_GetSetStatus1EOB_ClaimProcess]
	
AS
BEGIN
		SET NOCOUNT ON;
		
		DECLARE @CLAIM_DONE TINYINT;
		
		DECLARE @PATIENT_VISIT_ID BIGINT;
		DECLARE @DOS DATE;
		
		SELECT @CLAIM_DONE = [Configuration].[General].[ClaimDoneFromDOSInDay] FROM [Configuration].[General];
		
		DECLARE CUR_DIAG CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID], [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			WHERE 
				[Patient].[PatientVisit].[ClaimStatusID] NOT IN (30, 29, 27, 24, 20, 18, 14, 12, 8, 5, 3)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) >= @CLAIM_DONE
			ORDER BY
				[Patient].[PatientVisit].[DOS]
			ASC;
		
		DECLARE @CurrentModificationOn DATETIME;
		SELECT @CurrentModificationOn = GETDATE();
		
		DECLARE @CurrentModificationBy BIGINT
		SELECT @CurrentModificationBy = 1;
		
		
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			--INSERT CLAIM PROCESS START

			-- SHOULD CALL THIS SP BEFORE PATIENT VISIT UPDATE
			
			DECLARE @ClaimStatusID TINYINT;
			DECLARE @AssignedTo INT = NULL;
			DECLARE @StatusStartDate DATETIME = NULL;
			DECLARE @StatusEndDate DATETIME;
			DECLARE @StartEndMins BIGINT;
			DECLARE @LogOutLogInMins BIGINT;
			DECLARE @LockUnLockMins BIGINT;
			
			IF EXISTS (SELECT [Claim].[ClaimProcess].[ClaimProcessID] FROM [Claim].[ClaimProcess] WHERE [Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID)
			BEGIN
				SELECT
					@StatusStartDate = MAX([Claim].[ClaimProcess].[StatusEndDate])
				FROM
					[Claim].[ClaimProcess]
				WHERE
					[Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID;
			END
			
			SELECT
				@ClaimStatusID = [Patient].[PatientVisit].[ClaimStatusID]
				, @AssignedTo = [Patient].[PatientVisit].[AssignedTo]
				, @StatusStartDate = CASE WHEN @StatusStartDate IS NULL THEN [Patient].[PatientVisit].[DOS] ELSE @StatusStartDate END
			FROM
				[Patient].[PatientVisit]
			WHERE
				[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
			
			SELECT @StatusEndDate = @CurrentModificationOn;
			
			SELECT @StartEndMins = DATEDIFF(MINUTE, @StatusStartDate, @StatusEndDate);
			
			IF @AssignedTo IS NULL
			BEGIN
				SELECT @LogOutLogInMins = 0;
				SELECT @LockUnLockMins = 0;
			END
			ELSE
			BEGIN
				DECLARE @TBL_LOG_IN TABLE
				(
					[LOG_IN_LOG_OUT_ID] [BIGINT] NOT NULL,
					[LOG_IN_ON] [DATETIME] NOT NULL,
					[LOG_OUT_ON] [DATETIME] NOT NULL,
					[USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOG_IN
				SELECT
					[Audit].[LogInLogOut].[LogInLogOutID] AS [LOG_IN_LOG_OUT_ID]
					, [Audit].[LogInLogOut].[LogInOn] AS [LOG_IN_ON]
					, ISNULL([Audit].[LogInLogOut].[LogOutOn], @StatusEndDate) AS [LOG_OUT_ON]
					, '0' AS [USED_DURATION_MINS]
				FROM
					[Audit].[LogInLogOut]
				WHERE
					[Audit].[LogInLogOut].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LogInLogOut].[LogInOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LogInLogOut].[LogOutOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);
				
				DECLARE @DT_MIN DATETIME;
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusStartDate AS [LOG_IN_ON]
						, @StatusStartDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_IN_ON] = @StatusStartDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MIN([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				DECLARE @DT_MAX DATETIME;
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusEndDate AS [LOG_IN_ON]
						, @StatusEndDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_OUT_ON] = @StatusEndDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MAX([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				UPDATE
					@TBL_LOG_IN
				SET
					[USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOG_IN_ON], [LOG_OUT_ON]);
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LogOutLogInMins = DATEDIFF(MINUTE, @DT_MIN, @DT_MAX) - ISNULL((SELECT SUM([USED_DURATION_MINS]) FROM @TBL_LOG_IN), 0);
				
				-- Begin lock unlock table			
			
				DECLARE @TBL_LOCK TABLE 
				(
					[LOCK_UNLOCK_ID] [BIGINT] NOT NULL,
					[LOCK_ON] [DATETIME] NOT NULL,
					[UN_LOCK_ON] [DATETIME] NOT NULL,
					[UN_USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOCK
				SELECT
					[Audit].[LockUnLock].[LockUnLockID] AS [LOCK_UNLOCK_ID]
					, [Audit].[LockUnLock].[LockOn] AS [LOCK_ON]
					, ISNULL([Audit].[LockUnLock].[UnLockOn], @StatusEndDate) AS [UN_LOCK_ON]
					, '0' AS [UN_USED_DURATION_MINS]
				FROM
					[Audit].[LockUnLock]
				WHERE
					[Audit].[LockUnLock].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LockUnLock].[LockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LockUnLock].[UnLockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);				
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusStartDate AS [LOCK_ON]
						, @StatusStartDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusStartDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MIN([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusEndDate AS [LOCK_ON]
						, @StatusEndDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusEndDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MAX([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				UPDATE
					@TBL_LOCK
				SET
					[UN_USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOCK_ON], [UN_LOCK_ON]);
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LockUnlockMins = ISNULL((SELECT SUM([UN_USED_DURATION_MINS]) FROM @TBL_LOCK), 0);
				
				--End Lock Unlock
			END
		
			DECLARE @DurationMins BIGINT;
			SELECT @DurationMins = @StartEndMins - (@LogOutLogInMins + @LockUnLockMins);
			
			DECLARE @Comment NVARCHAR(4000);
			SELECT @Comment = [Patient].[PatientVisit].[Comment] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID

			INSERT INTO [Claim].[ClaimProcess]
			(
				[PatientVisitID]
				, [ClaimStatusID]
				, [AssignedTo]
				, [StatusStartDate]
				, [StatusEndDate]
				, [StartEndMins]
				, [LogOutLogInMins]
				, [LockUnLockMins]
				, [DurationMins]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
			VALUES
			(
				@PATIENT_VISIT_ID
				, @ClaimStatusID
				, @AssignedTo
				, @StatusStartDate
				, @StatusEndDate
				, @StartEndMins
				, @LogOutLogInMins
				, @LockUnLockMins
				, @DurationMins
				, @Comment
				, @CurrentModificationBy
				, @CurrentModificationOn
				, @CurrentModificationBy
				, @CurrentModificationOn
				, 1
			);				
		
		--INSERT CLAIM PROCESS END

		--UPDATE CLAIM STATUS IN PATIENT VISIT START
		INSERT INTO 
			[Patient].[PatientVisitHistory]
			(
				[PatientVisitID]
				, [PatientID]
				, [PatientHospitalizationID]
				, [DOS]
				, [IllnessIndicatorID]
				, [IllnessIndicatorDate]
				, [FacilityTypeID]
				, [FacilityDoneID]
				, [PrimaryClaimDiagnosisID]
				, [DoctorNoteRelPath]
				, [SuperBillRelPath]
				, [PatientVisitDesc]
				, [ClaimStatusID]
				, [AssignedTo]
				, [TargetBAUserID]
				, [TargetQAUserID]
				, [TargetEAUserID]
				, [PatientVisitComplexity]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
		SELECT
			[Patient].[PatientVisit].[PatientVisitID]
			, [Patient].[PatientVisit].[PatientID]
			, [Patient].[PatientVisit].[PatientHospitalizationID]
			, [Patient].[PatientVisit].[DOS]
			, [Patient].[PatientVisit].[IllnessIndicatorID]
			, [Patient].[PatientVisit].[IllnessIndicatorDate]
			, [Patient].[PatientVisit].[FacilityTypeID]
			, [Patient].[PatientVisit].[FacilityDoneID]
			, [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, [Patient].[PatientVisit].[DoctorNoteRelPath]
			, [Patient].[PatientVisit].[SuperBillRelPath]
			, [Patient].[PatientVisit].[PatientVisitDesc]
			, [Patient].[PatientVisit].[ClaimStatusID]
			, [Patient].[PatientVisit].[AssignedTo]
			, [Patient].[PatientVisit].[TargetBAUserID]
			, [Patient].[PatientVisit].[TargetQAUserID]
			, [Patient].[PatientVisit].[TargetEAUserID]
			, [Patient].[PatientVisit].[PatientVisitComplexity]
			, [Patient].[PatientVisit].[Comment]
			, @CurrentModificationBy
			, @CurrentModificationOn
			, @CurrentModificationBy
			, @CurrentModificationOn
			, [Patient].[PatientVisit].[IsActive]
		FROM 
			[Patient].[PatientVisit]
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
						
		UPDATE 
			[Patient].[PatientVisit]
		SET 
			 [ClaimStatusID] = [ClaimStatusID] + 1
			 ,[Comment] = 'Status changed by automated job services on ' + CONVERT(NVARCHAR, GETDATE(), 13) + '. Reason : Claim not completed within ' + CAST(@CLAIM_DONE AS NVARCHAR(3)) + ' days.'
			 ,[LastModifiedBy] = @CurrentModificationBy
			 ,[LastModifiedOn] = @CurrentModificationOn			      
		WHERE [Patient].[PatientVisit].[PatientVisitid] = @PATIENT_VISIT_ID;
		 
		--UPDATE CLAIM STATUS IN PATIENT VISIT END		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;		
	END
	
	CLOSE CUR_DIAG;
	DEALLOCATE CUR_DIAG;
	
	-- EXEC [Claim].[usp_GetSetStatus1EOB_ClaimProcess] 
END








GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus2EDI_ClaimProcess]    Script Date: 07/07/2013 12:52:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetSetStatus2EDI_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetSetStatus2EDI_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus2EDI_ClaimProcess]    Script Date: 07/07/2013 12:52:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetSetStatus2EDI_ClaimProcess]
	
AS
BEGIN
		SET NOCOUNT ON;
		
		DECLARE @EDI_FILE_SENT TINYINT;
		
		DECLARE @PATIENT_VISIT_ID BIGINT;
		DECLARE @DOS DATE;
		
		SELECT @EDI_FILE_SENT = [Configuration].[General].[EDIFileSentFromDOSInDay] FROM [Configuration].[General];
		
		DECLARE CUR_DIAG CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID], [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			WHERE 
				[Patient].[PatientVisit].[ClaimStatusID] NOT IN (30, 29, 28, 27, 26, 25, 24, 23, 22, 20, 18, 14, 12, 8, 5, 3)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) >= @EDI_FILE_SENT
			ORDER BY
				[Patient].[PatientVisit].[DOS]
			ASC;
		
		DECLARE @CurrentModificationOn DATETIME;
		SELECT @CurrentModificationOn = GETDATE();
		
		DECLARE @CurrentModificationBy BIGINT
		SELECT @CurrentModificationBy = 1;
		
		
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			--INSERT CLAIM PROCESS START

			-- SHOULD CALL THIS SP BEFORE PATIENT VISIT UPDATE
			
			DECLARE @ClaimStatusID TINYINT;
			DECLARE @AssignedTo INT = NULL;
			DECLARE @StatusStartDate DATETIME = NULL;
			DECLARE @StatusEndDate DATETIME;
			DECLARE @StartEndMins BIGINT;
			DECLARE @LogOutLogInMins BIGINT;
			DECLARE @LockUnLockMins BIGINT;
			
			IF EXISTS (SELECT [Claim].[ClaimProcess].[ClaimProcessID] FROM [Claim].[ClaimProcess] WHERE [Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID)
			BEGIN
				SELECT
					@StatusStartDate = MAX([Claim].[ClaimProcess].[StatusEndDate])
				FROM
					[Claim].[ClaimProcess]
				WHERE
					[Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID;
			END
			
			SELECT
				@ClaimStatusID = [Patient].[PatientVisit].[ClaimStatusID]
				, @AssignedTo = [Patient].[PatientVisit].[AssignedTo]
				, @StatusStartDate = CASE WHEN @StatusStartDate IS NULL THEN [Patient].[PatientVisit].[DOS] ELSE @StatusStartDate END
			FROM
				[Patient].[PatientVisit]
			WHERE
				[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
			
			SELECT @StatusEndDate = @CurrentModificationOn;
			
			SELECT @StartEndMins = DATEDIFF(MINUTE, @StatusStartDate, @StatusEndDate);
			
			IF @AssignedTo IS NULL
			BEGIN
				SELECT @LogOutLogInMins = 0;
				SELECT @LockUnLockMins = 0;
			END
			ELSE
			BEGIN
				DECLARE @TBL_LOG_IN TABLE
				(
					[LOG_IN_LOG_OUT_ID] [BIGINT] NOT NULL,
					[LOG_IN_ON] [DATETIME] NOT NULL,
					[LOG_OUT_ON] [DATETIME] NOT NULL,
					[USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOG_IN
				SELECT
					[Audit].[LogInLogOut].[LogInLogOutID] AS [LOG_IN_LOG_OUT_ID]
					, [Audit].[LogInLogOut].[LogInOn] AS [LOG_IN_ON]
					, ISNULL([Audit].[LogInLogOut].[LogOutOn], @StatusEndDate) AS [LOG_OUT_ON]
					, '0' AS [USED_DURATION_MINS]
				FROM
					[Audit].[LogInLogOut]
				WHERE
					[Audit].[LogInLogOut].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LogInLogOut].[LogInOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LogInLogOut].[LogOutOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);
				
				DECLARE @DT_MIN DATETIME;
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusStartDate AS [LOG_IN_ON]
						, @StatusStartDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_IN_ON] = @StatusStartDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MIN([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				DECLARE @DT_MAX DATETIME;
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusEndDate AS [LOG_IN_ON]
						, @StatusEndDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_OUT_ON] = @StatusEndDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MAX([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				UPDATE
					@TBL_LOG_IN
				SET
					[USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOG_IN_ON], [LOG_OUT_ON]);
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LogOutLogInMins = DATEDIFF(MINUTE, @DT_MIN, @DT_MAX) - ISNULL((SELECT SUM([USED_DURATION_MINS]) FROM @TBL_LOG_IN), 0);
				
				-- Begin lock unlock table			
			
				DECLARE @TBL_LOCK TABLE 
				(
					[LOCK_UNLOCK_ID] [BIGINT] NOT NULL,
					[LOCK_ON] [DATETIME] NOT NULL,
					[UN_LOCK_ON] [DATETIME] NOT NULL,
					[UN_USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOCK
				SELECT
					[Audit].[LockUnLock].[LockUnLockID] AS [LOCK_UNLOCK_ID]
					, [Audit].[LockUnLock].[LockOn] AS [LOCK_ON]
					, ISNULL([Audit].[LockUnLock].[UnLockOn], @StatusEndDate) AS [UN_LOCK_ON]
					, '0' AS [UN_USED_DURATION_MINS]
				FROM
					[Audit].[LockUnLock]
				WHERE
					[Audit].[LockUnLock].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LockUnLock].[LockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LockUnLock].[UnLockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);				
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusStartDate AS [LOCK_ON]
						, @StatusStartDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusStartDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MIN([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusEndDate AS [LOCK_ON]
						, @StatusEndDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusEndDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MAX([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				UPDATE
					@TBL_LOCK
				SET
					[UN_USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOCK_ON], [UN_LOCK_ON]);
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LockUnlockMins = ISNULL((SELECT SUM([UN_USED_DURATION_MINS]) FROM @TBL_LOCK), 0);
				
				--End Lock Unlock
			END
		
			DECLARE @DurationMins BIGINT;
			SELECT @DurationMins = @StartEndMins - (@LogOutLogInMins + @LockUnLockMins);
			
			DECLARE @Comment NVARCHAR(4000);
			SELECT @Comment = [Patient].[PatientVisit].[Comment] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID

			INSERT INTO [Claim].[ClaimProcess]
			(
				[PatientVisitID]
				, [ClaimStatusID]
				, [AssignedTo]
				, [StatusStartDate]
				, [StatusEndDate]
				, [StartEndMins]
				, [LogOutLogInMins]
				, [LockUnLockMins]
				, [DurationMins]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
			VALUES
			(
				@PATIENT_VISIT_ID
				, @ClaimStatusID
				, @AssignedTo
				, @StatusStartDate
				, @StatusEndDate
				, @StartEndMins
				, @LogOutLogInMins
				, @LockUnLockMins
				, @DurationMins
				, @Comment
				, @CurrentModificationBy
				, @CurrentModificationOn
				, @CurrentModificationBy
				, @CurrentModificationOn
				, 1
			);				
		
		--INSERT CLAIM PROCESS END

		--UPDATE CLAIM STATUS IN PATIENT VISIT START
		INSERT INTO 
			[Patient].[PatientVisitHistory]
			(
				[PatientVisitID]
				, [PatientID]
				, [PatientHospitalizationID]
				, [DOS]
				, [IllnessIndicatorID]
				, [IllnessIndicatorDate]
				, [FacilityTypeID]
				, [FacilityDoneID]
				, [PrimaryClaimDiagnosisID]
				, [DoctorNoteRelPath]
				, [SuperBillRelPath]
				, [PatientVisitDesc]
				, [ClaimStatusID]
				, [AssignedTo]
				, [TargetBAUserID]
				, [TargetQAUserID]
				, [TargetEAUserID]
				, [PatientVisitComplexity]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
		SELECT
			[Patient].[PatientVisit].[PatientVisitID]
			, [Patient].[PatientVisit].[PatientID]
			, [Patient].[PatientVisit].[PatientHospitalizationID]
			, [Patient].[PatientVisit].[DOS]
			, [Patient].[PatientVisit].[IllnessIndicatorID]
			, [Patient].[PatientVisit].[IllnessIndicatorDate]
			, [Patient].[PatientVisit].[FacilityTypeID]
			, [Patient].[PatientVisit].[FacilityDoneID]
			, [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, [Patient].[PatientVisit].[DoctorNoteRelPath]
			, [Patient].[PatientVisit].[SuperBillRelPath]
			, [Patient].[PatientVisit].[PatientVisitDesc]
			, [Patient].[PatientVisit].[ClaimStatusID]
			, [Patient].[PatientVisit].[AssignedTo]
			, [Patient].[PatientVisit].[TargetBAUserID]
			, [Patient].[PatientVisit].[TargetQAUserID]
			, [Patient].[PatientVisit].[TargetEAUserID]
			, [Patient].[PatientVisit].[PatientVisitComplexity]
			, [Patient].[PatientVisit].[Comment]
			, @CurrentModificationBy
			, @CurrentModificationOn
			, @CurrentModificationBy
			, @CurrentModificationOn
			, [Patient].[PatientVisit].[IsActive]
		FROM 
			[Patient].[PatientVisit]
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
						
		UPDATE 
			[Patient].[PatientVisit]
		SET 
			 [ClaimStatusID] = [ClaimStatusID] + 1
			 ,[Comment] = 'Status changed by automated job services on ' + CONVERT(NVARCHAR, GETDATE(), 13) + '. Reason : Claim not sent within ' + CAST(@EDI_FILE_SENT AS NVARCHAR(3)) + ' days.'
			 ,[LastModifiedBy] = @CurrentModificationBy
			 ,[LastModifiedOn] = @CurrentModificationOn			      
		WHERE [Patient].[PatientVisit].[PatientVisitid] = @PATIENT_VISIT_ID;
		 
		--UPDATE CLAIM STATUS IN PATIENT VISIT END		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;		
	END
	
	CLOSE CUR_DIAG;
	DEALLOCATE CUR_DIAG;
	
	-- EXEC [Claim].[usp_GetSetStatus2EDI_ClaimProcess] 
END








GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus3QA_ClaimProcess]    Script Date: 07/07/2013 12:52:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetSetStatus3QA_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetSetStatus3QA_ClaimProcess]
GO


/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus3QA_ClaimProcess]    Script Date: 07/07/2013 12:52:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetSetStatus3QA_ClaimProcess]
	
AS
BEGIN
		SET NOCOUNT ON;
		
		DECLARE @QA_COMPLETE TINYINT;
		
		DECLARE @PATIENT_VISIT_ID BIGINT;
		DECLARE @DOS DATE;
		
		SELECT @QA_COMPLETE = [Configuration].[General].[QACompleteFromDOSInDay] FROM [Configuration].[General];
		
		DECLARE CUR_DIAG CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID], [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			WHERE 
				[Patient].[PatientVisit].[ClaimStatusID] NOT IN (30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 14, 12, 8, 5, 3)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) >= @QA_COMPLETE
			ORDER BY
				[Patient].[PatientVisit].[DOS]
			ASC;
		
		DECLARE @CurrentModificationOn DATETIME;
		SELECT @CurrentModificationOn = GETDATE();
		
		DECLARE @CurrentModificationBy BIGINT
		SELECT @CurrentModificationBy = 1;
		
		
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			--INSERT CLAIM PROCESS START

			-- SHOULD CALL THIS SP BEFORE PATIENT VISIT UPDATE
			
			DECLARE @ClaimStatusID TINYINT;
			DECLARE @AssignedTo INT = NULL;
			DECLARE @StatusStartDate DATETIME = NULL;
			DECLARE @StatusEndDate DATETIME;
			DECLARE @StartEndMins BIGINT;
			DECLARE @LogOutLogInMins BIGINT;
			DECLARE @LockUnLockMins BIGINT;
			
			IF EXISTS (SELECT [Claim].[ClaimProcess].[ClaimProcessID] FROM [Claim].[ClaimProcess] WHERE [Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID)
			BEGIN
				SELECT
					@StatusStartDate = MAX([Claim].[ClaimProcess].[StatusEndDate])
				FROM
					[Claim].[ClaimProcess]
				WHERE
					[Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID;
			END
			
			SELECT
				@ClaimStatusID = [Patient].[PatientVisit].[ClaimStatusID]
				, @AssignedTo = [Patient].[PatientVisit].[AssignedTo]
				, @StatusStartDate = CASE WHEN @StatusStartDate IS NULL THEN [Patient].[PatientVisit].[DOS] ELSE @StatusStartDate END
			FROM
				[Patient].[PatientVisit]
			WHERE
				[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
			
			SELECT @StatusEndDate = @CurrentModificationOn;
			
			SELECT @StartEndMins = DATEDIFF(MINUTE, @StatusStartDate, @StatusEndDate);
			
			IF @AssignedTo IS NULL
			BEGIN
				SELECT @LogOutLogInMins = 0;
				SELECT @LockUnLockMins = 0;
			END
			ELSE
			BEGIN
				DECLARE @TBL_LOG_IN TABLE
				(
					[LOG_IN_LOG_OUT_ID] [BIGINT] NOT NULL,
					[LOG_IN_ON] [DATETIME] NOT NULL,
					[LOG_OUT_ON] [DATETIME] NOT NULL,
					[USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOG_IN
				SELECT
					[Audit].[LogInLogOut].[LogInLogOutID] AS [LOG_IN_LOG_OUT_ID]
					, [Audit].[LogInLogOut].[LogInOn] AS [LOG_IN_ON]
					, ISNULL([Audit].[LogInLogOut].[LogOutOn], @StatusEndDate) AS [LOG_OUT_ON]
					, '0' AS [USED_DURATION_MINS]
				FROM
					[Audit].[LogInLogOut]
				WHERE
					[Audit].[LogInLogOut].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LogInLogOut].[LogInOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LogInLogOut].[LogOutOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);
				
				DECLARE @DT_MIN DATETIME;
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusStartDate AS [LOG_IN_ON]
						, @StatusStartDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_IN_ON] = @StatusStartDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MIN([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				DECLARE @DT_MAX DATETIME;
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusEndDate AS [LOG_IN_ON]
						, @StatusEndDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_OUT_ON] = @StatusEndDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MAX([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				UPDATE
					@TBL_LOG_IN
				SET
					[USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOG_IN_ON], [LOG_OUT_ON]);
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LogOutLogInMins = DATEDIFF(MINUTE, @DT_MIN, @DT_MAX) - ISNULL((SELECT SUM([USED_DURATION_MINS]) FROM @TBL_LOG_IN), 0);
				
				-- Begin lock unlock table			
			
				DECLARE @TBL_LOCK TABLE 
				(
					[LOCK_UNLOCK_ID] [BIGINT] NOT NULL,
					[LOCK_ON] [DATETIME] NOT NULL,
					[UN_LOCK_ON] [DATETIME] NOT NULL,
					[UN_USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOCK
				SELECT
					[Audit].[LockUnLock].[LockUnLockID] AS [LOCK_UNLOCK_ID]
					, [Audit].[LockUnLock].[LockOn] AS [LOCK_ON]
					, ISNULL([Audit].[LockUnLock].[UnLockOn], @StatusEndDate) AS [UN_LOCK_ON]
					, '0' AS [UN_USED_DURATION_MINS]
				FROM
					[Audit].[LockUnLock]
				WHERE
					[Audit].[LockUnLock].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LockUnLock].[LockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LockUnLock].[UnLockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);				
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusStartDate AS [LOCK_ON]
						, @StatusStartDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusStartDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MIN([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusEndDate AS [LOCK_ON]
						, @StatusEndDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusEndDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MAX([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				UPDATE
					@TBL_LOCK
				SET
					[UN_USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOCK_ON], [UN_LOCK_ON]);
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LockUnlockMins = ISNULL((SELECT SUM([UN_USED_DURATION_MINS]) FROM @TBL_LOCK), 0);
				
				--End Lock Unlock
			END
		
			DECLARE @DurationMins BIGINT;
			SELECT @DurationMins = @StartEndMins - (@LogOutLogInMins + @LockUnLockMins);
			
			DECLARE @Comment NVARCHAR(4000);
			SELECT @Comment = [Patient].[PatientVisit].[Comment] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID

			INSERT INTO [Claim].[ClaimProcess]
			(
				[PatientVisitID]
				, [ClaimStatusID]
				, [AssignedTo]
				, [StatusStartDate]
				, [StatusEndDate]
				, [StartEndMins]
				, [LogOutLogInMins]
				, [LockUnLockMins]
				, [DurationMins]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
			VALUES
			(
				@PATIENT_VISIT_ID
				, @ClaimStatusID
				, @AssignedTo
				, @StatusStartDate
				, @StatusEndDate
				, @StartEndMins
				, @LogOutLogInMins
				, @LockUnLockMins
				, @DurationMins
				, @Comment
				, @CurrentModificationBy
				, @CurrentModificationOn
				, @CurrentModificationBy
				, @CurrentModificationOn
				, 1
			);				
		
		--INSERT CLAIM PROCESS END

		--UPDATE CLAIM STATUS IN PATIENT VISIT START
		INSERT INTO 
			[Patient].[PatientVisitHistory]
			(
				[PatientVisitID]
				, [PatientID]
				, [PatientHospitalizationID]
				, [DOS]
				, [IllnessIndicatorID]
				, [IllnessIndicatorDate]
				, [FacilityTypeID]
				, [FacilityDoneID]
				, [PrimaryClaimDiagnosisID]
				, [DoctorNoteRelPath]
				, [SuperBillRelPath]
				, [PatientVisitDesc]
				, [ClaimStatusID]
				, [AssignedTo]
				, [TargetBAUserID]
				, [TargetQAUserID]
				, [TargetEAUserID]
				, [PatientVisitComplexity]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
		SELECT
			[Patient].[PatientVisit].[PatientVisitID]
			, [Patient].[PatientVisit].[PatientID]
			, [Patient].[PatientVisit].[PatientHospitalizationID]
			, [Patient].[PatientVisit].[DOS]
			, [Patient].[PatientVisit].[IllnessIndicatorID]
			, [Patient].[PatientVisit].[IllnessIndicatorDate]
			, [Patient].[PatientVisit].[FacilityTypeID]
			, [Patient].[PatientVisit].[FacilityDoneID]
			, [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, [Patient].[PatientVisit].[DoctorNoteRelPath]
			, [Patient].[PatientVisit].[SuperBillRelPath]
			, [Patient].[PatientVisit].[PatientVisitDesc]
			, [Patient].[PatientVisit].[ClaimStatusID]
			, [Patient].[PatientVisit].[AssignedTo]
			, [Patient].[PatientVisit].[TargetBAUserID]
			, [Patient].[PatientVisit].[TargetQAUserID]
			, [Patient].[PatientVisit].[TargetEAUserID]
			, [Patient].[PatientVisit].[PatientVisitComplexity]
			, [Patient].[PatientVisit].[Comment]
			, @CurrentModificationBy
			, @CurrentModificationOn
			, @CurrentModificationBy
			, @CurrentModificationOn
			, [Patient].[PatientVisit].[IsActive]
		FROM 
			[Patient].[PatientVisit]
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
						
		UPDATE 
			[Patient].[PatientVisit]
		SET 
			 [ClaimStatusID] = [ClaimStatusID] + 1
			 ,[Comment] = 'Status changed by automated job services on ' + CONVERT(NVARCHAR, GETDATE(), 13) + '. Reason : Claim not verified within ' + CAST(@QA_COMPLETE AS NVARCHAR(3)) + ' days.'
			 ,[LastModifiedBy] = @CurrentModificationBy
			 ,[LastModifiedOn] = @CurrentModificationOn			      
		WHERE [Patient].[PatientVisit].[PatientVisitid] = @PATIENT_VISIT_ID;
		 
		--UPDATE CLAIM STATUS IN PATIENT VISIT END		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;		
	END
	
	CLOSE CUR_DIAG;
	DEALLOCATE CUR_DIAG;
	
	-- EXEC [Claim].[usp_GetSetStatus3QA_ClaimProcess] 
END








GO



----------------------------------------------------------------------


/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus4BA_ClaimProcess]    Script Date: 07/07/2013 12:53:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Claim].[usp_GetSetStatus4BA_ClaimProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Claim].[usp_GetSetStatus4BA_ClaimProcess]
GO



/****** Object:  StoredProcedure [Claim].[usp_GetSetStatus4BA_ClaimProcess]    Script Date: 07/07/2013 12:53:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Claim].[usp_GetSetStatus4BA_ClaimProcess]
	
AS
BEGIN
		SET NOCOUNT ON;
		
		DECLARE @BA_COMPLETE TINYINT;
		
		DECLARE @PATIENT_VISIT_ID BIGINT;
		DECLARE @DOS DATE;
		
		SELECT @BA_COMPLETE = [Configuration].[General].[BACompleteFromDOSInDay] FROM [Configuration].[General];
		
		DECLARE CUR_DIAG CURSOR LOCAL FAST_FORWARD READ_ONLY FOR 
			SELECT 
				[Patient].[PatientVisit].[PatientVisitID], [Patient].[PatientVisit].[DOS]
			FROM
				[Patient].[PatientVisit]
			WHERE 
				[Patient].[PatientVisit].[ClaimStatusID] NOT IN (30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 5, 3)
			AND
				DATEDIFF(DAY, [Patient].[PatientVisit].[DOS], GETDATE()) >= @BA_COMPLETE
			ORDER BY
				[Patient].[PatientVisit].[DOS]
			ASC;
		
		DECLARE @CurrentModificationOn DATETIME;
		SELECT @CurrentModificationOn = GETDATE();
		
		DECLARE @CurrentModificationBy BIGINT
		SELECT @CurrentModificationBy = 1;
		
		
		OPEN CUR_DIAG;
		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;
		
		WHILE @@FETCH_STATUS = 0
		BEGIN
			--INSERT CLAIM PROCESS START

			-- SHOULD CALL THIS SP BEFORE PATIENT VISIT UPDATE
			
			DECLARE @ClaimStatusID TINYINT;
			DECLARE @AssignedTo INT = NULL;
			DECLARE @StatusStartDate DATETIME = NULL;
			DECLARE @StatusEndDate DATETIME;
			DECLARE @StartEndMins BIGINT;
			DECLARE @LogOutLogInMins BIGINT;
			DECLARE @LockUnLockMins BIGINT;
			
			IF EXISTS (SELECT [Claim].[ClaimProcess].[ClaimProcessID] FROM [Claim].[ClaimProcess] WHERE [Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID)
			BEGIN
				SELECT
					@StatusStartDate = MAX([Claim].[ClaimProcess].[StatusEndDate])
				FROM
					[Claim].[ClaimProcess]
				WHERE
					[Claim].[ClaimProcess].[PatientVisitID] = @PATIENT_VISIT_ID;
			END
			
			SELECT
				@ClaimStatusID = [Patient].[PatientVisit].[ClaimStatusID]
				, @AssignedTo = [Patient].[PatientVisit].[AssignedTo]
				, @StatusStartDate = CASE WHEN @StatusStartDate IS NULL THEN [Patient].[PatientVisit].[DOS] ELSE @StatusStartDate END
			FROM
				[Patient].[PatientVisit]
			WHERE
				[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
			
			SELECT @StatusEndDate = @CurrentModificationOn;
			
			SELECT @StartEndMins = DATEDIFF(MINUTE, @StatusStartDate, @StatusEndDate);
			
			IF @AssignedTo IS NULL
			BEGIN
				SELECT @LogOutLogInMins = 0;
				SELECT @LockUnLockMins = 0;
			END
			ELSE
			BEGIN
				DECLARE @TBL_LOG_IN TABLE
				(
					[LOG_IN_LOG_OUT_ID] [BIGINT] NOT NULL,
					[LOG_IN_ON] [DATETIME] NOT NULL,
					[LOG_OUT_ON] [DATETIME] NOT NULL,
					[USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOG_IN
				SELECT
					[Audit].[LogInLogOut].[LogInLogOutID] AS [LOG_IN_LOG_OUT_ID]
					, [Audit].[LogInLogOut].[LogInOn] AS [LOG_IN_ON]
					, ISNULL([Audit].[LogInLogOut].[LogOutOn], @StatusEndDate) AS [LOG_OUT_ON]
					, '0' AS [USED_DURATION_MINS]
				FROM
					[Audit].[LogInLogOut]
				WHERE
					[Audit].[LogInLogOut].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LogInLogOut].[LogInOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LogInLogOut].[LogOutOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);
				
				DECLARE @DT_MIN DATETIME;
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusStartDate AS [LOG_IN_ON]
						, @StatusStartDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_IN_ON] = @StatusStartDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MIN([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				DECLARE @DT_MAX DATETIME;
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOG_IN
					SELECT
						'-1' AS [LOG_IN_LOG_OUT_ID]
						, @StatusEndDate AS [LOG_IN_ON]
						, @StatusEndDate AS [LOG_OUT_ON]
						, '0' AS [USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOG_IN
					SET
						[LOG_OUT_ON] = @StatusEndDate
					WHERE
						[LOG_IN_LOG_OUT_ID] = 
						(
							SELECT
								MAX([LOG_IN_LOG_OUT_ID])
							FROM
								@TBL_LOG_IN
						);
				END
				
				UPDATE
					@TBL_LOG_IN
				SET
					[USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOG_IN_ON], [LOG_OUT_ON]);
				
				SELECT @DT_MIN = MIN([LOG_IN_ON]) FROM @TBL_LOG_IN;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([LOG_OUT_ON]) FROM @TBL_LOG_IN;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LogOutLogInMins = DATEDIFF(MINUTE, @DT_MIN, @DT_MAX) - ISNULL((SELECT SUM([USED_DURATION_MINS]) FROM @TBL_LOG_IN), 0);
				
				-- Begin lock unlock table			
			
				DECLARE @TBL_LOCK TABLE 
				(
					[LOCK_UNLOCK_ID] [BIGINT] NOT NULL,
					[LOCK_ON] [DATETIME] NOT NULL,
					[UN_LOCK_ON] [DATETIME] NOT NULL,
					[UN_USED_DURATION_MINS] [BIGINT] NOT NULL
				);
				
				INSERT INTO
					@TBL_LOCK
				SELECT
					[Audit].[LockUnLock].[LockUnLockID] AS [LOCK_UNLOCK_ID]
					, [Audit].[LockUnLock].[LockOn] AS [LOCK_ON]
					, ISNULL([Audit].[LockUnLock].[UnLockOn], @StatusEndDate) AS [UN_LOCK_ON]
					, '0' AS [UN_USED_DURATION_MINS]
				FROM
					[Audit].[LockUnLock]
				WHERE
					[Audit].[LockUnLock].[UserID] = @AssignedTo
				AND
				(
					[Audit].[LockUnLock].[LockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				OR
					[Audit].[LockUnLock].[UnLockOn] BETWEEN @StatusStartDate AND @StatusEndDate
				);				
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				IF DATEDIFF(MINUTE, @StatusStartDate, @DT_MIN) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusStartDate AS [LOCK_ON]
						, @StatusStartDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusStartDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MIN([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				IF DATEDIFF(MINUTE, @DT_MAX, @StatusEndDate) > 0
				BEGIN
					INSERT INTO
						@TBL_LOCK
					SELECT
						'-1' AS [LOCK_UNLOCK_ID]
						, @StatusEndDate AS [LOCK_ON]
						, @StatusEndDate AS [UN_LOCK_ON]
						, '0' AS [UN_USED_DURATION_MINS];
				END
				ELSE
				BEGIN
					UPDATE
						@TBL_LOCK
					SET
						[LOCK_ON] = @StatusEndDate
					WHERE
						[LOCK_UNLOCK_ID] = 
						(
							SELECT
								MAX([LOCK_UNLOCK_ID])
							FROM
								@TBL_LOCK
						);
				END
				
				UPDATE
					@TBL_LOCK
				SET
					[UN_USED_DURATION_MINS] = DATEDIFF(MINUTE, [LOCK_ON], [UN_LOCK_ON]);
				
				SELECT @DT_MIN = MIN([LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MIN IS NULL
				BEGIN
					SELECT @DT_MIN = @StatusStartDate;
				END
				
				SELECT @DT_MAX = MAX([UN_LOCK_ON]) FROM @TBL_LOCK;
				IF @DT_MAX IS NULL
				BEGIN
					SELECT @DT_MAX = @StatusEndDate;
				END
				
				SELECT @LockUnlockMins = ISNULL((SELECT SUM([UN_USED_DURATION_MINS]) FROM @TBL_LOCK), 0);
				
				--End Lock Unlock
			END
		
			DECLARE @DurationMins BIGINT;
			SELECT @DurationMins = @StartEndMins - (@LogOutLogInMins + @LockUnLockMins);
			
			DECLARE @Comment NVARCHAR(4000);
			SELECT @Comment = [Patient].[PatientVisit].[Comment] FROM [Patient].[PatientVisit] WHERE [Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID

			INSERT INTO [Claim].[ClaimProcess]
			(
				[PatientVisitID]
				, [ClaimStatusID]
				, [AssignedTo]
				, [StatusStartDate]
				, [StatusEndDate]
				, [StartEndMins]
				, [LogOutLogInMins]
				, [LockUnLockMins]
				, [DurationMins]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
			VALUES
			(
				@PATIENT_VISIT_ID
				, @ClaimStatusID
				, @AssignedTo
				, @StatusStartDate
				, @StatusEndDate
				, @StartEndMins
				, @LogOutLogInMins
				, @LockUnLockMins
				, @DurationMins
				, @Comment
				, @CurrentModificationBy
				, @CurrentModificationOn
				, @CurrentModificationBy
				, @CurrentModificationOn
				, 1
			);				
		
		--INSERT CLAIM PROCESS END

		--UPDATE CLAIM STATUS IN PATIENT VISIT START
		INSERT INTO 
			[Patient].[PatientVisitHistory]
			(
				[PatientVisitID]
				, [PatientID]
				, [PatientHospitalizationID]
				, [DOS]
				, [IllnessIndicatorID]
				, [IllnessIndicatorDate]
				, [FacilityTypeID]
				, [FacilityDoneID]
				, [PrimaryClaimDiagnosisID]
				, [DoctorNoteRelPath]
				, [SuperBillRelPath]
				, [PatientVisitDesc]
				, [ClaimStatusID]
				, [AssignedTo]
				, [TargetBAUserID]
				, [TargetQAUserID]
				, [TargetEAUserID]
				, [PatientVisitComplexity]
				, [Comment]
				, [CreatedBy]
				, [CreatedOn]
				, [LastModifiedBy]
				, [LastModifiedOn]
				, [IsActive]
			)
		SELECT
			[Patient].[PatientVisit].[PatientVisitID]
			, [Patient].[PatientVisit].[PatientID]
			, [Patient].[PatientVisit].[PatientHospitalizationID]
			, [Patient].[PatientVisit].[DOS]
			, [Patient].[PatientVisit].[IllnessIndicatorID]
			, [Patient].[PatientVisit].[IllnessIndicatorDate]
			, [Patient].[PatientVisit].[FacilityTypeID]
			, [Patient].[PatientVisit].[FacilityDoneID]
			, [Patient].[PatientVisit].[PrimaryClaimDiagnosisID]
			, [Patient].[PatientVisit].[DoctorNoteRelPath]
			, [Patient].[PatientVisit].[SuperBillRelPath]
			, [Patient].[PatientVisit].[PatientVisitDesc]
			, [Patient].[PatientVisit].[ClaimStatusID]
			, [Patient].[PatientVisit].[AssignedTo]
			, [Patient].[PatientVisit].[TargetBAUserID]
			, [Patient].[PatientVisit].[TargetQAUserID]
			, [Patient].[PatientVisit].[TargetEAUserID]
			, [Patient].[PatientVisit].[PatientVisitComplexity]
			, [Patient].[PatientVisit].[Comment]
			, @CurrentModificationBy
			, @CurrentModificationOn
			, @CurrentModificationBy
			, @CurrentModificationOn
			, [Patient].[PatientVisit].[IsActive]
		FROM 
			[Patient].[PatientVisit]
		WHERE
			[Patient].[PatientVisit].[PatientVisitID] = @PATIENT_VISIT_ID;
						
		UPDATE 
			[Patient].[PatientVisit]
		SET 
			 [ClaimStatusID] = [ClaimStatusID] + 1
			 ,[Comment] = 'Status changed by automated job services on ' + CONVERT(NVARCHAR, GETDATE(), 13) + '. Reason : Claim not created within ' + CAST(@BA_COMPLETE AS NVARCHAR(3)) + ' days.'
			 ,[LastModifiedBy] = @CurrentModificationBy
			 ,[LastModifiedOn] = @CurrentModificationOn			      
		WHERE [Patient].[PatientVisit].[PatientVisitid] = @PATIENT_VISIT_ID;
		 
		--UPDATE CLAIM STATUS IN PATIENT VISIT END		
		FETCH NEXT FROM CUR_DIAG INTO @PATIENT_VISIT_ID, @DOS;		
	END
	
	CLOSE CUR_DIAG;
	DEALLOCATE CUR_DIAG;
	
	-- EXEC [Claim].[usp_GetSetStatus4BA_ClaimProcess] 
END








GO



----------------------------------------------------------------------

/****** Object:  StoredProcedure [Audit].[usp_GetDoneStatus_SyncStatus]    Script Date: 07/10/2013 09:00:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Audit].[usp_GetDoneStatus_SyncStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [Audit].[usp_GetDoneStatus_SyncStatus]
GO

/****** Object:  StoredProcedure [Audit].[usp_GetDoneStatus_SyncStatus]    Script Date: 07/10/2013 09:00:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Audit].[usp_GetDoneStatus_SyncStatus] 

AS
BEGIN
	SET NOCOUNT ON;
		
	DECLARE @RET_ANS TABLE
	(
		[ID] TINYINT IDENTITY(1, 1) NOT NULL
		, [IS_DONE] BIT NOT NULL
	);
	
	INSERT @RET_ANS ([IS_DONE]) VALUES (0);
	
	IF EXISTS (SELECT [Audit].[SyncStatus].[SyncStatusID] FROM [Audit].[SyncStatus] WITH (NOLOCK) WHERE [Audit].[SyncStatus].[EndOn] IS NULL)
	BEGIN
		IF EXISTS (SELECT [Audit].[SyncStatus].[SyncStatusID] FROM [Audit].[SyncStatus] WITH (NOLOCK) WHERE [Audit].[SyncStatus].[EndOn] IS NULL AND DATEDIFF(MINUTE, [StartOn], GETDATE()) > 300)
		BEGIN
			UPDATE @RET_ANS SET [IS_DONE] = 1;
		END
	END
	ELSE
	BEGIN
		UPDATE @RET_ANS SET [IS_DONE] = 1;
	END
		
	SELECT * FROM @RET_ANS;
			
	-- EXEC [Audit].[usp_GetDoneStatus_SyncStatus] 
	-- EXEC [Audit].[usp_GetDoneStatus_SyncStatus] 
END



GO






----------------------------------------------------------------------
